>package Prelude(
#^^^^^^^ source.bh meta.declaration.package.bh keyword.other.package.bh
#       ^ source.bh meta.declaration.package.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh entity.name.namespace.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
>        {-Add(..), Max(..), Log(..),-}
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.block.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.block.bh
#                                    ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.block.bh punctuation.definition.comment.bh
>        Monad(..), MonadFix(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                   ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                            ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Bits(..), Eq(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                     ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Literal(..), RealLiteral(..), SizedLiteral(..), StringLiteral(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                 ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                   ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Ord(..), Bounded(..), Bitwise(..), BitReduction(..), FShow(..), DefaultValue(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#            ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                         ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                              ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                           ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                             ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                   ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                                     ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimParam(..), PrimPort(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Bit, Rules, Module, Integer, Real, String, Char, SizeOf, Id__,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#             ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                           ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                   ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                 ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimAction, ActionValue, Action, ActionValue_, ActionWorld, AVStruct,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                 ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                         ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                       ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                    ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        TAdd, TSub, TMul, TDiv, TLog, TExp, TMax, TMin,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                            ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                  ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Nat(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#            ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        IsModule(..), addModuleRules, addRules,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        __value,        -- XXX not good
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                          ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>
>        (++), split, bitconcat,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        BitExtend(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        UInt, Int,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        signedLT, signedLE, signedGT, signedGE,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        signedShiftRight,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        signedMul, signedQuot,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                   ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        unsignedMul, unsignedQuot,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        error, warning, message,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        errorM, warningM, messageM,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primError, primWarning, primMessage,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                   ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primGenerateError, primPoisonedDef,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                           ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        moduleFix,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        splitIf, nosplitIf, nosplitDeepIf, splitDeepIf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                           ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        splitDeepAV, nosplitDeepAV,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        Clock, Reset, Inout, Inout_, Power,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primInoutCast0, primInoutUncast0,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        exposeCurrentClock,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        exposeCurrentReset,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        clockOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        clocksOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        noClock,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        resetOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        resetsOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        noReset,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primModuleClock, primModuleReset, primBuildModule,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                         ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                          ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        changeSpecialWires, -- primCLOCK, primRESET, primPOWER, primSW,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        sameFamily, isAncestor,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        chkClockDomain,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        impCondOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        primZeroExt, primSignExt, primTrunc,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                  ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primConcat, primSplit, PrimPair(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                               ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primOrd, primChr,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primValueOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primStringOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        StringProxy,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        _when_,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primExtract,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Position__, getStringPosition, setStringPosition, printPosition, noPosition, getEvalPosition,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                       ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                          ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                         ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                                     ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Type, typeOf, printType, isInterfaceType,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                 ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        forceIsModule,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Name__, primGetName, primMakeName, primJoinNames, primExtendNameIndex,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                           ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                          ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primGetNamePosition, primGetNameString,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primGetParamName,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        setStateName, primGetModuleName, primSavePortType,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                         ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Attributes__, setStateAttrib,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primJoinActions, primNoActions, toPrimAction, fromPrimAction,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                         ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                      ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primJoinRules, primNoRules, emptyRules,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                    ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        primFix,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primSeq,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimDeepSeqCond(..), PrimDeepSeqCond'(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primSeqCond,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        noAction, (:<-),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.operator.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        toActionValue_,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        fromActionValue_,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        primDynamicError,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        primStringConcat,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primStringToInteger,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        (+++), strConcat, stringLength,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        quote, doubleQuote,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        stringSplit, stringHead, stringTail, stringCons,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                 ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                             ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        stringToCharList, charListToString,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        charToString,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        charToInteger, integerToChar,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        isSpace, isLower, isUpper, isAlpha, isAlphaNum,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                   ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                            ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        isDigit, isOctDigit, isHexDigit,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        toUpper, toLower,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        digitToInteger, digitToBits, integerToDigit, bitsToDigit,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                     ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        hexDigitToInteger, hexDigitToBits, integerToHexDigit, bitsToHexDigit,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                           ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                           ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                              ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        primCharToString,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primUIntBitsToInteger, primIntBitsToInteger,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        ($), (∘), id, const, constFn, flip, while, curry, uncurry, asTypeOf,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                            ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                   ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                          ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                   ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        liftM, liftM2, bindM,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        (<+>), rJoin,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        (<+), (+>), preempts, preempted, rJoinPreempts,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#               ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                              ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                         ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        rJoinDescendingUrgency,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        rJoinExecutionOrder,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        rJoinMutuallyExclusive, rJoinConflictFree,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- for lack of better primitive handling
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        primAdd, primSub, primAnd, primOr, primXor,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                   ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                           ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primSL, primSRL, primSRA,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                         ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primInv, primNeg,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primULE, primULT,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primSLE, primSLT,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primBNot, primBAnd, primBOr, primMul,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primQuot, primRem,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        PrimIndex(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimShiftIndex(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimSelectable(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimUpdateable(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimWriteable(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primUpdateRangeFn,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        Bool(..), not, (&&), (||), _if,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                   ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        (===), (!==),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.infix.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        PrimUnit(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Reg(..), mkReg, mkRegU, mkRegA, asReg, readReg, writeReg, asIfc,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#            ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                               ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                  ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Maybe(..), unJust, isJust, isValid, validValue, fromMaybe,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                   ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                           ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                   ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                            ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Either(..), isLeft, isRight, either,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#               ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                    ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Empty(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        add, div, mod, quot, rem, exp,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#             ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                             ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                  ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        bind_, fmap,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Arith(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        max, min,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#             ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        reverseBits,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        countOnes, countZerosMSB, countZerosLSB,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                   ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                  ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- system tasks
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        $display,$displayh,$displayb,$displayo,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                  ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                            ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                      ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $write,$writeh,$writeb,$writeo,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        $fwrite,$fwriteb,$fwriteo,$fwriteh,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                          ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                   ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $sformat,$sformatAV,$swrite,$swriteAV,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                  ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                             ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                     ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $swriteh,$swritehAV,$swriteb,$swritebAV,$swriteo,$swriteoAV,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                  ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                             ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                      ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                                          ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $fdisplay,$fdisplayb,$fdisplayo,$fdisplayh,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                   ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                              ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                         ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        $error, $warning, $info, $fatal,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                           ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                  ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        $SVA, SvaParam(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        $random,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        $stop,$finish,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#               ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $dumpon,$dumpoff,$dumpvars,$dumpall,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                          ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                    ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $dumpfile,$dumpflush,$dumplimit,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                   ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                              ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        File(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $fopen,$fclose,$fflush,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $fgetc, $ungetc,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        stdin, stdout, stderr,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        stdout_mcd,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $time, $stime,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $test$plusargs,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        --- XXX for internal use only - these will not work in user code
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        $signed, $unsigned,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                  ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- tuples
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        Has_tpl_1(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple2, tuple2, Has_tpl_2(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple3, tuple3, Has_tpl_3(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple4, tuple4, Has_tpl_4(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple5, tuple5, Has_tpl_5(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple6, tuple6, Has_tpl_6(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple7, tuple7, Has_tpl_7(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Tuple8, tuple8, Has_tpl_8(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- lists required for desugaring
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        List(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        cons, nil,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#              ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        isCons, isNil,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        decodeList,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- other list primitives
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        listLength,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- infixed operators not available in BSV
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        compose, composeM,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- utility display functions
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        displayHex,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        displayDec,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        displayOct,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        displayBin,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- a constant with all bits set
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        constantWithAllBitsSet, constantWithAllBitsUnset,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- undefined values
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        PrimMakeUndefined(..), PrimMakeUndefined'(..), PrimMakeUndefined''(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                               ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                  ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                           ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primBuildUndefined,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primMakeRawUndefined,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- uninitialized values (BSV only)
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        PrimMakeUninitialized(..), PrimMakeUninitialized'(..), PrimMakeUninitialized''(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                          ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primMakeRawUninitialized,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primUninitialized,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        Fmt,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primFmtConcat,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        $format,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        integerToString,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        bitToString,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Array(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primArrayNew,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primArrayNewU,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        arrayLength,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primArrayInitialize,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primArrayCheck,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- Real
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        realToString, $realtobits, $bitstoreal,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                       ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh keyword.operator.prefix.dollar.bh
#                                    ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealSin, primRealCos, primRealTan,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                  ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealSinH, primRealCosH, primRealTanH,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                    ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealASin, primRealACos, primRealATan,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                    ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealASinH, primRealACosH, primRealATanH,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealATan2,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealSqrt,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealTrunc, primRealCeil, primRealFloor, primRealRound,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                    ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primSplitReal, primDecodeReal, primRealToDigits,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                       ^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        primRealIsInfinite, primRealIsNegativeZero,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- "Environment variables"
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        genC,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        genVerilog,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        genPackageName,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        genModuleName,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        compilerVersion,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        date,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        epochTime,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        buildVersion,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        testAssert,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- Ordering type for working with comparators
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        Ordering(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                 ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        Handle, IOMode(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        openFile, hClose,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        hIsEOF, hIsOpen, hIsClosed, hIsReadable, hIsWritable,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                         ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                    ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                 ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        BufferMode(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                   ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        hSetBuffering, hGetBuffering, hFlush,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                       ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                      ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        hPutStr, hPutStrLn, hPutChar,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        hGetLine, hGetChar,
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>
>        -- Generics
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>        Generic(..), Conc(..), ConcPrim(..), ConcPoly(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                     ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                               ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                             ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        Meta(..), MetaData(..), StarArg(..), NumArg(..), StrArg(..), ConArg(..),
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#             ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                  ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                           ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                             ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                    ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                     ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                            ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>        MetaConsNamed(..), MetaConsAnon(..), MetaField(..)
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                           ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                        ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                             ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
>        ) where
#^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#         ^ source.bh meta.declaration.package.bh
#          ^^^^^ source.bh keyword.other.where.bh
>
>infixr  0 $
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  0 :=
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh constant.other.operator.infix.bh
>infixr  2 ||
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  3 &&
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  4 |
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  5 &
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  5 ^
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  5 ~^
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  5 ^~
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   6 ==
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   6 /=
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   6 <=
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   6 >=
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   6 <
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   6 >
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   7 <<
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infix   7 >>
#^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infix.bh
#     ^^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr  8 ++
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^^ source.bh meta.fixity-declaration.bh
#        ^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixl 10 +
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixl.bh
#      ^ source.bh meta.fixity-declaration.bh
#       ^^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixl 10 -
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixl.bh
#      ^ source.bh meta.fixity-declaration.bh
#       ^^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixl 11 *
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixl.bh
#      ^ source.bh meta.fixity-declaration.bh
#       ^^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixl 11 /
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixl.bh
#      ^ source.bh meta.fixity-declaration.bh
#       ^^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixl 11 %
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixl.bh
#      ^ source.bh meta.fixity-declaration.bh
#       ^^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>infixr 13 ∘
#^^^^^^ source.bh meta.fixity-declaration.bh keyword.other.fixity.infixr.bh
#      ^ source.bh meta.fixity-declaration.bh
#       ^^ source.bh meta.fixity-declaration.bh constant.numeric.integral.decimal.bh
#         ^ source.bh meta.fixity-declaration.bh
#          ^ source.bh meta.fixity-declaration.bh keyword.operator.infix.bh
>
>-- ================================================================
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsection{Typeclasses}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{typeclass}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>{-
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>--@ These classes are built into the compiler, and express size relationships.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ \index{Add@\te{Add} (built-in class of size types)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ \index{Mul@\te{Mul} (built-in class of size types)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ \index{Div@\te{Div} (built-in class of size types)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ \index{Log@\te{Log} (built-in class of size types)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ \index{Max@\te{Max} (built-in class of size types)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ \index{Min@\te{Min} (built-in class of size types)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>--@ # 5
#^^^^^^^^ source.bh comment.block.bh
>class (Add :: # -> # -> # -> *) a b c | a b -> c, b c -> a, c a -> b where { }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>class (Mul :: # -> # -> # -> *) a b c | a b -> c, b c -> a, c a -> b where { }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>class (Div :: # -> # -> # -> *) a b c | a b -> c where { }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>class (Log :: # -> # -> *) a b | a -> b where { }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>class (Max :: # -> # -> # -> *) a b c | a b -> c where { }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>class (Min :: # -> # -> # -> *) a b c | a b -> c where { }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>-}
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>
>--@ \index{Monad@\te{Monad} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{bind@\te{bind} (\te{Monad} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{return@\te{return} (\te{Monad} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Monads are an advanced topic and can be ignored on first reading.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Monad #(type m);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function m#(b) bind(m#(a) x1, function m#(b) x2(a x1));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function m#(a) return(a x1);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class Monad m where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#           ^ source.bh meta.declaration.class.bh
#            ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.class.bh
#              ^^^^^ source.bh keyword.other.where.bh
>    bind   :: m a -> (a -> m b) -> m b
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^^^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    return :: a -> m a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>--@ The class of monads that admit recursion (advanced topic; can be ignored on first reading).
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{MonadFix@\te{MonadFix} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{mfix@\te{mfix} (\te{MonadFix} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass MonadFix #(type m)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Monad#(m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function m#(a) mfix(function m#(a) x1(a x1));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class (Monad m) => MonadFix m where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#            ^ source.bh meta.declaration.class.bh
#             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^ source.bh meta.declaration.class.bh
#                ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                  ^ source.bh meta.declaration.class.bh
#                   ^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^^^^^ source.bh keyword.other.where.bh
>    mfix :: (a -> m a) -> m a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>fmap :: (Monad m) => (a -> b) -> (m a -> m b)
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
>fmap f xs = do
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.do.bh
>        {-# hide #-}
#^^^^^^^^ source.bh
#        ^^^ source.bh meta.preprocessor.bh
#           ^^^^^^ source.bh meta.preprocessor.bh
#                 ^^^ source.bh meta.preprocessor.bh
>        _x <- xs
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^ source.bh
>        return (f _x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
>
>--@ The class of types that can be converted to bit vectors and back.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Bits@\te{Bits} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{pack@\te{pack} (\te{Bits} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{unpack@\te{unpack} (\te{Bits} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Bits #(type a, type n)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   dependencies a -> n;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bit#(n) pack(a x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a unpack(Bit#(n) x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class coherent Bits a n | a -> n where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                   ^ source.bh meta.declaration.class.bh
#                    ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.class.bh
#                        ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>    pack   :: a -> Bit n
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^^^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    unpack :: Bit n -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>--@ The class of types on which equality is defined.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Eq@\te{Eq} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{==@{\te{==}} (\te{Eq} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{!=@{\te{!=}} (\te{Eq} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Eq #(type a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bool (==)(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bool (!=)(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class Eq  a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^ source.bh meta.declaration.class.bh storage.type.bh
#        ^^ source.bh meta.declaration.class.bh
#          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#           ^ source.bh meta.declaration.class.bh
#            ^^^^^ source.bh keyword.other.where.bh
>    (==) :: a -> a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    x == y = not (x /= y)
#^^^^^^ source.bh
#      ^^ source.bh keyword.operator.infix.bh
#        ^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
>    (/=) :: a -> a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    x /= y = not (x == y)
#^^^^^^ source.bh
#      ^^ source.bh keyword.operator.infix.bh
#        ^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
>
>--@ The class of types for which integer literals can be used.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Literal@\te{Literal} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{fromInteger@\te{fromInteger} (\te{Literal} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Literal #(type a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a fromInteger(Integer x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- Note that the parameter to Literal is defaulted to Integer or Nat
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- (in that order) when the type variable in the context does not
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- appear in the base type.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>class Literal a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#             ^ source.bh meta.declaration.class.bh
#              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.class.bh
#                ^^^^^ source.bh keyword.other.where.bh
>    fromInteger    :: Integer -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^^^^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    inLiteralRange :: a -> Integer -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>class RealLiteral a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                 ^ source.bh meta.declaration.class.bh
#                  ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.class.bh
#                    ^^^^^ source.bh keyword.other.where.bh
>    fromReal       :: Real -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^^^^^^^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>class SizedLiteral a n | a -> n where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                  ^ source.bh meta.declaration.class.bh
#                   ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.class.bh
#                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.class.bh
#                       ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.class.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>    fromSizedInteger :: Bit n -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- Because SV doesn't have a separate syntax for character literals,
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- we overload string literals
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>class StringLiteral a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                   ^ source.bh meta.declaration.class.bh
#                    ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^^^^ source.bh keyword.other.where.bh
>    fromString :: String -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- Ordering type used as the result of generic comparators
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>data Ordering = LT | EQ | GT deriving (Eq, Bits, Bounded)
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Ordering .bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh
#                     ^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                                       ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                         ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                           ^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                               ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                                        ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
>
>--@ The class of types on which comparison operations are defined.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Ord@\te{Ord} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{<@{\te{<}} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{<=@{\te{<=}} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{>@{\te{>}} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{>=@{\te{>=}} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{compare@\te{compare} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{min@\te{min} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{max@\te{max} (\te{Ord} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Ord #(type a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bool (<)(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bool (<=)(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bool (>)(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bool (>=)(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Ordering compare(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a min(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a max(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Minimal complete definition is either <= or compare.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class Ord a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^ source.bh meta.declaration.class.bh storage.type.bh
#         ^ source.bh meta.declaration.class.bh
#          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#           ^ source.bh meta.declaration.class.bh
#            ^^^^^ source.bh keyword.other.where.bh
>    -- relational operators
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    (<) :: a -> a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    x < y  = (compare x y) == LT
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.infix.bh
#       ^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^^ source.bh constant.other.bh
>    (<=) :: a -> a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    x <= y = (compare x y) /= GT
#^^^^^^ source.bh
#      ^^ source.bh keyword.operator.infix.bh
#        ^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^^ source.bh constant.other.bh
>    (>) :: a -> a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    x > y  = (compare x y) == GT
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.infix.bh
#       ^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^^ source.bh constant.other.bh
>    (>=) :: a -> a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    x >= y = (compare x y) /= LT
#^^^^^^ source.bh
#      ^^ source.bh keyword.operator.infix.bh
#        ^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^^ source.bh constant.other.bh
>    -- generalized comparison
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    compare :: a -> a -> Ordering
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    compare x y = if (x <= y)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^ source.bh keyword.operator.infix.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.paren.bh
>                  then if (y <= x)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^^ source.bh keyword.control.then.bh
#                      ^ source.bh
#                       ^^ source.bh keyword.control.if.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>                       then EQ
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^^ source.bh keyword.control.then.bh
#                           ^ source.bh
#                            ^^ source.bh constant.other.bh
>                       else LT
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^^ source.bh keyword.control.else.bh
#                           ^ source.bh
#                            ^^ source.bh constant.other.bh
>                  else GT
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^^ source.bh keyword.control.else.bh
#                      ^ source.bh
#                       ^^ source.bh constant.other.bh
>    -- min and max selectors
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    min :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    min x y = if x <= y then x else y
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^^^ source.bh
#                   ^^ source.bh keyword.operator.infix.bh
#                     ^^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^ source.bh
#                               ^^^^ source.bh keyword.control.else.bh
#                                   ^^^ source.bh
>    max :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    max x y = if x <= y then y else x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^^^ source.bh
#                   ^^ source.bh keyword.operator.infix.bh
#                     ^^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^ source.bh
#                               ^^^^ source.bh keyword.control.else.bh
#                                   ^^^ source.bh
>
>--@ The class of types with a finite range.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Bounded@\te{Bounded} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{minBound@\te{minBound} (\te{Bounded} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{maxBound@\te{maxBound} (\te{Bounded} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Bounded #(type a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     a minBound;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     a maxBound;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class Bounded a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#             ^ source.bh meta.declaration.class.bh
#              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.class.bh
#                ^^^^^ source.bh keyword.other.where.bh
>    minBound :: a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    maxBound :: a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>--@ The class of types on which bitwise operations are defined.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Bitwise@\te{Bitwise} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{&@{\verb'&'} (\te{Bitwise} class ``and'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{"|@{\verb'"|'} (\te{Bitwise} class ``or'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{^@{\verb'^'} (\te{Bitwise} class ``exclusive or'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{~^@{\verb'~^'} (\te{Bitwise} class ``exclusive nor'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{^~@{\verb'^~'} (\te{Bitwise} class ``exclusive nor'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{invert@\te{invert} (\te{Bitwise} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{<<@\te{<}\te{<}  (\te{Bitwise} class ``left shift'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{>>@\te{>}\te{>}  (\te{Bitwise} class ``right shift'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Bitwise #(type a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (&)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (|)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (^)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (~^)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (^~)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a invert(a x1);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (<<)(a x1, Nat x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bit#(1) msb(a x1);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function Bit#(1) lsb(a x1);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (>>)(a x1, Nat x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class Bitwise a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#             ^ source.bh meta.declaration.class.bh
#              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.class.bh
#                ^^^^^ source.bh keyword.other.where.bh
>    (&)  :: a -> a -> a        -- and
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    (|)  :: a -> a -> a        -- or
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                 ^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    (^)  :: a -> a -> a        -- exclusive or
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                 ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    (~^) :: a -> a -> a        -- exclusive nor
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                 ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    (^~) :: a -> a -> a        -- exclusive nor
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                 ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    invert :: a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    (<<) :: (PrimShiftIndex ix dx) => a -> ix -> a      -- left-shift (shift in zero)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    (>>) :: (PrimShiftIndex ix dx) => a -> ix -> a      -- right-shift (shift in zero)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    msb  :: a -> Bit 1
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>    lsb  :: a -> Bit 1
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>class (BitReduction :: (# -> *) -> # -> *) a n where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                   ^ source.bh meta.declaration.class.bh
#                    ^^ source.bh meta.declaration.class.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.declaration.class.bh
#                       ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#                        ^ source.bh meta.declaration.class.bh keyword.operator.postfix.hash.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh
#                                ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                                    ^ source.bh meta.declaration.class.bh
#                                     ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                                         ^ source.bh meta.declaration.class.bh
#                                          ^ source.bh meta.declaration.class.bh
#                                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.class.bh
#                                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.class.bh
#                                               ^^^^^ source.bh keyword.other.where.bh
>    reduceAnd :: a n -> a 1      -- reduction with &
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                   ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    reduceOr  :: a n -> a 1      -- reduction with |
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                   ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    reduceXor :: a n -> a 1      -- reduction with ^
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                   ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    reduceNand :: a n -> a 1     -- ! reduction with &
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                   ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    reduceNor  :: a n -> a 1     -- ! reduction with |
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                   ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    reduceXnor :: a n -> a 1     -- ! reduction with ^
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                   ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>
>class (BitExtend :: # -> # -> (# -> *) -> *) a b c where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^ source.bh meta.declaration.class.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.declaration.class.bh
#                    ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.postfix.hash.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.declaration.class.bh
#                                    ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh
#                                       ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.declaration.class.bh
#                                          ^ source.bh meta.declaration.class.bh storage.type.operator.infix.bh
#                                           ^ source.bh meta.declaration.class.bh
#                                            ^ source.bh meta.declaration.class.bh
#                                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.class.bh
#                                               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.declaration.class.bh
#                                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.class.bh
#                                                   ^^^^^ source.bh keyword.other.where.bh
>    zeroExtend :: (c a) -> (c b)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
>    signExtend :: (c a) -> (c b)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
>    extend     :: (c a) -> (c b)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
>    truncate   :: (c b) -> (c a)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^^^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
>
>--@ The class of types on which arithmetic ops are defined.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Arith@\te{Arith} (type class)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{+@{\te{+}} (\te{Arith} class ``add'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{-@{\te{-}} (\te{Arith} class ``subtract'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{negate@\te{negate} (\te{Arith} class method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{*@\te{*} (\te{Arith} class ``multiply'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{*@\te{/} (\te{Arith} class ``quotient'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{*@\te{%} (\te{Arith} class ``remainder'' method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass Arith #(type a)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Literal#(a));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (+)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (-)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a negate(a x1);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (*)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (/)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     function a (%)(a x1, a x2);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endtypeclass
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class (Literal a) => Arith a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^ source.bh meta.declaration.class.bh
#                  ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                    ^ source.bh meta.declaration.class.bh
#                     ^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>    (+) :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    (-) :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    negate :: a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    (*) :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    (/) :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    (%) :: a -> a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#      ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>     -- absolute value
#^^^^^ source.bh meta.function.type-declaration.bh punctuation.whitespace.comment.leading.bh
#     ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#       ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    abs :: a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    abs x = let t = quote (printType (typeOf x))
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^^ source.bh keyword.other.let.bh
#               ^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh punctuation.paren.bh
>            in  error ("The function `abs' is not defined for " +++ t)
#^^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.other.in.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                               ^ source.bh
#                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                   ^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
>    -- a unit value with the same sign, s.t. abs(x)*signum(x) = x
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    signum :: a -> a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    signum x =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The function `signum' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                              ^ source.bh
#                                                               ^^^ source.bh keyword.operator.infix.bh
#                                                                  ^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>    -- logarithm and exponentiation
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    (**)  :: a -> a -> a  -- b to the x
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                            ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    (**) b x =
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The operator `**' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                          ^ source.bh
#                                                           ^^^ source.bh keyword.operator.infix.bh
#                                                              ^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
>    exp_e :: a -> a       -- e to the x  ("expe"?)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    exp_e x =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The function `exp_e' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                             ^ source.bh
#                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                 ^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>    log   :: a -> a       -- log base e
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^^^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                            ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    log x =
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The function `log' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                               ^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>    logb  :: a -> a -> a  -- log base b
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                            ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    logb b x = --(log x) / (log b)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                 ^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The function `logb' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                            ^ source.bh
#                                                             ^^^ source.bh keyword.operator.infix.bh
#                                                                ^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
>    log2  :: a -> a       -- log base 2
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                            ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    log2 x = --logb 2 x
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#               ^^^^^^^^ source.bh comment.line.double-dash.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The function `log2' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                            ^ source.bh
#                                                             ^^^ source.bh keyword.operator.infix.bh
#                                                                ^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
>    log10 :: a -> a       -- log base 10
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                            ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>    log10 x = --logb 10 x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                ^^^^^^^^^ source.bh comment.line.double-dash.bh
>        let t = quote (printType (typeOf x))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>        in  error ("The function `log10' is not defined for " +++ t)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                             ^ source.bh
#                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                 ^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>
>add :: (Arith a) => a -> a -> a
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>add x y = x + y
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^^^ source.bh
>
>-- The class of types that may be used as index values
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- Note that the index parameter (the second parameter) to
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- PrimSelectable is defaulted to Integer or Nat (in that order) when
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- the type variable in the context does not appear in the base type.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- Note that we require Literal for the index.  This prevents
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- spurious errors about Literal context missing when the user
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- writes "xs[1]" and the PrimSelectable context can't be satisfied.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>
>class (Literal a, Eq a) => PrimIndex a b | a -> b where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.class.bh punctuation.separator.comma.bh
#                 ^ source.bh meta.declaration.class.bh
#                  ^^ source.bh meta.declaration.class.bh storage.type.bh
#                    ^ source.bh meta.declaration.class.bh
#                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.class.bh
#                       ^ source.bh meta.declaration.class.bh
#                        ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                                    ^ source.bh meta.declaration.class.bh
#                                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.class.bh
#                                       ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.class.bh
#                                         ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                          ^ source.bh meta.declaration.class.bh
#                                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.class.bh
#                                             ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.declaration.class.bh
#                                                ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.class.bh
#                                                  ^^^^^ source.bh keyword.other.where.bh
>  isStaticIndex :: a -> Bool
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>  -- argument should be a elaboration-time constant
#^^ source.bh meta.function.type-declaration.bh punctuation.whitespace.comment.leading.bh
#  ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>  toStaticIndex  :: a -> Integer
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>  -- argument should be a runtime value
#^^ source.bh meta.function.type-declaration.bh punctuation.whitespace.comment.leading.bh
#  ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>  -- (or poor elaboration performance should be expected)
#^^ source.bh meta.function.type-declaration.bh punctuation.whitespace.comment.leading.bh
#  ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>  toDynamicIndex :: a -> Bit b
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>class (PrimIndex a b, Ord a) => PrimShiftIndex a b | a -> b where {}
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.class.bh
#                   ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.class.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^^ source.bh meta.declaration.class.bh storage.type.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                               ^ source.bh meta.declaration.class.bh
#                                ^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                                              ^ source.bh meta.declaration.class.bh
#                                               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.declaration.class.bh
#                                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.class.bh
#                                                   ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                                    ^ source.bh meta.declaration.class.bh
#                                                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.declaration.class.bh
#                                                       ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                                         ^ source.bh meta.declaration.class.bh
#                                                          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.class.bh
#                                                            ^^^^^ source.bh keyword.other.where.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh punctuation.brace.bh
#                                                                   ^ source.bh punctuation.brace.bh
>
>-- converts to Bit n statically if possible, or dynamically if not
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- also performs a check that the value is nonnegative
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>indexableToBits :: (PrimShiftIndex a n) => a -> Bit n
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>indexableToBits x =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
>        if (isStaticIndex x) then
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.if.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^^^ source.bh keyword.control.then.bh
>-- primIntegerToUIntBits will complain if negative
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        primIntegerToUIntBits (toStaticIndex x)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>        else
#^^^^^^^^ source.bh
#        ^^^^ source.bh keyword.control.else.bh
>        if (x >= 0) then toDynamicIndex x
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.if.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^ source.bh
#              ^^ source.bh keyword.operator.infix.bh
#                ^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^^^^^^^^^^^^^^ source.bh
>{-
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>
>(00:49:23) Ktakusa3: So we discussed on Wed, that we are not
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>completely doing "The Bluespec Way" of strong types for this negative
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>shift thing (prohibiting signed types from being on the RHS of a shift
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>operator) because our customers would kill us if we did.  Fair
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>enough... So we are doing the compromise that there is a bounds check.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>
>(00:50:30) Ktakusa3: However, if I understand correctly, because of
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>the "optimzed away" behavior of the bounds check, we are only doing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>the bounds check if it can be detected by the evaluator, and not by
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>Bluesim or a verilog simulator.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>
>(00:50:51) nanavatiravi: for the moment
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>
>(00:51:03) nanavatiravi: I have designs on adding runtime error
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>infrastructure to bsc
#^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>
>(00:51:18) nanavatiravi: which will detect the problem in simulation,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>without compromising the generated hardware
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>
>-}
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>        else _  -- This undefined will get optimized away at runtime.
#^^^^^^^^ source.bh
#        ^^^^ source.bh keyword.control.else.bh
#            ^^^^ source.bh
#                ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                -- For testing, substitute 0 for _
#^^^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#                ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance PrimIndex (Bit n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>  isStaticIndex  = areStaticBits
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^ source.bh
>  toStaticIndex  = primUIntBitsToInteger
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  toDynamicIndex = id
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^ source.bh
>
>instance PrimShiftIndex (Bit n) n where {}
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.brace.bh
#                                         ^ source.bh punctuation.brace.bh
>
>instance PrimIndex Integer 32 where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^^^^ source.bh keyword.other.where.bh
>  isStaticIndex  = isStaticInteger
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^ source.bh
>-- if you need to check for negativeness for the following two functions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- you may wish to use indexableToBits
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>  toStaticIndex  = id
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^ source.bh
>  toDynamicIndex = fromInteger
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^ source.bh
>
>instance PrimShiftIndex Integer 32 where {}
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^^^^^ source.bh keyword.other.where.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.brace.bh
#                                          ^ source.bh punctuation.brace.bh
>
>--@ The class of types on which selection of elements may be done
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ using square-bracket notation (in BSV).
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typeclass PrimSelectable #(type vector_t, type element_t);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- The typeclass parameters are as follows:
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   vector_t is the type of vector being selected from
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   element_t is the type of the value extracted from the vector_t (vec[idx])
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>class PrimSelectable vector_t element_t |
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                    ^ source.bh meta.declaration.class.bh
#                     ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
>                     vector_t -> element_t where
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh
#                     ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.class.bh
#                                           ^^^^^ source.bh keyword.other.where.bh
>    primSelectFn :: (PrimIndex index_t dynamic_t) =>
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
>                    Position__ -> vector_t -> index_t -> element_t
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>instance (PrimSelectable a b) => PrimSelectable (Reg a) b
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                 ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                    ^ source.bh meta.declaration.instance.bh
#                                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh
#                                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    primSelectFn pos r i = primSelectFn pos r._read i
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^^^^^^^^ source.bh
>
>--@ The class of types on which compile-time update of elements may be done
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ using square-bracket notation with an = assignment (in BSV)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class (PrimSelectable vector_t element_t) => PrimUpdateable vector_t element_t |
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.class.bh
#                                         ^ source.bh meta.declaration.class.bh
#                                          ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                                            ^ source.bh meta.declaration.class.bh
#                                             ^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                                                           ^ source.bh meta.declaration.class.bh
#                                                            ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.declaration.class.bh
#                                                                     ^^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                                              ^ source.bh meta.declaration.class.bh
#                                                                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
>                     vector_t -> element_t where
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh
#                     ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.class.bh
#                                           ^^^^^ source.bh keyword.other.where.bh
>    primUpdateFn :: (PrimIndex index_t dynamic_t) =>
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
>                    Position__ -> vector_t -> index_t -> element_t -> vector_t
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>--@ The class of types on which indexed run-time writes of elements may be done
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ using square-bracket notation with an <= assignment (in BSV)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Note that the [] syntax requires that the PrimWriteable type be an interface
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>class (PrimSelectable ifc_t value_t) => PrimWriteable ifc_t value_t |
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.class.bh
#                                    ^ source.bh meta.declaration.class.bh
#                                     ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.class.bh
#                                                      ^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.class.bh
#                                                            ^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                                                   ^ source.bh meta.declaration.class.bh
#                                                                    ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
>                    ifc_t -> value_t where
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh
#                    ^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.class.bh
#                                     ^^^^^ source.bh keyword.other.where.bh
>   primWriteFn :: (PrimIndex index_t dynamic_t) =>
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
>                  Position__ -> ifc_t -> index_t -> value_t -> Action
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>instance (PrimUpdateable a b) => PrimWriteable (Reg a) b
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                              ^ source.bh meta.declaration.instance.bh
#                                               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    primWriteFn pos r i n =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>      action
#^^^^^^ source.bh
#      ^^^^^^ source.bh keyword.control.action.bh
>        r := primUpdateFn pos (r._read) i n
#^^^^^^^^^^ source.bh
#          ^^ source.bh constant.other.operator.infix.bh
#            ^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.infix.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^ source.bh
>
>-- XXX only works with static indices
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- primUpdateRangeFn: original_bits[high:low] = spliced_bits[high-low:0]
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- this isn't the most efficient implementation, but it's simple,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and has the benefit of splice_size_t being unconstrained
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primUpdateRangeFn :: (BitExtend splice_size_t vec_size_t Bit,
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
>                     PrimIndex ix dx) =>
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
>                     Position__ ->
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
>                     Bit vec_size_t -> ix -> ix -> Bit splice_size_t
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>                     -> Bit vec_size_t
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primUpdateRangeFn pos original_bits high low spliced_bits =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                          ^ source.bh keyword.operator.eq.bh
>    let high' = toStaticIndex high
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^^ source.bh
>        low'  = toStaticIndex low
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^ source.bh
>        max_index = valueOf vec_size_t
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^ source.bh
>        mask_base :: Bit splice_size_t
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>        mask_base = constantWithAllBitsSet
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        mask :: Bit vec_size_t
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>        mask = invert (zeroExtend mask_base << low')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^^ source.bh keyword.operator.infix.bh
#                                              ^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>        new_bits = (zeroExtend spliced_bits) << low'
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^ source.bh
>        result = (original_bits & mask) | new_bits
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.infix.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.pipe.bh
#                                         ^^^^^^^^^^ source.bh
>        zero_msg = "Assignment has no effect because bit range [" +++
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh
#                                                                  ^^^ source.bh keyword.operator.infix.bh
>                   integerToString high' +++ ":" +++
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                              ^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh keyword.operator.infix.bh
>                   integerToString low' +++ "] selects " +++
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                        ^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
>                   "no bits"
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>        negative_msg = "Bit range [" +++
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                        ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                    ^ source.bh
#                                     ^^^ source.bh keyword.operator.infix.bh
>               integerToString high' +++ ":" +++
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^ source.bh string.quoted.double.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                            ^ source.bh
#                                             ^^^ source.bh keyword.operator.infix.bh
>               integerToString low' +++ "] selects " +++
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^^^ source.bh keyword.operator.infix.bh
#                                       ^ source.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                         ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                    ^ source.bh
#                                                     ^^^ source.bh keyword.operator.infix.bh
>               "a negative number of bits at"
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>        static_msg str = "The indexes of a range update must be compile-time values.\n" +++
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                    ^^ source.bh string.quoted.double.bh constant.character.escape.bh
#                                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                       ^ source.bh
#                                                                                        ^^^ source.bh keyword.operator.infix.bh
>                         "The " +++ str +++ " index of this range update is not."
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                          ^^^^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^^^ source.bh keyword.operator.infix.bh
#                                   ^^^^^ source.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>        size_msg = "Bit range [" +++
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^ source.bh
#                                 ^^^ source.bh keyword.operator.infix.bh
>                   integerToString high' +++ ":" +++
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                              ^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh keyword.operator.infix.bh
>                   integerToString low'  +++ "]" +++
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                              ^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh keyword.operator.infix.bh
>                   " is not " +++ integerToString (valueOf splice_size_t) +++
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                             ^ source.bh
#                              ^^^ source.bh keyword.operator.infix.bh
#                                 ^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^ source.bh
#                                                                          ^^^ source.bh keyword.operator.infix.bh
>                   " bits, the size of the range-update argument."
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    in -- guard the failed-to-evaluate error on the indices
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^ source.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       if (not (isStaticIndex high)) then
#^^^^^^^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh keyword.control.then.bh
>           primError pos (static_msg "high")
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh punctuation.paren.bh
>       else if (not (isStaticIndex low)) then
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^^^^ source.bh keyword.control.then.bh
>           primError pos (static_msg "low")
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^ source.bh string.quoted.double.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                          ^ source.bh punctuation.paren.bh
>       else if (high' >= max_index ||
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^^ source.bh keyword.operator.infix.bh
>                high' < 0) then
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^ source.bh
#                        ^ source.bh constant.numeric.integral.decimal.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^^^ source.bh keyword.control.then.bh
>          primError pos (listMessage high' "bit range update - high index")
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                          ^ source.bh punctuation.paren.bh
>       else if (low' >= max_index ||
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh
#                     ^^ source.bh keyword.operator.infix.bh
#                       ^^^^^^^^^^^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
>                low' < 0) then
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.infix.bh
#                      ^ source.bh
#                       ^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^^^ source.bh keyword.control.then.bh
>          primError pos (listMessage low'  "bit range update - low index")
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh punctuation.paren.bh
>       else if (high' >= low') then
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^^^^ source.bh keyword.control.then.bh
>                   if (high' - low' + 1 == valueOf splice_size_t) then result
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^ source.bh
#                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                       ^ source.bh
#                                        ^^ source.bh keyword.operator.infix.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh
#                                                                  ^^^^ source.bh keyword.control.then.bh
#                                                                      ^^^^^^^^ source.bh
>            else primError pos size_msg
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       else if (high' == low' - 1) then primError pos zero_msg
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh keyword.operator.infix.bh
#                               ^ source.bh
#                                ^ source.bh constant.numeric.integral.decimal.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.then.bh
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       else primError pos negative_msg
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>class (MonadFix m) => IsModule m c | m -> c where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^ source.bh meta.declaration.class.bh punctuation.paren.bh
#       ^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#               ^ source.bh meta.declaration.class.bh
#                ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.class.bh
#                  ^ source.bh meta.declaration.class.bh
#                   ^^ source.bh meta.declaration.class.bh keyword.operator.big-arrow.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                    ^ source.bh meta.declaration.class.bh
#                                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.class.bh
#                                       ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.declaration.class.bh
#                                          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.class.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
>    liftModule     :: Module a -> m a
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^^^^^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>    liftModuleOp   :: (Module (c a) -> Module (c b)) -> m a -> m b
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^^^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive type Id__ :: * -> *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>instance IsModule Module Id__ where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^^^^ source.bh keyword.other.where.bh
>    liftModule  _m  = _m
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^ source.bh
>    liftModuleOp _f = _f
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^ source.bh
>
>addModuleRules :: (IsModule m c) => Rules -> a -> m a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>addModuleRules rs f = liftModule $ do primAddRules rs
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^^ source.bh keyword.control.do.bh
#                                     ^^^^^^^^^^^^^^^^^ source.bh
>                                      return f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>addRules :: (IsModule m c) => Rules -> m Empty
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addRules rs = liftModule $ do primAddRules rs
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.control.do.bh
#                             ^^^^^^^^^^^^^^^^^ source.bh
>                              return (interface Empty { })
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^ source.bh
#                                                ^^^^^ source.bh constant.other.bh
#                                                     ^ source.bh
#                                                      ^ source.bh meta.record.bh punctuation.brace.bh
#                                                       ^ source.bh meta.record.bh
#                                                        ^ source.bh meta.record.bh punctuation.brace.bh
#                                                         ^ source.bh punctuation.paren.bh
>
>primitive primAddRules :: Rules -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                           ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>
>primitive type SchedPragma :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>-- ================================================================
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>--@ \subsection{Data Types}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Action}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ The type for actions on the lowest level.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{PrimAction@\te{PrimAction} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>primitive type PrimAction :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>data ActionWorld = ActionWorld
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.ActionWorld .bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh
#                   ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ struct ActionValue #(type a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>struct AVStruct a
#^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.struct.bh
#      ^ source.bh meta.declaration.struct.algebraic.bh
#       ^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.AVStruct a.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
>  =
#^^ source.bh meta.declaration.struct.algebraic.bh
#  ^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.eq.bh
>    avValue  :: a
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#           ^^ source.bh meta.declaration.struct.algebraic.bh
#             ^^ source.bh meta.declaration.struct.algebraic.bh constant.other.operator.infix.bh
#               ^ source.bh meta.declaration.struct.algebraic.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
>    avAction :: PrimAction
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.struct.algebraic.bh
#             ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.declaration.struct.algebraic.bh
#                ^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>    avWorld  :: ActionWorld
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#           ^^ source.bh meta.declaration.struct.algebraic.bh
#             ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.declaration.struct.algebraic.bh
#                ^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>
>data ActionValue a = ActionValue (ActionWorld -> AVStruct a)
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.ActionValue a .bh
#                  ^ source.bh meta.declaration.data.algebraic.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh
#                     ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                             ^ source.bh meta.declaration.data.algebraic.bh
#                                              ^^ source.bh meta.declaration.data.algebraic.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh
#                                                 ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                         ^ source.bh meta.declaration.data.algebraic.bh
#                                                          ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.data.algebraic.bh
>
>instance (PrimDeepSeqCond a) => PrimDeepSeqCond (ActionValue a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.instance.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond (ActionValue av) b =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^ source.bh constant.other.bh
#                              ^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
>    let f = av ActionWorld
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^ source.bh
#               ^^^^^^^^^^^ source.bh constant.other.bh
>    in primDeepSeqCond f b
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>__avFunc :: ActionValue a -> ActionWorld -> AVStruct a
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>__avFunc (ActionValue f) = f
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^ source.bh
>
>__value :: ActionValue a -> a
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>__value (ActionValue av) = (av ActionWorld).avValue
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh
#                               ^^^^^^^^^^^ source.bh constant.other.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh keyword.operator.infix.bh
#                                            ^^^^^^^^ source.bh
>
>primitive primNoActions :: PrimAction
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primJoinActions :: PrimAction -> PrimAction -> PrimAction
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primSeq :: a -> b -> b
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- implicit-condition strictness
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primSeqCond :: a -> b -> b
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>class coherent PrimDeepSeqCond a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond :: a -> b -> b
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>instance PrimDeepSeqCond (a -> b) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^ source.bh meta.declaration.instance.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond f b = primSeqCond f b
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^^^^^^^^ source.bh
>
>-- Generic implementation of the PrimDeepSeqCond typeclass.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- For each constructor, fully evaluate the data structure. Do this by,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- for each constructor arg, calling primDeepSeqCond (if the type arguments
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- are known), or primSeqCond (if they are not known) in which case the
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- correct function is called at elaboation time.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance (Generic a r, PrimDeepSeqCond' r) => PrimDeepSeqCond a where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                             ^ source.bh meta.declaration.instance.bh
#                                                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond x = primDeepSeqCond' (from x)
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>
>class PrimDeepSeqCond' r where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                      ^ source.bh meta.declaration.class.bh
#                       ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' :: r -> b -> b
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>instance (PrimDeepSeqCond' r) => PrimDeepSeqCond' (Meta m r) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                   ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                       ^ source.bh meta.declaration.instance.bh
#                                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.declaration.instance.bh
#                                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.instance.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' (Meta x) = primDeepSeqCond' x
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimDeepSeqCond' r1, PrimDeepSeqCond' r2) => PrimDeepSeqCond' (Either r1 r2) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.instance.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                         ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                               ^ source.bh meta.declaration.instance.bh
#                                                                                ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                  ^ source.bh meta.declaration.instance.bh
#                                                                                   ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                                      ^ source.bh meta.declaration.instance.bh
#                                                                                       ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' (Left x) = primDeepSeqCond' x
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^^^^^^^^^^^^^ source.bh
>  primDeepSeqCond' (Right x) = primDeepSeqCond' x
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^ source.bh constant.other.bh
#                         ^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimDeepSeqCond' r1, PrimDeepSeqCond' r2) => PrimDeepSeqCond' (r1, r2) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.instance.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                         ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                           ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                                                            ^ source.bh meta.declaration.instance.bh
#                                                                             ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                               ^ source.bh meta.declaration.instance.bh
#                                                                                ^ source.bh meta.declaration.instance.bh
#                                                                                 ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' (x, y) z = primDeepSeqCond' x $ primDeepSeqCond' y z
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh keyword.operator.infix.bh
#                                                  ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimDeepSeqCond' () where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh support.constant.unit.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.instance.bh support.constant.unit.bh punctuation.paren.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' () = id
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                    ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^ source.bh
>
>instance (PrimDeepSeqCond a) => PrimDeepSeqCond' (Conc a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                ^ source.bh meta.declaration.instance.bh
#                                                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                  ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.declaration.instance.bh
#                                                         ^ source.bh meta.declaration.instance.bh
#                                                          ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' (Conc x) = primDeepSeqCond x
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimDeepSeqCond' (ConcPrim a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                           ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' (ConcPrim x) = primSeqCond x
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh constant.other.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^^^^^^^^^^^ source.bh
>
>-- We have choosen (for now) to not lift any conditions from higher-rank fields.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- Note that some further lifting may be possible by calling primSeqCond
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- (instead of id) and adjusting the primitive's implementation in IExpand
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- to recognize when called on a SPolyWrap type and to recurse into the field's
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- value in that case; but that this doesn't seem useful -- the expression will
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- contain a lambda, and whether some conditions can be lifted depends on whether
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- some parts of the expression occur outside of the lambda (which is up to the
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- vagaries of the compiler) and on whether some type lambdas can be discharged
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- by defaulting (to Integer or PrimUnit, for example).
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance PrimDeepSeqCond' (ConcPoly a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                           ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^^^^^ source.bh keyword.other.where.bh
>  primDeepSeqCond' _ = id
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^ source.bh
>
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Monad #(ActionValue);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>-- Sequencing and forcing re-evaluation with ActionWorld works because
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- we don't float expressions past lambda-bindings they don't depend on
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- if that changes, this would have to be revisited
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- (possibly making ActionWorld an argument of foreign-function calls)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance Monad ActionValue
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    return x = ActionValue
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^^^^^^^^ source.bh constant.other.bh
>                 (\aw -> AVStruct { avValue = x;
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh keyword.operator.lambda.bh
#                   ^^^ source.bh
#                      ^^ source.bh keyword.operator.arrow.bh
#                        ^ source.bh
#                         ^^^^^^^^ source.bh constant.other.bh
#                                 ^ source.bh
#                                  ^ source.bh meta.record.bh punctuation.brace.bh
#                                   ^ source.bh meta.record.bh
#                                    ^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                           ^ source.bh meta.record.bh
#                                            ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                             ^^^^ source.bh meta.record.bh
>                                    avAction = primNoActions;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                             ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                              ^^^^^^^^^^^^^^^^ source.bh meta.record.bh
>                                    avWorld = aw })
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                            ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                             ^^^^ source.bh meta.record.bh
#                                                 ^ source.bh meta.record.bh punctuation.brace.bh
#                                                  ^ source.bh punctuation.paren.bh
>    bind (ActionValue x) f = ActionValue (\aw ->
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^^^^^^^^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh keyword.operator.lambda.bh
#                                           ^^^ source.bh
#                                              ^^ source.bh keyword.operator.arrow.bh
>        letseq x1 = x aw
#^^^^^^^^ source.bh
#        ^^^^^^ source.bh keyword.other.letseq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^ source.bh
>               a   = x1.avAction
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^ source.bh
#                       ^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^ source.bh
>               v   = x1.avValue
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^ source.bh
#                       ^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^ source.bh
>               aw1 = x1.avWorld
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^ source.bh
#                       ^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^ source.bh
>               y   = __avFunc (f v) $ aw1
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^^^^ source.bh
>        in  primSeq v $ primSeq a $ primSeq aw1 $
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.infix.bh
#                                   ^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh keyword.operator.infix.bh
>            AVStruct {
#^^^^^^^^^^^^ source.bh
#            ^^^^^^^^ source.bh constant.other.bh
#                    ^ source.bh
#                     ^ source.bh meta.record.bh punctuation.brace.bh
>                avValue = y.avValue;
#^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                ^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                       ^ source.bh meta.record.bh
#                        ^ source.bh meta.record.bh keyword.operator.eq.bh
#                         ^^ source.bh meta.record.bh
#                           ^ source.bh meta.record.bh keyword.operator.infix.bh
#                            ^^^^^^^^^ source.bh meta.record.bh
>                avAction = primJoinActions a y.avAction;
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                         ^ source.bh meta.record.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                              ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                               ^^^^^^^^^^ source.bh meta.record.bh
>                avWorld  = y.avWorld
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                         ^ source.bh meta.record.bh keyword.operator.eq.bh
#                          ^^ source.bh meta.record.bh
#                            ^ source.bh meta.record.bh keyword.operator.infix.bh
#                             ^^^^^^^^ source.bh meta.record.bh
>            })
#^^^^^^^^^^^^ source.bh meta.record.bh
#            ^ source.bh meta.record.bh punctuation.brace.bh
#             ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance MonadFix #(ActionValue);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance MonadFix ActionValue
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    mfix m = primFix (\ av -> m (__value av))
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh keyword.operator.lambda.bh
#                       ^^^^ source.bh
#                           ^^ source.bh keyword.operator.arrow.bh
#                             ^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.paren.bh
>--    mfix :: (a -> ActionValue a) -> ActionValue a
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--    mfix m =
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        let av :: ActionValue a
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--            av = m av.avValue
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        in  av
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ Extract the \te{PrimAction} part of an \te{ActionValue}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function PrimAction toPrimAction(ActionValue#(a) a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>toPrimAction :: ActionValue a -> PrimAction
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>toPrimAction (ActionValue a) = (a ActionWorld).avAction
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^ source.bh constant.other.bh
#                         ^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^ source.bh
#                                  ^^^^^^^^^^^ source.bh constant.other.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^^^^ source.bh
>
>--@ Construct an \te{ActionValue} (with a ``don't care'' value)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ from a \te{PrimAction}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function ActionValue#(a) fromPrimAction(PrimAction a);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>fromPrimAction :: PrimAction -> ActionValue a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>fromPrimAction a = ActionValue (\aw -> AVStruct { avValue = _; avAction = a; avWorld = aw })
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^^^^^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh keyword.operator.lambda.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.arrow.bh
#                                      ^ source.bh
#                                       ^^^^^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^ source.bh meta.record.bh punctuation.brace.bh
#                                                 ^ source.bh meta.record.bh
#                                                  ^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                                         ^ source.bh meta.record.bh
#                                                          ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                           ^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                        ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                         ^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                                     ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                                      ^^^^ source.bh meta.record.bh
#                                                                                          ^ source.bh meta.record.bh punctuation.brace.bh
#                                                                                           ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typedef ActionValue#(void) Action;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>type Action = ActionValue ()
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.type.bh
#              ^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                         ^ source.bh meta.declaration.type.bh
#                          ^ source.bh meta.declaration.type.bh support.constant.unit.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.type.bh support.constant.unit.bh punctuation.paren.bh
>
>--X@ \begin{verbatim}
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>--X@ typedef ActionValue_#(0) Action_;
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>--X@ \end{verbatim}
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>type Action_ = ActionValue_ 0
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#            ^ source.bh meta.declaration.type.bh
#             ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.type.bh
#               ^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                           ^ source.bh meta.declaration.type.bh
#                            ^ source.bh meta.declaration.type.bh constant.numeric.integral.decimal.bh
>
>--@ An empty \te{Action}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{noAction@\te{noAction} (empty action)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Action noAction;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>noAction :: Action
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>noAction = fromPrimAction primNoActions
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--X@ Assign an \te{ActionValue} to a register.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \begin{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ function Action (:<-)(Reg#(a) r, ActionValue#(a) av);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \end{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>(:<-) :: Reg a -> ActionValue a -> Action
#^^^^^ source.bh constant.other.operator.bh
#     ^ source.bh
#      ^^ source.bh keyword.operator.double-colon.bh
#        ^ source.bh
#         ^^^ source.bh storage.type.bh
#            ^ source.bh
#             ^ source.bh variable.other.generic-type.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.bh
#                 ^ source.bh
#                  ^^^^^^^^^^^ source.bh storage.type.bh
#                             ^ source.bh
#                              ^ source.bh variable.other.generic-type.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.arrow.bh
#                                  ^ source.bh
#                                   ^^^^^^ source.bh storage.type.bh
>(:<-) r av = av `bind` r._write
#^^^^^ source.bh constant.other.operator.bh
#     ^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^ source.bh
#                ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#                 ^^^^ source.bh keyword.operator.function.infix.bh
#                     ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#                      ^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^ source.bh
>
>--X@ A primitive \te{ActionValue} of bits
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \begin{verbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ struct ActionValue_ #(type n);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \end{verbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>struct ActionValue_ n
#^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.struct.bh
#      ^ source.bh meta.declaration.struct.algebraic.bh
#       ^^^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.ActionValue_ n.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
>  =
#^^ source.bh meta.declaration.struct.algebraic.bh
#  ^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.eq.bh
>    avValue_  :: Bit n
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#            ^^ source.bh meta.declaration.struct.algebraic.bh
#              ^^ source.bh meta.declaration.struct.algebraic.bh constant.other.operator.infix.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh
#                     ^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
>    avAction_ :: PrimAction
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.struct.algebraic.bh
#              ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>
>toActionValue_ :: (Bits a n) => ActionValue a -> ActionValue_ n
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>toActionValue_  (ActionValue av) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^ source.bh constant.other.bh
#                            ^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    letseq av' = av ActionWorld
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.other.letseq.bh
#          ^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^ source.bh
#                    ^^^^^^^^^^^ source.bh constant.other.bh
>    in ActionValue_ { avValue_ = pack av'.avValue; avAction_ = av'.avAction}
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^ source.bh
#       ^^^^^^^^^^^^ source.bh constant.other.bh
#                   ^ source.bh
#                    ^ source.bh meta.record.bh punctuation.brace.bh
#                     ^ source.bh meta.record.bh
#                      ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                              ^ source.bh meta.record.bh
#                               ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                ^^^^^^^^^ source.bh meta.record.bh
#                                         ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                          ^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                             ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                              ^^^^ source.bh meta.record.bh
#                                                                  ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                                   ^^^^^^^^ source.bh meta.record.bh
#                                                                           ^ source.bh meta.record.bh punctuation.brace.bh
>
>fromActionValue_ :: (Bits a n) => ActionValue_ n -> ActionValue a
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>fromActionValue_  av_ = ActionValue (\aw ->
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^^^^^^^^^^^ source.bh constant.other.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh keyword.operator.lambda.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.arrow.bh
>    AVStruct { avValue = unpack av_.avValue_; avAction = av_.avAction_; avWorld = aw})
#^^^^ source.bh
#    ^^^^^^^^ source.bh constant.other.bh
#            ^ source.bh
#             ^ source.bh meta.record.bh punctuation.brace.bh
#              ^ source.bh meta.record.bh
#               ^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                      ^ source.bh meta.record.bh
#                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^ source.bh meta.record.bh
#                                   ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                    ^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                        ^^^^ source.bh meta.record.bh
#                                                            ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                             ^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                                ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                                 ^^^ source.bh meta.record.bh
#                                                                                    ^ source.bh meta.record.bh punctuation.brace.bh
#                                                                                     ^ source.bh punctuation.paren.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Bit}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Bit@\te{Bit} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>primitive type Bit :: # -> *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primitive primUninitBitArray :: Position__ -> String -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>-- This is actually the primMarkArrayInitialized primitive, but with diff type
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primMarkBitArrayInitialized :: Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primIsBitArray :: Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>isBitArray :: Bit n -> Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isBitArray = compose primChr primIsBitArray
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primUpdateBitArray :: Bit n -> Integer -> Bit 1 -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>instance PrimMakeUninitialized (Bit n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized pos name =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    let n = valueOf n
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^ source.bh
>    in if (n == 0) then 0
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^ source.bh
#             ^^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^ source.bh constant.numeric.integral.decimal.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^^^ source.bh keyword.control.then.bh
#                       ^ source.bh
#                        ^ source.bh constant.numeric.integral.decimal.bh
>       else if (n == 1) then primMakeRawUninitialized pos name
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^ source.bh
#                     ^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       else primUninitBitArray pos name
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Bits #(Bit#(k), k);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Bits (Bit k) k
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#               ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    pack x = x
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^ source.bh
>    unpack x = x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Eq #(Bit#(n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Eq (Bit n)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#             ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (==) x y = primChr (primEQ x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
>    (/=) x y = primChr (primBNot (primEQ x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
>
>--@ Bit-level Verilog case equality.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Undefined bits are strictly not equal to defined ones.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{===@\te{===} (case equality operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool (==)(a x, a y)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Bits#(a, sa));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(===) :: Bit n -> Bit n -> Bool
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(===) x y = primChr $ primEQ3 x y
#^ source.bh punctuation.paren.bh
# ^^^ source.bh entity.name.function.infix.bh
#    ^ source.bh punctuation.paren.bh
#     ^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.infix.bh
#                     ^^^^^^^^^^^^^ source.bh
>
>--@ Bit-level Verilog case inequality.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Undefined bits are strictly not equal to defined ones.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{!==@\te{!==} (case inequality operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool (!==)(a x, a y)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Bits#(a, sa));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(!==) :: Bit n -> Bit n -> Bool
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(!==) x y = primChr $ primBNot $ primEQ3 x y
#^ source.bh punctuation.paren.bh
# ^^^ source.bh entity.name.function.infix.bh
#    ^ source.bh punctuation.paren.bh
#     ^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.infix.bh
#                     ^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^^^^^^^^^^^^^ source.bh
>
>-- \begin{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- instance PrimSelectable #(Bit#(n), Nat, Bit#(1))
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   provisos (Add#(m, 1, n));
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- \end{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance PrimSelectable (Bit n) (Bit 1)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                 ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                                      ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    primSelectFn pos bs i = primExtract pos bs i i
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimUpdateable (Bit n) (Bit 1)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                 ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                                      ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    primUpdateFn = replaceBit
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Literal #(Bit#(n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Literal (Bit n)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromInteger i = primIntegerToBit i
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^ source.bh
>    inLiteralRange _ i = let n = valueOf n
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.other.let.bh
#                            ^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^ source.bh
>                             max = 2 ** n
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.infix.bh
#                                       ^^^ source.bh
>                             min = negate (2 ** (n - 1))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                            ^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^ source.bh
#                                                   ^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
>                         in  if (n == 0) then i == 0
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh keyword.other.in.bh
#                           ^^ source.bh
#                             ^^ source.bh keyword.control.if.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^ source.bh
#                                   ^^ source.bh keyword.operator.infix.bh
#                                     ^ source.bh
#                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^^^^ source.bh keyword.control.then.bh
#                                             ^^^ source.bh
#                                                ^^ source.bh keyword.operator.infix.bh
#                                                  ^ source.bh
#                                                   ^ source.bh constant.numeric.integral.decimal.bh
>                             else i < max && i >= min
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^^^^ source.bh keyword.control.else.bh
#                                 ^^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^^^^ source.bh
#                                          ^^ source.bh keyword.operator.infix.bh
#                                            ^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^^^^^ source.bh
>
>instance SizedLiteral (Bit n) n
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                       ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromSizedInteger i = i
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Ord #(Bit#(n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Ord (Bit n)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#              ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (<)  x y = primChr (primULT x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>    (<=) x y = primChr (primULE x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>    (>)  x y = primChr (primBNot (primULE x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
>    (>=) x y = primChr (primBNot (primULT x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Bounded #(Bit#(n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Bounded (Bit n)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    minBound = 0x0
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^ source.bh constant.numeric.integral.hexadecimal.bh
>    maxBound = fromInteger ((2 ** (valueOf n)) - 1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh constant.numeric.integral.decimal.bh
#                              ^ source.bh
#                               ^^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.infix.bh
#                                                ^ source.bh
#                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Bitwise #(Bit#(n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Bitwise (Bit n)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (&) x y = primAnd x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^ source.bh
>    (|) x y = primOr  x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^ source.bh
>    (^) x y = primXor x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^ source.bh
>    (^~) x y = primInv (primXor x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>    (~^) x y = primInv (primXor x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>    invert x = primInv x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^ source.bh
>    (<<) x y = primSL x (indexableToBits y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>    (>>) x y = primSRL x (indexableToBits y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>    msb x    = let lbs :: List (Bit 1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^ source.bh keyword.other.let.bh
#                  ^^^^^ source.bh
#                       ^^ source.bh keyword.operator.double-colon.bh
#                         ^ source.bh
#                          ^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^ source.bh storage.type.bh
#                                   ^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh
>                   lbs = listPrimSomeBitsToList  0 (valueOf n) x
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^ source.bh
>               in case (listDrop ((valueOf n) - 1) lbs) of
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.other.in.bh
#                 ^ source.bh
#                  ^^^^ source.bh keyword.control.case.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh constant.numeric.integral.decimal.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^^ source.bh keyword.control.of.bh
>                             Nil            -> 0
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^^^ source.bh constant.other.bh
#                                ^^^^^^^^^^^^ source.bh
#                                            ^^ source.bh keyword.operator.arrow.bh
#                                              ^ source.bh
#                                               ^ source.bh constant.numeric.integral.decimal.bh
>                             (Cons m Nil)   -> m
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^^^ source.bh
#                                     ^^^ source.bh constant.other.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^ source.bh
#                                            ^^ source.bh keyword.operator.arrow.bh
#                                              ^^^ source.bh
>                             _              -> error "msb implementation problem"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^^ source.bh keyword.operator.arrow.bh
#                                              ^^^^^^^ source.bh
#                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    lsb x    = let lbs :: List (Bit 1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^ source.bh keyword.other.let.bh
#                  ^^^^^ source.bh
#                       ^^ source.bh keyword.operator.double-colon.bh
#                         ^ source.bh
#                          ^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^ source.bh storage.type.bh
#                                   ^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh
>                   lbs = listPrimSomeBitsToList  0 (valueOf n) x
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^ source.bh
>               in case (lbs) of
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.other.in.bh
#                 ^ source.bh
#                  ^^^^ source.bh keyword.control.case.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.control.of.bh
>                             Nil -> 0
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^^ source.bh keyword.operator.arrow.bh
#                                   ^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
>                             (Cons b _) -> b
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^^ source.bh keyword.operator.arrow.bh
#                                          ^^^ source.bh
>
>instance BitReduction Bit n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh keyword.other.where.bh
>    reduceAnd x = if x == invert 0 then 1 else 0
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.then.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
#                                         ^ source.bh
#                                          ^^^^ source.bh keyword.control.else.bh
#                                              ^ source.bh
#                                               ^ source.bh constant.numeric.integral.decimal.bh
>    reduceOr  x = if x == 0 then 0 else 1
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^^^^ source.bh keyword.control.then.bh
#                                ^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.else.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
>    reduceXor x = case (listPrimSomeBitsToList 0 (valueOf n) x) of
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^^ source.bh keyword.control.case.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^^ source.bh keyword.control.of.bh
>                  Nil -> error "reduce ^ called on a zero-bit value"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.arrow.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                  (Cons b bs) -> listPrimFoldL (^) b bs
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^ source.bh keyword.operator.arrow.bh
#                                ^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh entity.name.function.infix.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh
>    reduceNand x = invert (reduceAnd x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>    reduceNor x = invert (reduceOr x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    reduceXnor x = invert (reduceXor x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Arith #(Bit#(n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Arith (Bit n)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (+) x y  = primAdd x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^ source.bh
>    (-) x y  = primSub x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^ source.bh
>    negate x = primNeg x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^ source.bh
>    (*) x y  = primTrunc (primMul x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>    (/) x y  = primQuot x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^ source.bh
>    (%) x y  = primRem x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^ source.bh
>    -- Bit is unsigned
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    abs x = x
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
>    signum _ = 1
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh constant.numeric.integral.decimal.bh
>    -- use default for these:
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    -- XXX special errors which mention just "Bit" not "Bit#(..)" ?
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --(**) b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --exp_e x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --logb b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log2 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log10 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ Concatenate two bit vectors into one.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{++@\te{++} (\te{Bit} concatenation operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bit#(k) (++)(Bit#(n) x, Bit#(m) y)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Add#(n, m, k));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(++) :: (Add n m k) => Bit n -> Bit m -> Bit k
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#   ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>(++) x y = primConcat x y
#^ source.bh punctuation.paren.bh
# ^^ source.bh entity.name.function.infix.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^ source.bh
>
>bitconcat :: (Add n m k) => Bit n -> Bit m -> Bit k
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>bitconcat = primConcat
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^ source.bh
>
>--@ Split a bit vector into two bit vectors (higher-order bits, lower-order bits).
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{split@\te{split} (\te{Bit} splitting function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Tuple2 #(Bit#(n), Bit#(m)) split(Bit#(k) x)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Add#(n, m, k));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>split :: (Add n m k) => Bit k -> (Bit n, Bit m)
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
>split x = primSplit x
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^ source.bh
>
>--@ \index{zeroExtend@\te{zeroExtend} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bit#(m) zeroExtend(Bit#(n) x)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Add#(k, n, m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>instance (Add k n m) => BitExtend n m Bit where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
>   zeroExtend x = primZeroExt x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^ source.bh
>   signExtend x = primSignExt x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^ source.bh
>   extend x     = primZeroExt x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^ source.bh
>   truncate   x = primTrunc x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^ source.bh
>
>--zeroExtend :: (Add k n m) => Bit n -> Bit m
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--zeroExtend x = primZeroExt x
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \index{signExtend@\te{signExtend} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bit#(m) signExtend(Bit#(n) x)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Add#(k, n, m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--signExtend :: (Add k n m) => Bit n -> Bit m
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--signExtend x = primSignExt x
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ Trucate by discarding higher-order bits.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{truncate@\te{truncate} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bit#(m) truncate(Bit#(n) x)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Add#(k, m, n));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--truncate :: (Add k m n) => Bit n -> Bit m
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--truncate x = primTrunc x
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ Comparisons and shifts, interpreting as signed values.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{signedLT@\te{signedLT} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool signedLT(Bit#(n) x, Bit#(n) y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>signedLT :: Bit n -> Bit n -> Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>signedLT x y = primChr (primSLT x y)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>
>--@ \index{signedLE@\te{signedLE} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool signedLE(Bit#(n) x, Bit#(n) y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>signedLE :: Bit n -> Bit n -> Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>signedLE x y = primChr (primSLE x y)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>
>--@ \index{signedGT@\te{signedGT} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool signedGT(Bit#(n) x, Bit#(n) y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>signedGT :: Bit n -> Bit n -> Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>signedGT x y = primChr (primBNot (primSLE x y))
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
>
>--@ \index{signedGE@\te{signedGE} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool signedGE(Bit#(n) x, Bit#(n) y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>signedGE :: Bit n -> Bit n -> Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>signedGE x y = primChr (primBNot (primSLT x y))
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
>
>--@ \index{signedShiftRight@\te{signedShiftRight} (\te{Bit} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bit#(n) signedShiftRight(Bit#(n) x, Bit#(k) c);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>signedShiftRight :: (PrimShiftIndex ix dx) => Bit n -> ix -> Bit n
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>signedShiftRight x c = primSRA x (indexableToBits c)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>-- =====================
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>flatN :: Integer -> List (Bit k) -> Bit m
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>flatN _ Nil = 0
#^^^^^^^^ source.bh
#        ^^^ source.bh constant.other.bh
#           ^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
>flatN n (Cons b bs) = b[(valueOf k - 1) : 0] << (n * valueOf k) | flatN (n+1) bs
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.bracket.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^ source.bh
#                                   ^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.colon.bh
#                                         ^ source.bh
#                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                           ^ source.bh punctuation.bracket.bh
#                                            ^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^ source.bh
#                                                   ^ source.bh keyword.operator.infix.bh
#                                                    ^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh keyword.operator.pipe.bh
#                                                                 ^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^ source.bh
#                                                                          ^ source.bh keyword.operator.infix.bh
#                                                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^ source.bh
>
>grabN :: Integer -> Integer -> Bit m -> List (Bit k)
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
>grabN i n bs =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
>    if i >= n then
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.infix.bh
#           ^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
>        Nil
#^^^^^^^^ source.bh
#        ^^^ source.bh constant.other.bh
>    else
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
>        letseq i' = i + valueOf k
#^^^^^^^^ source.bh
#        ^^^^^^ source.bh keyword.other.letseq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^^^^^^^^^^^ source.bh
>               x = bs[(i'-1) : i]
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.bracket.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.colon.bh
#                              ^^ source.bh
#                                ^ source.bh punctuation.bracket.bh
>        in  Cons x (grabN i' n bs)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^ source.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>
>-- =====================
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>map1 :: (a -> b) -> List a -> List b
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>map1 _ Nil = Nil
#^^^^^^^ source.bh
#       ^^^ source.bh constant.other.bh
#          ^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^^ source.bh constant.other.bh
>map1 f (Cons x xs) = Cons (f x) (map1 f xs)
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^ source.bh constant.other.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>
>zipwith1 :: (a -> b -> c) -> List a -> List b -> List c
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>zipwith1 f (Cons x xs) (Cons y ys) = Cons (f x y) (zipwith1 f xs ys)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>zipwith1 _ _ _ = Nil
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^ source.bh constant.other.bh
>
>upto1 :: Integer -> Integer -> List Integer
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>upto1 n m = if (n > m) then Nil else Cons n (upto1 (n+1) m)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^^^^ source.bh keyword.control.then.bh
#                           ^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh
#                                ^^^^ source.bh keyword.control.else.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh keyword.operator.infix.bh
#                                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
>
>num1 :: List a -> Integer -> List (a, Integer)
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
>num1 Nil _ = Nil
#^^^^^ source.bh
#     ^^^ source.bh constant.other.bh
#        ^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^^ source.bh constant.other.bh
>num1 (Cons x xs) n = Cons (x, n) (num1 xs (n+1))
#^^^^^ source.bh
#     ^ source.bh punctuation.paren.bh
#      ^^^^ source.bh constant.other.bh
#          ^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.separator.comma.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.infix.bh
#                                             ^ source.bh constant.numeric.integral.decimal.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh punctuation.paren.bh
>
>replaceBit :: (PrimIndex ix dx) => Position__ -> Bit n -> ix -> Bit 1 -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>replaceBit pos w i b =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
>  letseq i' = toStaticIndex i
#^^ source.bh
#  ^^^^^^ source.bh keyword.other.letseq.bh
#        ^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>         x :: Bit n
#^^^^^^^^^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>         x = 1 << (toDynamicIndex i)
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh constant.numeric.integral.decimal.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>         result = if (unpack b) then (w | x) else (w & invert x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^^^ source.bh keyword.control.then.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^ source.bh
#                                        ^ source.bh keyword.operator.pipe.bh
#                                         ^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^^^^ source.bh keyword.control.else.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^ source.bh
#                                                     ^ source.bh keyword.operator.infix.bh
#                                                      ^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
>         w' = primMarkBitArrayInitialized w
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  in if (isStaticIndex i) then
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^^^ source.bh keyword.control.then.bh
>        if ((i' >= valueOf n) || (i' < 0)) then
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.if.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^ source.bh
#                ^^ source.bh keyword.operator.infix.bh
#                  ^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh
#                                     ^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh constant.numeric.integral.decimal.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^^^^ source.bh keyword.control.then.bh
>           primError pos $ listMessage (toStaticIndex i) "bit replacement"
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                          ^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>        else if (isBitArray w) then
#^^^^^^^^ source.bh
#        ^^^^ source.bh keyword.control.else.bh
#            ^ source.bh
#             ^^ source.bh keyword.control.if.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^^^^ source.bh keyword.control.then.bh
>           primUpdateBitArray w' i' b
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        else result
#^^^^^^^^ source.bh
#        ^^^^ source.bh keyword.control.else.bh
#            ^^^^^^^^ source.bh
>     else result
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^^^^^^^^ source.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Bool}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Bool@\te{Bool} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{True@\te{True} (\te{Bool} constant)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{False@\te{False} (\te{Bool} constant)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{not@\te{not} (\te{Bool} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{&&@{\verb'&&'} (\te{Bool} ``and'' operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{"|"|@{\verb'"|"|'} (\te{Bool} ``or'' operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typedef enum {False, True} Bool deriving (Eq, Bits, Bounded);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>data Bool = False | True
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Bool .bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh
#                    ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>        deriving (Eq, Bits, Bounded, FShow, DefaultValue)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#        ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                      ^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                            ^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                     ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                            ^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                                        ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>isStaticBool :: Bool -> Bool
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isStaticBool = compose areStaticBits pack
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool not(Bool x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>not :: Bool -> Bool
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>not x = primChr (primBNot (primOrd x))
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.eq.bh
#       ^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool (&&)(Bool x, Bool y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(&&) :: Bool -> Bool -> Bool
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#   ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(&&) x y = primChr (primBAnd (primOrd x) (primOrd y))
#^ source.bh punctuation.paren.bh
# ^^ source.bh entity.name.function.infix.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool (||)(Bool x, Bool y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(||) :: Bool -> Bool -> Bool
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#   ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(||) x y = primChr (primBOr (primOrd x) (primOrd y))
#^ source.bh punctuation.paren.bh
# ^^ source.bh entity.name.function.infix.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>_if :: Bool -> a -> a -> a
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>_if c t e = primIf (primOrd c) t e
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Empty}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ An interface with no methods.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Empty@\te{Empty} (interface type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ interface Empty;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endinterface: Empty
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>interface Empty = { }
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.Empty .bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Integer}
#^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@
#^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@ The \te{Integer} type is a built-in type in the compiler.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@
#^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@ \index{Integer@\te{Integer} (type)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@ \index{div@{\te{div}} (\te{Integer} function)}
#^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@ \index{mod@{\te{mod}} (\te{Integer} function)}
#^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
#    ^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.documentation.bh
>primitive type Integer :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Literal #(Integer);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Literal Integer
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromInteger x = x
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^ source.bh
>    inLiteralRange _ _ = True
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^ source.bh constant.other.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Eq #(Integer);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Eq Integer
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (==) x y = primChr (primIntegerEQ x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>    (/=) x y = primChr (primBNot (primIntegerEQ x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Ord #(Integer);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Ord Integer
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (<)  x y = primChr (primIntegerLT x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>    (<=) x y = primChr (primIntegerLE x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>    (>)  x y = primChr (primBNot (primIntegerLE x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
>    (>=) x y = primChr (primBNot (primIntegerLT x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Arith #(Integer);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Arith Integer
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (+) x y = primIntegerAdd x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>    (-) x y = primIntegerSub x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>    negate x = primIntegerNeg x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^ source.bh
>    (*) x y = primIntegerMul x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>    (/) x y = primIntegerQuot x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^^ source.bh
>    (%) x y = primIntegerRem x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>    abs x = if x < 0 then primIntegerNeg x else x
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^^^ source.bh
#                 ^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh constant.numeric.integral.decimal.bh
#                    ^ source.bh
#                     ^^^^ source.bh keyword.control.then.bh
#                         ^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^^^^ source.bh keyword.control.else.bh
#                                               ^^^ source.bh
>    signum x = if x < 0 then primIntegerNeg 1 else 1
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^ source.bh keyword.control.if.bh
#                 ^^^ source.bh
#                    ^ source.bh keyword.operator.infix.bh
#                     ^ source.bh
#                      ^ source.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh constant.numeric.integral.decimal.bh
#                                             ^ source.bh
#                                              ^^^^ source.bh keyword.control.else.bh
#                                                  ^ source.bh
#                                                   ^ source.bh constant.numeric.integral.decimal.bh
>    (**) b x = primIntegerExp b x
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^^ source.bh
>    log2  x = primIntegerLog2 x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
>    log10 x = primIntegerLog10 x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>    -- use default for these:
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --exp_e x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --logb b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Note:  div performs integer division truncated toward negative infinity
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        and mod obeys the equation (x `div` y)*y + (x `mod` y) == x
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        quot performs integer division truncated toward zero
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        and rem obeys the equation (x `quot` y)*y + (x `rem` y) == x
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Integer div(Integer x, Integer y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>div :: Integer -> Integer -> Integer
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>div x y = primIntegerDiv x y
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Integer mod(Integer x, Integer y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>mod :: Integer -> Integer -> Integer
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mod x y = primIntegerMod x y
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Integer quot(Integer x, Integer y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>quot :: Integer -> Integer -> Integer
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>quot x y = primIntegerQuot x y
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Integer rem(Integer x, Integer y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>rem :: Integer -> Integer -> Integer
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rem x y = primIntegerRem x y
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Integer exp(  Integer base, Integer pwr );
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>{-# properties exp = { deprecate = "Replaced by the operator `**'." } #-}
#^^^ source.bh meta.preprocessor.bh
#   ^ source.bh meta.preprocessor.bh
#    ^^^^^^^^^^ source.bh meta.preprocessor.bh keyword.other.preprocessor.pragma.bh
#              ^^^^^^^^^ source.bh meta.preprocessor.bh
#                       ^^^^^^^^^ source.bh meta.preprocessor.bh keyword.other.preprocessor.pragma.bh
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                                      ^^^ source.bh meta.preprocessor.bh
>exp :: Integer -> Integer -> Integer
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>exp = (**)
#^^^^ source.bh
#    ^ source.bh keyword.operator.eq.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh entity.name.function.infix.bh
#         ^ source.bh punctuation.paren.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>primitive type Real :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>realToString :: Real -> String
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>realToString x = primRealToString x
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance RealLiteral Real
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromReal x = x
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^ source.bh
>
>instance Literal Real
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromInteger x = primIntegerToReal x
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^^ source.bh
>    inLiteralRange _ _ = True
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^ source.bh constant.other.bh
>
>instance Eq Real
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (==) x y = primChr (primRealEQ x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>    (/=) x y = primChr (primBNot (primRealEQ x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>
>instance Ord Real
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (<)  x y = primChr (primRealLT x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>    (<=) x y = primChr (primRealLE x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>    (>)  x y = primChr (primBNot (primRealLE x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>    (>=) x y = primChr (primBNot (primRealLT x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>
>instance Arith Real
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (+) x y = primRealAdd x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>    (-) x y = primRealSub x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>    negate x = primRealNeg x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
>    (*) x y = primRealMul x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>    (/) x y = primRealDiv x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>    (%) _ _ = error ("The operator `%' is not defined for `real'")
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh punctuation.paren.bh
>    abs x = primRealAbs x
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
>    signum x = primRealSignum x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^ source.bh
>    exp_e x = primRealExpE x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^ source.bh
>    (**) b x = primRealPow b x
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^ source.bh
>    log x = primRealLogE x
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^ source.bh
>    logb b x = primRealLogBase b x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^^^ source.bh
>    log2 x = primRealLog2 x
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>    log10 x = primRealLog10 x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>
>$realtobits :: Real -> Bit 64
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.operator.double-colon.bh
#              ^ source.bh
#               ^^^^ source.bh storage.type.bh
#                   ^ source.bh
#                    ^^ source.bh keyword.operator.arrow.bh
#                      ^ source.bh
#                       ^^^ source.bh storage.type.bh
#                          ^ source.bh
#                           ^^ source.bh constant.numeric.integral.decimal.bh
>$realtobits x = primRealToBits x
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^ source.bh
>
>$bitstoreal :: Bit 64 -> Real
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.operator.double-colon.bh
#              ^ source.bh
#               ^^^ source.bh storage.type.bh
#                  ^ source.bh
#                   ^^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.arrow.bh
#                        ^ source.bh
#                         ^^^^ source.bh storage.type.bh
>$bitstoreal x = primBitsToReal x
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^ source.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Maybe}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Maybe@\te{Maybe} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Invalid@\te{Invalid} (type constructor)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Valid@\te{Valid} (type constructor)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{fromMaybe@\te{fromMaybe} (function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{validValue@\te{validValue} (function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{isValid@\te{isValid} (function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ The \te{Maybe} type is used for ``tagging'' values as either
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ ``Valid'' or ``Invalid''.\footnote{To match older versions of
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Bluespec, and the Haskell language
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \te{Maybe} type, \te{Just} is a type constructor
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ alias for \te{Valid} and \te{Nothing} for \te{Invalid}.}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typedef union tagged {
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     void Invalid;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     a    Valid;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ } Maybe #(type a) deriving (Eq, Bits);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>data Maybe a = (Invalid, Nothing) | (Valid, Just) a
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Maybe a .bh
#            ^ source.bh meta.declaration.data.algebraic.bh
#             ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                     ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                          ^ source.bh meta.declaration.data.algebraic.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.data.algebraic.bh
#                                            ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh
#                                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>        deriving (Eq, Bits, FShow, DefaultValue)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#        ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                      ^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                   ^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>type Perhaps  = Maybe
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#            ^^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.type.bh
#                ^^^^^ source.bh meta.declaration.type.bh storage.type.bh
>
>--X@ The \te{Maybe} type is a monad.
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>--X@ \begin{libverbatim}
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>--X@ instance Monad #(Maybe);
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>--X@ \end{libverbatim}
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>instance Monad Maybe
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>    where
#^^^^ source.bh meta.declaration.instance.bh
#    ^^^^^ source.bh keyword.other.where.bh
>        return x = Just x
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^^ source.bh
>        bind Nothing  _ = Nothing
#^^^^^^^^^^^^^ source.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^^^^^ source.bh constant.other.bh
>        bind (Just x) f = f x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^ source.bh
>
>--@ {\tt fromMaybe} extracts the \te{Valid} value out of a \te{Maybe} value,
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ providing a default value if the tagged union is \te{Invalid}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a fromMaybe( a default,  Maybe#(a) val ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>fromMaybe :: a -> Maybe a -> a
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>fromMaybe def Nothing = def
#^^^^^^^^^^^^^^ source.bh
#              ^^^^^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^ source.bh
>fromMaybe _ (Just x) = x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^ source.bh constant.other.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^ source.bh
>
>
>--@ {\tt validValue} picks out the value of a \te{Valid}.  This is not recommended because an
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \te{Invalid} pattern gives an unspecified value -- Use fromMaybe as a safer alternative.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a validValue( Maybe#(a) val ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>validValue :: Maybe a -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>validValue Nothing = _
#^^^^^^^^^^^ source.bh
#           ^^^^^^^ source.bh constant.other.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^ source.bh
>validValue (Just x) = x
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^ source.bh
>
>
>--X@ (This function is deprecated.)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ {\tt unJust}     picks out the value of a \te{Valid}.  This is not recommended because an
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \te{Invalid} pattern gives an unspecified value -- Use fromMaybe as a safer alternative.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \begin{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ function a unJust( Maybe#(a) val ) ;
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \end{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>unJust :: Maybe a -> a
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>unJust Nothing = _
#^^^^^^^ source.bh
#       ^^^^^^^ source.bh constant.other.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^ source.bh
>unJust (Just x) = x
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^ source.bh
>
>--@ The function {\tt isValid} tests if a \te{Maybe} variable is \te{Valid}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool isValid( Maybe#(a) val ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>isValid :: Maybe a -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isValid Nothing = False
#^^^^^^^^ source.bh
#        ^^^^^^^ source.bh constant.other.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^^^ source.bh constant.other.bh
>isValid (Just _) = True
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^ source.bh constant.other.bh
>
>--X@ The function {\tt isJust} tests if a \te{Maybe} variable is
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \te{Valid}. (This function is deprecated.)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \begin{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ function Bool isJust( Maybe#(a) val ) ;
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--X@ \end{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>isJust :: Maybe a -> Bool
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isJust Nothing = False
#^^^^^^^ source.bh
#       ^^^^^^^ source.bh constant.other.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^^^ source.bh constant.other.bh
>isJust (Just _) = True
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^^ source.bh constant.other.bh
>
>-- ---------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Integers
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- abstract
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^ source.bh comment.line.double-dash.bh
>data Int n = Int (Bit n)
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Int n .bh
#          ^ source.bh meta.declaration.data.algebraic.bh
#           ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#            ^ source.bh meta.declaration.data.algebraic.bh
#             ^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                     ^ source.bh meta.declaration.data.algebraic.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
>
>instance Bits (Int n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#               ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^ source.bh keyword.other.where.bh
>    pack (Int x) = pack x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
>    unpack b = Int (unpack b)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
>
>instance Literal (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^^ source.bh keyword.other.where.bh
>    fromInteger i = Int (primIntegerToIntBits i)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^ source.bh constant.other.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>    inLiteralRange _ i = let n = valueOf n
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.other.let.bh
#                            ^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^ source.bh
>                             max = 2 ** (n - 1)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.infix.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^ source.bh
#                                           ^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh constant.numeric.integral.decimal.bh
#                                              ^ source.bh punctuation.paren.bh
>                             min = negate (2 ** (n - 1))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                            ^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^ source.bh
#                                                   ^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
>                         in if (n == 0) then i == 0
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh keyword.other.in.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.control.if.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh keyword.control.then.bh
#                                            ^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh constant.numeric.integral.decimal.bh
>                            else i < max && i >= min
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^^^^ source.bh keyword.control.else.bh
#                                ^^^ source.bh
#                                   ^ source.bh keyword.operator.infix.bh
#                                    ^^^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^ source.bh
#                                              ^^ source.bh keyword.operator.infix.bh
#                                                ^^^^^ source.bh
>
>instance SizedLiteral (Int n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                       ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>    fromSizedInteger i = Int i
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh constant.other.bh
#                            ^^^ source.bh
>
>instance Eq (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#             ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^^^^^ source.bh keyword.other.where.bh
>    (==) (Int x) (Int y) = x == y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^^^ source.bh
>    (/=) (Int x) (Int y) = x /= y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^^^ source.bh
>
>
>-- For quotient (/) and remainder (%), of signed values, we strip off
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- the sign information and perform the unsigned operations, then
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- we restore the signed representation according to the rules:
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   1. the quotient is negative if exactly one operand is negative
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   2. the remainder is negative iff the first operand is negative
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>fromSigned :: Int n -> (Bool, UInt n)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
>fromSigned x = (x < 0, unpack (pack (abs x)))
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.paren.bh
>
>-- Note: this assumes that x does not use the highest bit,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- which is true when it comes from fromSigned, and is preserved
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- by integer / and %.  The constraints are not enforced with
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- a signture like toSigned :: (Add k 1 n) => (Bool, UInt k) -> Int n
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- because the provisos propagate up and would require the user
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- to add proviso(Arith#(Int#(n)), etc. whenever they write
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- functions with do arithmetic on Int#(n).
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>toSigned :: (Bool, UInt n) -> Int n
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>toSigned (s,x) = (if s then negate else id) (unpack (pack x))
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^^^ source.bh keyword.control.then.bh
#                           ^^^^^^^^ source.bh
#                                   ^^^^ source.bh keyword.control.else.bh
#                                       ^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
>
>signedQuot :: Int n -> Int k -> Int n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>signedQuot q d =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
>  let (s_q, v_q) = fromSigned q
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^ source.bh
>      (s_d, v_d) = fromSigned d
#^^^^^^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^ source.bh
>      quo       = primQuot (pack v_q) (pack v_d)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>  in toSigned ((s_q && (not s_d)) || ((not s_q) && s_d), (UInt quo))
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^^ source.bh keyword.operator.infix.bh
#                                                  ^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^ source.bh constant.other.bh
#                                                              ^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh punctuation.paren.bh
>
>signedRem :: Int n -> Int n -> Int n
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>signedRem q d =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
>  let (s_q, v_q) = fromSigned q
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^ source.bh
>      (_,   v_d) = fromSigned d
#^^^^^^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.separator.comma.bh
#         ^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^ source.bh
>  in toSigned (s_q, (v_q % v_d))
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh
#                  ^ source.bh punctuation.separator.comma.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh punctuation.paren.bh
>
>signedMul :: (Add n k m) => Int n -> Int k -> Int m
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>signedMul a b =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
>  let (s_a, v_a) = fromSigned a
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^ source.bh
>      (s_b, v_b) = fromSigned b
#^^^^^^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^ source.bh
>      mulResult  = unpack(primMul (pack v_a) (pack v_b))
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
>  in toSigned ((s_a && (not s_b)) || (s_b && (not s_a)), mulResult)
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh
#                                          ^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^^^^^^^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
>
>
>unsignedMul :: (Add n k m) => UInt n -> UInt k -> UInt m
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>unsignedMul a b = unpack( primMul (pack a) (pack b))
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>unsignedQuot :: UInt k -> UInt n -> UInt k
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>unsignedQuot a b = unpack (primQuot (pack a) (pack b))
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>{-
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>instance Arith (Int 0) where
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>    (+) (Int x) (Int y) = Int (x + y)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>    (-) (Int x) (Int y) = Int (x - y)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>    negate (Int x) = Int (negate x)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>    (*) (Int x) (Int y) = Int (x * y)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>    (/) x y = error "/ for (Int 0) implies division by 0"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>    (%) x y = error "% for (Int 0) implies division by 0"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>-}
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>
>instance Arith (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^ source.bh keyword.other.where.bh
>    (+) (Int x) (Int y) = Int (x + y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh
#                                 ^ source.bh keyword.operator.infix.bh
#                                  ^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    (-) (Int x) (Int y) = Int (x - y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh
#                                 ^ source.bh keyword.operator.infix.bh
#                                  ^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    negate (Int x) = Int (negate x)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^ source.bh constant.other.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
>    (*) (Int x) (Int y) = Int (x * y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh
#                                 ^ source.bh keyword.operator.infix.bh
#                                  ^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    (/) x y = signedQuot x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^ source.bh
>    (%) x y = signedRem x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^ source.bh
>    abs x@(Int i) = if x < 0 then Int (negate i) else x
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.infix.tight.at.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^ source.bh keyword.control.if.bh
#                      ^^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh
#                             ^^^^ source.bh keyword.control.then.bh
#                                 ^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^^^^ source.bh keyword.control.else.bh
#                                                     ^^^ source.bh
>    signum x = if x < 0 then negate 1 else 1
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^ source.bh keyword.control.if.bh
#                 ^^^ source.bh
#                    ^ source.bh keyword.operator.infix.bh
#                     ^ source.bh
#                      ^ source.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^^^^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh
#                                      ^^^^ source.bh keyword.control.else.bh
#                                          ^ source.bh
#                                           ^ source.bh constant.numeric.integral.decimal.bh
>    -- use default for these:
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    -- XXX special errors which mention just "Int" not "Int#(..)" ?
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --(**) b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --exp_e x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --logb b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log2 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log10 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance Ord (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#              ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^^^^ source.bh keyword.other.where.bh
>    (<)  (Int x) (Int y) = primChr (primSLT x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>    (<=) (Int x) (Int y) = primChr (primSLE x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>    (>)  (Int x) (Int y) = primChr (primBNot (primSLE x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh punctuation.paren.bh
>    (>=) (Int x) (Int y) = primChr (primBNot (primSLT x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh punctuation.paren.bh
>
>instance Bounded (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^^ source.bh keyword.other.where.bh
>    minBound = Int (((maxBound::Bit n) >> 1) + 1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^ source.bh
#                              ^^ source.bh keyword.operator.double-colon.bh
#                                ^^^ source.bh storage.type.bh
#                                   ^ source.bh
#                                    ^ source.bh variable.other.generic-type.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^ source.bh
#                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                ^ source.bh punctuation.paren.bh
>    maxBound = Int ((maxBound::Bit n) >> 1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh
#                             ^^ source.bh keyword.operator.double-colon.bh
#                               ^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^ source.bh variable.other.generic-type.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh constant.numeric.integral.decimal.bh
#                                          ^ source.bh punctuation.paren.bh
>
>instance Bitwise (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^^ source.bh keyword.other.where.bh
>    (&) (Int x) (Int y) = Int (primAnd x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>    (|) (Int x) (Int y) = Int (primOr  x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>    (^) (Int x) (Int y) = Int (primXor x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>    (^~) (Int x) (Int y) = Int (primInv (primXor x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>    (~^) (Int x) (Int y) = Int (primInv (primXor x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>    invert (Int x) = Int (primInv x)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^ source.bh constant.other.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>    (<<) (Int x) y = Int (primSL x (indexableToBits y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
>    (>>) (Int x) y = Int (primSRA x (indexableToBits y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
>    msb  (Int x)   = msb x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^ source.bh
>    lsb  (Int x)   = lsb x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^ source.bh
>
>instance BitReduction Int n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh keyword.other.where.bh
>    reduceAnd x = if x == invert 0 then 1 else 0
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.then.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
#                                         ^ source.bh
#                                          ^^^^ source.bh keyword.control.else.bh
#                                              ^ source.bh
#                                               ^ source.bh constant.numeric.integral.decimal.bh
>    reduceOr  x = if x == 0 then 0 else 1
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^^^^ source.bh keyword.control.then.bh
#                                ^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.else.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
>    reduceXor (Int x) = case (listPrimSomeBitsToList 0 (valueOf n) x) of
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.case.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^^ source.bh keyword.control.of.bh
>                        Nil -> error "reduce ^ called on a zero-bit value"
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^^^ source.bh constant.other.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.operator.arrow.bh
#                              ^^^^^^^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                        (Cons b bs) -> Int (listPrimFoldL (^) b bs)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^ source.bh keyword.operator.arrow.bh
#                                      ^ source.bh
#                                       ^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh entity.name.function.infix.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
>    reduceNand x = invert (reduceAnd x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>    reduceNor x = invert (reduceOr x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    reduceXnor x = invert (reduceXor x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>
>instance (Add k n m) => BitExtend n m Int where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
>    zeroExtend (Int x) = Int (primZeroExt x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>    signExtend (Int x) = Int (primSignExt x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>    extend     (Int x) = Int (primSignExt x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>    truncate   (Int x) = Int (primTrunc x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>
>instance PrimIndex (Int n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>-- if you need to check for negativeness for the following two functions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- you may wish to use indexableToBits
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>  isStaticIndex  = compose areStaticBits pack
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  toStaticIndex  = compose primIntBitsToInteger pack
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  toDynamicIndex = pack
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^ source.bh
>
>instance PrimShiftIndex (Int n) n where {}
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.brace.bh
#                                         ^ source.bh punctuation.brace.bh
>
>-- ---------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Unsigned (sized) integers
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- abstract
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^ source.bh comment.line.double-dash.bh
>data UInt n = UInt (Bit n)
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.UInt n .bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                    ^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
>
>instance Bits (UInt n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^^ source.bh keyword.other.where.bh
>    pack (UInt x) = pack x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^ source.bh
>    unpack b = UInt (unpack b)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^ source.bh constant.other.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>
>instance Literal (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^^^^^ source.bh keyword.other.where.bh
>    fromInteger i = UInt (primIntegerToUIntBits i)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>    inLiteralRange _ i = let n = valueOf n
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.other.let.bh
#                            ^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^ source.bh
>                             max = 2 ** n
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.infix.bh
#                                       ^^^ source.bh
>                         in i >= 0 && i < max
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh keyword.other.in.bh
#                           ^^^ source.bh
#                              ^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^ source.bh keyword.operator.infix.bh
#                                     ^^^ source.bh
#                                        ^ source.bh keyword.operator.infix.bh
#                                         ^^^^^ source.bh
>
>instance SizedLiteral (UInt n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                       ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>    fromSizedInteger i = UInt i
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^ source.bh
>
>instance Eq (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#             ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^^^^ source.bh keyword.other.where.bh
>    (==) (UInt x) (UInt y) = x == y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^ source.bh
#                               ^^ source.bh keyword.operator.infix.bh
#                                 ^^^ source.bh
>    (/=) (UInt x) (UInt y) = x /= y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^ source.bh
#                               ^^ source.bh keyword.operator.infix.bh
#                                 ^^^ source.bh
>
>instance Arith (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^ source.bh keyword.other.where.bh
>    (+) (UInt x) (UInt y) = UInt (x + y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>    (-) (UInt x) (UInt y) = UInt (x - y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>    negate (UInt x) = UInt (negate x)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    (*) (UInt x) (UInt y) = UInt (x * y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>    (/) (UInt x) (UInt y) = UInt (x / y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>    (%) (UInt x) (UInt y) = UInt (x % y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>    -- UInt is unsigned
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    abs x = x
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
>    signum _ = 1
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh constant.numeric.integral.decimal.bh
>    -- use default for these:
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    -- XXX special errors which mention just "UInt" not "UInt#(..)" ?
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --(**) b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --exp_e x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --logb b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log2 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log10 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance Ord (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#              ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^^ source.bh keyword.other.where.bh
>    (<)  (UInt x) (UInt y) = primChr (primULT x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>    (<=) (UInt x) (UInt y) = primChr (primULE x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>    (>)  (UInt x) (UInt y) = primChr (primBNot (primULE x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
>    (>=) (UInt x) (UInt y) = primChr (primBNot (primULT x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
>
>instance Bounded (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^^^^^ source.bh keyword.other.where.bh
>    minBound = UInt (minBound::Bit n)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^ source.bh constant.other.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh
#                             ^^ source.bh keyword.operator.double-colon.bh
#                               ^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^ source.bh variable.other.generic-type.bh
#                                    ^ source.bh punctuation.paren.bh
>    maxBound = UInt (maxBound::Bit n)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^ source.bh constant.other.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh
#                             ^^ source.bh keyword.operator.double-colon.bh
#                               ^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^ source.bh variable.other.generic-type.bh
#                                    ^ source.bh punctuation.paren.bh
>
>instance Bitwise (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                  ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^^^^^ source.bh keyword.other.where.bh
>    (&) (UInt x) (UInt y) = UInt (primAnd x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>    (|) (UInt x) (UInt y) = UInt (primOr  x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>    (^) (UInt x) (UInt y) = UInt (primXor x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>    (^~) (UInt x) (UInt y) = UInt (primInv (primXor x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
>    (~^) (UInt x) (UInt y) = UInt (primInv (primXor x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
>    invert (UInt x) = UInt (primInv x)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>    (<<) (UInt x) y = UInt (primSL x (indexableToBits y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
>    (>>) (UInt x) y = UInt (primSRL x (indexableToBits y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>    msb  (UInt x)   = msb x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^ source.bh
>    lsb  (UInt x)   = lsb x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^ source.bh
>
>instance BitReduction UInt n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>    reduceAnd x = if x == invert 0 then 1 else 0
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.then.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
#                                         ^ source.bh
#                                          ^^^^ source.bh keyword.control.else.bh
#                                              ^ source.bh
#                                               ^ source.bh constant.numeric.integral.decimal.bh
>    reduceOr  x = if x == 0 then 0 else 1
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.control.if.bh
#                    ^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^^^^ source.bh keyword.control.then.bh
#                                ^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^^^^ source.bh keyword.control.else.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
>    reduceXor (UInt x) = case (listPrimSomeBitsToList 0 (valueOf n) x) of
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^ source.bh keyword.control.case.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                                       ^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^^ source.bh keyword.control.of.bh
>                         Nil -> error "reduce ^ called on a zero-bit value"
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.operator.arrow.bh
#                               ^^^^^^^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                         (Cons b bs) -> UInt (listPrimFoldL (^) b bs)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.arrow.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh entity.name.function.infix.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>    reduceNand x = invert (reduceAnd x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>    reduceNor x = invert (reduceOr x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>    reduceXnor x = invert (reduceXor x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>
>instance (Add k n m) => BitExtend n m UInt where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^^^^^ source.bh keyword.other.where.bh
>    zeroExtend (UInt x) = UInt (primZeroExt x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>    -- comment this is controversial - here we are treating an
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    -- unsigned integer like a bit pattern
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    signExtend (UInt x) = UInt (primSignExt x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>    extend (UInt x)     = UInt (primZeroExt x)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>    truncate (UInt x) = UInt (primTrunc x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>
>
>instance PrimIndex (UInt n) n where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^^^^ source.bh keyword.other.where.bh
>  isStaticIndex  = compose areStaticBits pack
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  toStaticIndex  = compose primUIntBitsToInteger pack
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  toDynamicIndex = pack
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^ source.bh
>
>instance PrimShiftIndex (UInt n) n where {}
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^^^^^ source.bh keyword.other.where.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.brace.bh
#                                          ^ source.bh punctuation.brace.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Nat}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>--@ \index{Nat@\te{Nat} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typedef Bit#(32) Nat;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>type Nat = Bit 32
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^ source.bh meta.declaration.type.bh storage.type.bh
#        ^ source.bh meta.declaration.type.bh
#         ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#          ^ source.bh meta.declaration.type.bh
#           ^^^ source.bh meta.declaration.type.bh storage.type.bh
#              ^ source.bh meta.declaration.type.bh
#               ^^ source.bh meta.declaration.type.bh constant.numeric.integral.decimal.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Either}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Either@\te{Either} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ Used for values that are either of type {\te a} or of type {\te b}.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ typedef tagged union {
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     a Left;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     b Right;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ } Either #(type a, type b) deriving (Eq, Bits);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>data Either a b = Left a | Right b
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Either a b .bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh
#                           ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>        deriving (Eq, Bits, FShow)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#        ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                      ^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>--@ The function {\tt isLeft} tests if an \te{Either} value is
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ the \te{Left} variant.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool isLeft( Either#(a,b) val ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>isLeft :: Either a b -> Bool
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isLeft (Left _)  = True
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^ source.bh constant.other.bh
>isLeft (Right _) = False
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^^ source.bh constant.other.bh
>
>--@ The function {\tt isRight} tests if an \te{Either} value is
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ the \te{Right} variant.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Bool isRight( Either#(a,b) val ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>isRight :: Either a b -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isRight (Left _)  = False
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^^^ source.bh constant.other.bh
>isRight (Right _) = True
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^ source.bh constant.other.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^^ source.bh constant.other.bh
>
>--@ The function {\tt either} selects which of two argument functions
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ to apply to an \te{Either} value.  If the value is \te{Left a} then
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ first function is applied to \te{a}.  If the value is \te{Right b}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ then the second function is applied to \te{b}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function c either( function c leftFn(a x), function c rightFn(b y), Either#(a,b) val ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>either :: (a -> c) -> (b -> c) -> (Either a b -> c)
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
>either fn _ (Left x)  = fn x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^ source.bh constant.other.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^ source.bh
>either _ fn (Right x) = fn x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^ source.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Registers}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{Reg@\te{Reg} (type)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{\_write@\te{\_write} (\te{Reg} interface method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{\_read@\te{\_read} (\te{Reg} interface method)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{mkReg@\te{mkReg} (\te{Reg} module)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{mkReg@\te{mkRegA} (\te{Reg} module)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{mkRegU@\te{mkRegU} (\te{Reg} module)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{asReg@\te{asReg} (dummy \te{Reg} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \label{lib-registers}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ interface Reg #(type a_type);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     method Action _write(a_type x1);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     method a_type _read();
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endinterface: Reg
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>interface Reg a =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.Reg a .bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    _write :: a -> Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^ source.bh meta.declaration.interface.algebraic.bh
#           ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    _read  :: a
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh
#           ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>interface VReg n =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.VReg n .bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    write :: Bit n -> PrimAction
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    read :: Bit n
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#        ^ source.bh meta.declaration.interface.algebraic.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>-- only for n>0
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>vMkReg :: Bit n -> Module (VReg n)
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
>vMkReg v =
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
>    module verilog "RegN" (("width",valueOf n), ("init",v)) "CLK" "RST" {
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
#          ^ source.bh
#           ^^^^^^^ source.bh keyword.control.verilog.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^ source.bh punctuation.separator.comma.bh
#                                    ^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.separator.comma.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                  ^^^^ source.bh string.quoted.double.bh
#                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^^^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                   ^^^ source.bh string.quoted.double.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh meta.record.bh punctuation.brace.bh
>        read = "Q_OUT"{reg};
#^^^^^^^^ source.bh meta.record.bh
#        ^^^^ source.bh meta.record.bh variable.other.member.bh
#            ^ source.bh meta.record.bh
#             ^ source.bh meta.record.bh keyword.operator.eq.bh
#              ^ source.bh meta.record.bh
#               ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^ source.bh meta.record.bh string.quoted.double.bh
#                     ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                       ^^^ source.bh meta.record.bh meta.record.bh variable.other.member.bh
#                          ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                           ^^ source.bh meta.record.bh
>        write = "D_IN"{reg} "EN";
#^^^^^^^^^^^^^^ source.bh meta.record.bh
#              ^ source.bh meta.record.bh keyword.operator.eq.bh
#               ^ source.bh meta.record.bh
#                ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^ source.bh meta.record.bh string.quoted.double.bh
#                     ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                       ^^^ source.bh meta.record.bh meta.record.bh variable.other.member.bh
#                          ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                           ^ source.bh meta.record.bh
#                            ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^ source.bh meta.record.bh string.quoted.double.bh
#                               ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^^ source.bh meta.record.bh
>    } [ read <> read,
#^^^^ source.bh meta.record.bh
#    ^ source.bh meta.record.bh punctuation.brace.bh
#     ^ source.bh
#      ^ source.bh punctuation.bracket.bh
#       ^^^^^^ source.bh
#             ^^ source.bh keyword.operator.infix.bh
#               ^^^^^ source.bh
#                    ^ source.bh punctuation.separator.comma.bh
>        read < write,
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.infix.bh
#              ^^^^^^ source.bh
#                    ^ source.bh punctuation.separator.comma.bh
>        write << write ]
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.infix.bh
#                ^^^^^^^ source.bh
#                       ^ source.bh punctuation.bracket.bh
>
>--@ Make a register with a given reset value.  Reset logic is
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ synchronous.   Note that all Bluespec registers are considered
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ atomic units, which means that even if one bit is updated
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ (written), then all the bits are considered updated. This
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ prevents multiple rules from updating register fields in an
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ inconsistent manner.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ module mkReg#(a_type resetval)(Reg#(a_type))
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Bits#(a_type, sizea));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>mkReg :: (IsModule m c, Bits a sa) => a -> m (Reg a)
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
>mkReg v = liftModule $
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.infix.bh
>  if valueOf sa == 0 then
#^^ source.bh
#  ^^ source.bh keyword.control.if.bh
#    ^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh constant.numeric.integral.decimal.bh
#                    ^ source.bh
#                     ^^^^ source.bh keyword.control.then.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>      interface
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        _read = unpack 0
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>        _write _ = return ()
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh support.constant.unit.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh support.constant.unit.bh punctuation.paren.bh
>  else
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>      _r :: VReg sa
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>      {-# hide #-}
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
#         ^^^^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
#               ^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
>      _r <- vMkReg (pack v)
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>      let name = Valid (primGetModuleName _r)
#^^^^^^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>      let t = typeOf (_ :: a)
#^^^^^^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^ source.bh keyword.operator.double-colon.bh
#                          ^ source.bh
#                           ^ source.bh variable.other.generic-type.bh
#                            ^ source.bh punctuation.paren.bh
>      primSavePortType name "D_IN" t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^ source.bh string.quoted.double.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                  ^^^ source.bh
>      primSavePortType name "Q_OUT" t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^^^ source.bh
>      interface
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        _read = unpack _r.read
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                          ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        _write x = fromPrimAction (_r.write (pack x))
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                   ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                      ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                             ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh
>
>-- only for n>0
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>vMkRegU :: Module (VReg n)
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
>vMkRegU =
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
>    module verilog "RegUN" (("width",valueOf n)) "CLK" {
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
#          ^ source.bh
#           ^^^^^^^ source.bh keyword.control.verilog.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                              ^^^^^ source.bh string.quoted.double.bh
#                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                    ^ source.bh punctuation.separator.comma.bh
#                                     ^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                  ^^^ source.bh string.quoted.double.bh
#                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                      ^ source.bh
#                                                       ^ source.bh meta.record.bh punctuation.brace.bh
>        read = "Q_OUT"{reg};
#^^^^^^^^ source.bh meta.record.bh
#        ^^^^ source.bh meta.record.bh variable.other.member.bh
#            ^ source.bh meta.record.bh
#             ^ source.bh meta.record.bh keyword.operator.eq.bh
#              ^ source.bh meta.record.bh
#               ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^ source.bh meta.record.bh string.quoted.double.bh
#                     ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                       ^^^ source.bh meta.record.bh meta.record.bh variable.other.member.bh
#                          ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                           ^^ source.bh meta.record.bh
>        write = "D_IN"{reg} "EN";
#^^^^^^^^^^^^^^ source.bh meta.record.bh
#              ^ source.bh meta.record.bh keyword.operator.eq.bh
#               ^ source.bh meta.record.bh
#                ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^ source.bh meta.record.bh string.quoted.double.bh
#                     ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                       ^^^ source.bh meta.record.bh meta.record.bh variable.other.member.bh
#                          ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                           ^ source.bh meta.record.bh
#                            ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^ source.bh meta.record.bh string.quoted.double.bh
#                               ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^^ source.bh meta.record.bh
>    } [ read <> read,
#^^^^ source.bh meta.record.bh
#    ^ source.bh meta.record.bh punctuation.brace.bh
#     ^ source.bh
#      ^ source.bh punctuation.bracket.bh
#       ^^^^^^ source.bh
#             ^^ source.bh keyword.operator.infix.bh
#               ^^^^^ source.bh
#                    ^ source.bh punctuation.separator.comma.bh
>        read < write,
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.infix.bh
#              ^^^^^^ source.bh
#                    ^ source.bh punctuation.separator.comma.bh
>        write << write ]
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.infix.bh
#                ^^^^^^^ source.bh
#                       ^ source.bh punctuation.bracket.bh
>
>--@ Make a register without any reset; initial simulation value is alternating 01 bits.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ module mkRegU(Reg#(a_type))
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Bits#(a_type, sizea));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>mkRegU :: (IsModule m c, Bits a sa) => m (Reg a)
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
>mkRegU = liftModule $
#^^^^^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
#        ^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.infix.bh
>  if valueOf sa == 0 then
#^^ source.bh
#  ^^ source.bh keyword.control.if.bh
#    ^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh constant.numeric.integral.decimal.bh
#                    ^ source.bh
#                     ^^^^ source.bh keyword.control.then.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>      interface
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        _read = unpack 0
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>        _write _ = return ()
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh support.constant.unit.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh support.constant.unit.bh punctuation.paren.bh
>  else
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>      _r :: VReg sa
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>      {-# hide #-}
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
#         ^^^^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
#               ^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
>      _r <- vMkRegU
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^ source.bh
>      let name = Valid (primGetModuleName _r)
#^^^^^^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>      let t = typeOf (_ :: a)
#^^^^^^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^ source.bh keyword.operator.double-colon.bh
#                          ^ source.bh
#                           ^ source.bh variable.other.generic-type.bh
#                            ^ source.bh punctuation.paren.bh
>      primSavePortType name "D_IN" t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^ source.bh string.quoted.double.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                  ^^^ source.bh
>      primSavePortType name "Q_OUT" t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^^^ source.bh
>      interface
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        _read = unpack _r.read
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                          ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        _write x = fromPrimAction (_r.write (pack x))
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                   ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                      ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                             ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh
>
>-- only for n>0
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>vMkRegA :: Bit n -> Module (VReg n)
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
>vMkRegA v =
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
>    module verilog "RegA" (("width",valueOf n), ("init",v)) "CLK" "RST" {
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
#          ^ source.bh
#           ^^^^^^^ source.bh keyword.control.verilog.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^ source.bh punctuation.separator.comma.bh
#                                    ^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.separator.comma.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                  ^^^^ source.bh string.quoted.double.bh
#                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^^^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                   ^^^ source.bh string.quoted.double.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh meta.record.bh punctuation.brace.bh
>        read = "Q_OUT"{reg};
#^^^^^^^^ source.bh meta.record.bh
#        ^^^^ source.bh meta.record.bh variable.other.member.bh
#            ^ source.bh meta.record.bh
#             ^ source.bh meta.record.bh keyword.operator.eq.bh
#              ^ source.bh meta.record.bh
#               ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^ source.bh meta.record.bh string.quoted.double.bh
#                     ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                       ^^^ source.bh meta.record.bh meta.record.bh variable.other.member.bh
#                          ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                           ^^ source.bh meta.record.bh
>        write = "D_IN"{reg} "EN";
#^^^^^^^^^^^^^^ source.bh meta.record.bh
#              ^ source.bh meta.record.bh keyword.operator.eq.bh
#               ^ source.bh meta.record.bh
#                ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^ source.bh meta.record.bh string.quoted.double.bh
#                     ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                       ^^^ source.bh meta.record.bh meta.record.bh variable.other.member.bh
#                          ^ source.bh meta.record.bh meta.record.bh punctuation.brace.bh
#                           ^ source.bh meta.record.bh
#                            ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^ source.bh meta.record.bh string.quoted.double.bh
#                               ^ source.bh meta.record.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^^ source.bh meta.record.bh
>    } [ read <> read,
#^^^^ source.bh meta.record.bh
#    ^ source.bh meta.record.bh punctuation.brace.bh
#     ^ source.bh
#      ^ source.bh punctuation.bracket.bh
#       ^^^^^^ source.bh
#             ^^ source.bh keyword.operator.infix.bh
#               ^^^^^ source.bh
#                    ^ source.bh punctuation.separator.comma.bh
>        read < write,
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.infix.bh
#              ^^^^^^ source.bh
#                    ^ source.bh punctuation.separator.comma.bh
>        write << write ]
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.infix.bh
#                ^^^^^^^ source.bh
#                       ^ source.bh punctuation.bracket.bh
>
>--@ Make a register with a given reset value.  Reset logic is asynchronous.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ module mkRegA#(a_type resetval)(Reg#(a_type))
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Bits#(a_type, sizea));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>mkRegA :: (IsModule m c, Bits a sa) => a -> m (Reg a)
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
>mkRegA v = liftModule $
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
>  if valueOf sa == 0 then
#^^ source.bh
#  ^^ source.bh keyword.control.if.bh
#    ^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh constant.numeric.integral.decimal.bh
#                    ^ source.bh
#                     ^^^^ source.bh keyword.control.then.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>      interface
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        _read = unpack 0
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>        _write _ = return ()
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh support.constant.unit.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh support.constant.unit.bh punctuation.paren.bh
>  else
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>      _r :: VReg sa
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>      {-# hide #-}
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
#         ^^^^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
#               ^^^ source.bh meta.function.type-declaration.bh meta.preprocessor.bh
>      _r <- vMkRegA (pack v)
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>      let name = Valid (primGetModuleName _r)
#^^^^^^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>      let t = typeOf (_ :: a)
#^^^^^^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^ source.bh keyword.operator.double-colon.bh
#                          ^ source.bh
#                           ^ source.bh variable.other.generic-type.bh
#                            ^ source.bh punctuation.paren.bh
>      primSavePortType name "D_IN" t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^ source.bh string.quoted.double.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                  ^^^ source.bh
>      primSavePortType name "Q_OUT" t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^^^ source.bh
>      interface
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        _read = unpack _r.read
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                          ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        _write x = fromPrimAction (_r.write (pack x))
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                   ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                      ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                             ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh
>
>--@ Treat a register as a register, i.e., suppress the normal behavior
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ where it implicitly represents the value that it contains.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Reg#(a_type) asReg(Reg#(a_type) r);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>asReg :: Reg a -> Reg a
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>asReg r = r
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^ source.bh
>
>-- this is handled in TCheck
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>asIfc :: a -> a
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>asIfc x = x
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^ source.bh
>
> --@ Read the value out of a register. Useful when managing
#^ source.bh comment.line.documentation.bh punctuation.whitespace.comment.leading.bh
# ^^^^ source.bh comment.line.documentation.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ arrays or lists of registers.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a_type readReg(Reg#(a_type) regIfc );
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>readReg :: Reg a -> a
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>readReg = (._read)
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^ source.bh keyword.operator.infix.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
>
>--@ Write a value into a register. Useful when managing
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ arrays or lists of registers.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Action writeReg( Reg#(a_atype) regIfc, a_type din );
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>writeReg :: Reg a -> a -> Action
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>writeReg regifc din = regifc._write din
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.infix.bh
#                             ^^^^^^^^^^^ source.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Rules}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ The \te{Rules} type is a built-in type in the compiler.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ \index{rules@\te{Rules} (type)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{addRules@\te{addRules} (\te{Rules} function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{rJoin@\te{rJoin} (\te{Rules} aggregation operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{rJoinDescendingUrgency@\te{rJoinDescendingUrgency} (\te{Rules} aggregation operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{rJoinPreempts@\te{rJoinPreempts} (\te{Rules} aggregation operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{emptyRules@\te{emptyRules} (\te{Rules} variable)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>--XX@ \index{preempts@\te{preempts} (\te{Rules} aggregation operator)}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--XX@ \index{+>@\te{+>} (\te{Rules} aggregation operator)}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>primitive type Rules :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>--@ The add rules function takes a variable of type rules and injects the
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ rules into the current module. This function may only be called in
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ a module scope.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function m#(void) addRules( Rules r );
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>--@ Symmetric union of two sets of rules.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Rules rJoin(Rules x, Rules y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>rJoin :: Rules -> Rules -> Rules
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoin x y = primJoinRules x y
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ Union of two sets of rules, with rules on the left getting
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ precedence.  That is, if a rule in set {\tt x} fires, then all
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ rules in set {\tt y} are prevented from firing.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Rules rJoinPreempts(Rules x, Rules y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>rJoinPreempts :: Rules -> Rules -> Rules
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoinPreempts x y = primJoinRulesPreempt x y
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>----- Following are kept for compatibility
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>preempts :: Rules -> Rules -> Rules
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>preempts = rJoinPreempts
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^ source.bh
>(<+) :: Rules -> Rules -> Rules
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#   ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(<+) = rJoinPreempts
#^ source.bh punctuation.paren.bh
# ^^ source.bh entity.name.function.infix.bh
#   ^ source.bh punctuation.paren.bh
#    ^ source.bh
#     ^ source.bh keyword.operator.eq.bh
#      ^^^^^^^^^^^^^^^ source.bh
>(<+>) :: Rules -> Rules -> Rules
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(<+>) = rJoin
#^ source.bh punctuation.paren.bh
# ^^^ source.bh entity.name.function.infix.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh
#      ^ source.bh keyword.operator.eq.bh
#       ^^^^^^^ source.bh
>
>
>--@ Union of two sets of rule, with rules in the left having higher
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ urgency.  That is, if some rules compete for resources, then
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ scheduling will select rules in set {\tt x} set before set {\tt
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ y}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function Rules rJoinDescendingUrgency( Rules x, Rules y ) ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>rJoinDescendingUrgency :: Rules -> Rules -> Rules
#^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoinDescendingUrgency x y = primJoinRulesUrgency x y
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>rJoinExecutionOrder :: Rules -> Rules -> Rules
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoinExecutionOrder x y = primJoinRulesExecutionOrder x y
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>rJoinMutuallyExclusive :: Rules -> Rules -> Rules
#^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoinMutuallyExclusive x y = primJoinRulesMutuallyExclusive x y
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>rJoinConflictFree :: Rules -> Rules -> Rules
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoinConflictFree x y = primJoinRulesConflictFree x y
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--rJoinManyME :: List (Rules) -> Rules
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--rJoinManyME x = primJoinManyRulesME x
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--XX@ Union of two sets of rules, with rules on the right getting precedence.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
> --XX@ \begin{libverbatim}
#^ source.bh punctuation.whitespace.comment.leading.bh
# ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#   ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--XX@ function Rules (+>)(Rules x, Rules y);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--XX@ \end{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>preempted :: Rules -> Rules -> Rules
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>preempted  x y = primJoinRulesPreempt y x
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>(+>) :: Rules -> Rules -> Rules
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#   ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(+>) x y = primJoinRulesPreempt y x
#^ source.bh punctuation.paren.bh
# ^^ source.bh entity.name.function.infix.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ When manipulating rules as first class objects, sometimes it is
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ useful to have an empty rules variable, which is defined as:
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Rules emtpyRules ;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>
>emptyRules :: Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>emptyRules = primNoRules
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^ source.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{String}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ The \te{String} type is a built-in type in the compiler.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ \index{String@\te{String} (type)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{strConcat@\te{strConcat} (\te{String} concatenation operator)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>primitive type String :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>--@ String concatenation.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--X@ function String (+++)(String x, String y);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--@ function String strConcat(String x, String y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(+++) :: String -> String -> String
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>(+++) x y = primStringConcat x y
#^ source.bh punctuation.paren.bh
# ^^^ source.bh entity.name.function.infix.bh
#    ^ source.bh punctuation.paren.bh
#     ^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>strConcat :: String -> String -> String
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>strConcat x y = primStringConcat x y
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primStringToInteger :: String -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Eq #(String);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Eq String
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (==) x y = primChr (primStringEQ x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
>    (/=) x y = primChr (primBNot (primStringEQ x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>instance Arith String
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (+) x y  = x +++ y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^ source.bh
#                 ^^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
>    (-) _ _  = error "The operator `-' is not defined for `String'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    negate _ = error "The function `negate' is not defined for `String'"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (*) _ _  = error "The operator `*' is not defined for `String'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (/) _ _  = error "The operator `/' is not defined for `String'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (%) _ _  = error "The operator `%' is not defined for `String'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    -- use default for these:
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --abs x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --signum x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --(**) b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --exp_e x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --logb b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log2 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log10 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance Literal String
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>    where
#^^^^ source.bh meta.declaration.instance.bh
#    ^^^^^ source.bh keyword.other.where.bh
>    fromInteger _ = error ( "Converting integers to strings is not supported.")
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                              ^ source.bh punctuation.paren.bh
>    inLiteralRange _ _ = False
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^^ source.bh constant.other.bh
>
>instance StringLiteral String
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromString s = s
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^ source.bh
>
>quote :: String -> String
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>quote s = "`" +++ s +++ "'"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^ source.bh
#          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#           ^ source.bh string.quoted.double.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#             ^ source.bh
#              ^^^ source.bh keyword.operator.infix.bh
#                 ^^^ source.bh
#                    ^^^ source.bh keyword.operator.infix.bh
#                       ^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^ source.bh string.quoted.double.bh
#                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>doubleQuote :: String -> String
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>doubleQuote s = "\"" +++ s +++ "\""
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^ source.bh string.quoted.double.bh constant.character.escape.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                    ^ source.bh
#                     ^^^ source.bh keyword.operator.infix.bh
#                        ^^^ source.bh
#                           ^^^ source.bh keyword.operator.infix.bh
#                              ^ source.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                ^^ source.bh string.quoted.double.bh constant.character.escape.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>primitive primStringSplit :: String -> Maybe (Char, String)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
>
>stringSplit :: String -> Maybe (Char, String)
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
>stringSplit = primStringSplit
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
>
>-- This will error if the string is empty
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>stringHead :: String -> Char
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stringHead s =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
>    case (primStringSplit s) of
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.case.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.control.of.bh
>      Just (c, _) -> c
#^^^^^^ source.bh
#      ^^^^ source.bh constant.other.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.bh
#                    ^^^ source.bh
>      Nothing -> let pos = getStringPosition s
#^^^^^^ source.bh
#      ^^^^^^^ source.bh constant.other.bh
#             ^ source.bh
#              ^^ source.bh keyword.operator.arrow.bh
#                ^ source.bh
#                 ^^^ source.bh keyword.other.let.bh
#                    ^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^^^^^^ source.bh
>                 in  primError pos $ "stringHead: empty string"
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.other.in.bh
#                   ^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- This will error if the string is empty
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>stringTail :: String -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stringTail s =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
>    case (primStringSplit s) of
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.case.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.control.of.bh
>      Just (_, r) -> r
#^^^^^^ source.bh
#      ^^^^ source.bh constant.other.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.bh
#                    ^^^ source.bh
>      Nothing -> let pos = getStringPosition s
#^^^^^^ source.bh
#      ^^^^^^^ source.bh constant.other.bh
#             ^ source.bh
#              ^^ source.bh keyword.operator.arrow.bh
#                ^ source.bh
#                 ^^^ source.bh keyword.other.let.bh
#                    ^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^^^^^^ source.bh
>                 in  primError pos $ "stringTail: empty string"
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.other.in.bh
#                   ^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>stringToCharList :: String -> List Char
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stringToCharList s =
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
>   case (primStringSplit s) of
#^^^ source.bh
#   ^^^^ source.bh keyword.control.case.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.control.of.bh
>     Nothing -> Nil
#^^^^^ source.bh
#     ^^^^^^^ source.bh constant.other.bh
#            ^ source.bh
#             ^^ source.bh keyword.operator.arrow.bh
#               ^ source.bh
#                ^^^ source.bh constant.other.bh
>     Just (c, r) -> Cons c (stringToCharList r)
#^^^^^ source.bh
#     ^^^^ source.bh constant.other.bh
#         ^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^ source.bh
#            ^ source.bh punctuation.separator.comma.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.bh
#                   ^ source.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>
>primitive primStringCons :: Char -> String -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>stringCons :: Char -> String -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stringCons = primStringCons
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>
>charListToString :: List Char -> String
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>charListToString Nil = ""
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^^ source.bh constant.other.bh
#                    ^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>charListToString (Cons c r) = stringCons c (charListToString r)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
>
>instance PrimSelectable String Char
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    primSelectFn pos str idx = primSelectFn pos (stringToCharList str) idx
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^^^^^ source.bh
>
>instance PrimUpdateable String Char
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    primUpdateFn pos str idx c =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>       -- XXX is this inefficient?
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       charListToString (primUpdateFn pos (stringToCharList str) idx c)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
>
>-- -----
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^ source.bh comment.line.double-dash.bh
>
>primitive type Char :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>instance Eq Char
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (==) x y = ((primCharOrd x) == (primCharOrd y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
>    (/=) x y = ((primCharOrd x) /= (primCharOrd y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>instance Ord Char
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (<)  x y = ((primCharOrd x) < (primCharOrd y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>    (<=) x y = ((primCharOrd x) <= (primCharOrd y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
>    (>)  x y = ((primCharOrd x) > (primCharOrd y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>    (>=) x y = ((primCharOrd x) >= (primCharOrd y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>instance StringLiteral Char
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fromString = primStringToChar
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primCharToString :: Char -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primStringToChar :: String -> Char
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>charToString :: Char -> String
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>charToString = primCharToString
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primCharOrd :: Char -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primCharChr :: Integer -> Char
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>charToInteger :: Char -> Integer
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>charToInteger = primCharOrd
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^ source.bh
>
>integerToChar :: Integer -> Char
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>integerToChar = primCharChr
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^ source.bh
>
>isSpace :: Char -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isSpace c =  c == ' '     ||
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^ source.bh string.quoted.single.bh
#                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                     ^^^^^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
>             c == '\t'    ||
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^^ source.bh string.quoted.single.bh constant.character.escape.bh
#                     ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                      ^^^^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
>             c == '\n'    ||
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^^ source.bh string.quoted.single.bh constant.character.escape.bh
#                     ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                      ^^^^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
>             c == '\r'    ||
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^^ source.bh string.quoted.single.bh constant.character.escape.bh
#                     ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                      ^^^^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
>             c == '\f'    ||
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^^ source.bh string.quoted.single.bh constant.character.escape.bh
#                     ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                      ^^^^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
>             c == '\v'
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^^ source.bh string.quoted.single.bh constant.character.escape.bh
#                     ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
>             -- should we include \xa0 (nbsp)? it's not ASCII...
#^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#             ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>isLower :: Char -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isLower c = (c >= 'a') && (c <= 'z')
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^ source.bh string.quoted.single.bh
#                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                 ^ source.bh string.quoted.single.bh
#                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                   ^ source.bh punctuation.paren.bh
>
>isUpper :: Char -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isUpper c = (c >= 'A') && (c <= 'Z')
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^ source.bh string.quoted.single.bh
#                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                 ^ source.bh string.quoted.single.bh
#                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                   ^ source.bh punctuation.paren.bh
>
>isAlpha :: Char -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isAlpha c = (isLower c) || (isUpper c)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>
>isAlphaNum :: Char -> Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isAlphaNum c = (isAlpha c) || (isDigit c)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
>
>isDigit :: Char -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isDigit c = (c >= '0') && (c <= '9')
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^ source.bh string.quoted.single.bh
#                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                 ^ source.bh string.quoted.single.bh
#                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                   ^ source.bh punctuation.paren.bh
>
>isOctDigit :: Char -> Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isOctDigit c = (c >= '0') && (c <= '7')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^ source.bh
#                     ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                      ^ source.bh string.quoted.single.bh
#                       ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                    ^ source.bh string.quoted.single.bh
#                                     ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                      ^ source.bh punctuation.paren.bh
>
>isHexDigit :: Char -> Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isHexDigit c = (isDigit c) || (c >= 'A' && c <= 'F')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh
#                                 ^^ source.bh keyword.operator.infix.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                     ^ source.bh string.quoted.single.bh
#                                      ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                       ^ source.bh
#                                        ^^ source.bh keyword.operator.infix.bh
#                                          ^^^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                                 ^ source.bh string.quoted.single.bh
#                                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                                   ^ source.bh punctuation.paren.bh
>                           || (c >= 'a' && c <= 'f')
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh
#                                 ^^ source.bh keyword.operator.infix.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                     ^ source.bh string.quoted.single.bh
#                                      ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                       ^ source.bh
#                                        ^^ source.bh keyword.operator.infix.bh
#                                          ^^^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                                 ^ source.bh string.quoted.single.bh
#                                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>toUpper :: Char -> Char
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>toUpper c = if (isLower c)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
>            then let n = primCharOrd c - primCharOrd 'a'
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.then.bh
#                ^ source.bh
#                 ^^^ source.bh keyword.other.let.bh
#                    ^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                                      ^ source.bh string.quoted.single.bh
#                                                       ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
>                 in  primCharChr (n + primCharOrd 'A')
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.other.in.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                                   ^ source.bh string.quoted.single.bh
#                                                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                                     ^ source.bh punctuation.paren.bh
>            else c
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^^^ source.bh
>
>toLower :: Char -> Char
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>toLower c = if (isUpper c)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
>            then let n = primCharOrd c - primCharOrd 'A'
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.then.bh
#                ^ source.bh
#                 ^^^ source.bh keyword.other.let.bh
#                    ^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                                      ^ source.bh string.quoted.single.bh
#                                                       ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
>                 in  primCharChr (n + primCharOrd 'a')
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.other.in.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                                   ^ source.bh string.quoted.single.bh
#                                                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                                     ^ source.bh punctuation.paren.bh
>            else c
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^^^ source.bh
>
>digitToInteger :: Char -> Integer
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>digitToInteger c =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
>    if (isDigit c)
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
>    then (primCharOrd c) - (primCharOrd '0')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                         ^ source.bh string.quoted.single.bh
#                                          ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                           ^ source.bh punctuation.paren.bh
>    else let pos = primGetEvalPosition c
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^^ source.bh keyword.other.let.bh
#            ^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>         in  primError pos $
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.other.in.bh
#           ^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.infix.bh
>                 "digitToInteger: not a digit: " +++ quote (charToString c)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                    ^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
>
>digitToBits :: Char -> Bit n
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>digitToBits c = fromInteger (digitToInteger c)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>
>integerToDigit :: Integer -> Char
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>integerToDigit n =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
>    if ((n >= 0) && (n <= 9))
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh punctuation.paren.bh
#         ^^ source.bh
#           ^^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh punctuation.paren.bh
>    then primCharChr (n + primCharOrd '0')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                       ^ source.bh string.quoted.single.bh
#                                        ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                         ^ source.bh punctuation.paren.bh
>    else let pos = primGetEvalPosition n
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^^ source.bh keyword.other.let.bh
#            ^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>         in  primError pos $
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.other.in.bh
#           ^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.infix.bh
>                 "integerToDigit: out of bounds (0-9): " +++ integerToString n
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                        ^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^^^^^^^^^^^^^^^^^^^ source.bh
>
>bitsToDigit :: Bit n -> Char
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>bitsToDigit n = integerToDigit (primUIntBitsToInteger n)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
>
>hexDigitToInteger :: Char -> Integer
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hexDigitToInteger c =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>    if (isDigit c)
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
>    then (primCharOrd c) - (primCharOrd '0')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                         ^ source.bh string.quoted.single.bh
#                                          ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                           ^ source.bh punctuation.paren.bh
>    else if (c >= 'A' && c <= 'F')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^ source.bh string.quoted.single.bh
#                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                               ^ source.bh string.quoted.single.bh
#                                ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                 ^ source.bh punctuation.paren.bh
>    then (primCharOrd c) - (primCharOrd 'A') + 10
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                         ^ source.bh string.quoted.single.bh
#                                          ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^ source.bh
#                                               ^^ source.bh constant.numeric.integral.decimal.bh
>    else if (c >= 'a' && c <= 'f')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                   ^ source.bh string.quoted.single.bh
#                    ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                               ^ source.bh string.quoted.single.bh
#                                ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                 ^ source.bh punctuation.paren.bh
>    then (primCharOrd c) - (primCharOrd 'a') + 10
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                         ^ source.bh string.quoted.single.bh
#                                          ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^ source.bh
#                                               ^^ source.bh constant.numeric.integral.decimal.bh
>    else let pos = primGetEvalPosition c
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^^ source.bh keyword.other.let.bh
#            ^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>         in  primError pos $
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.other.in.bh
#           ^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.infix.bh
>                 "hexDigitToInteger: not a hex digit: " +++ quote (charToString c)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                       ^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^^^^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^^^^^^^^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>
>hexDigitToBits :: Char -> Bit n
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>hexDigitToBits c = fromInteger (hexDigitToInteger c)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>integerToHexDigit :: Integer -> Char
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>integerToHexDigit n =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>    if ((n >= 0) && (n <= 9))
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh punctuation.paren.bh
#         ^^ source.bh
#           ^^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh punctuation.paren.bh
>    then primCharChr (n + primCharOrd '0')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                       ^ source.bh string.quoted.single.bh
#                                        ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                         ^ source.bh punctuation.paren.bh
>    else if ((n > 9) && (n <= 15))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^ source.bh punctuation.paren.bh
#              ^^ source.bh
#                ^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh constant.numeric.integral.decimal.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^^ source.bh keyword.operator.infix.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh punctuation.paren.bh
>    then primCharChr (n - 10 + primCharOrd 'a')
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^^ source.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh string.quoted.single.bh punctuation.definition.string.begin.bh
#                                            ^ source.bh string.quoted.single.bh
#                                             ^ source.bh string.quoted.single.bh punctuation.definition.string.end.bh
#                                              ^ source.bh punctuation.paren.bh
>    else let pos = primGetEvalPosition n
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^^ source.bh keyword.other.let.bh
#            ^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>         in  primError pos $
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.other.in.bh
#           ^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.infix.bh
>               "integerToHexDigit: out of bounds (0-9): " +++ integerToString n
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                         ^ source.bh
#                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                             ^^^^^^^^^^^^^^^^^^^ source.bh
>
>bitsToHexDigit :: Bit n -> Char
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>bitsToHexDigit n = integerToHexDigit (primUIntBitsToInteger n)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>primitive type Fmt :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primitive primFmtConcat :: Fmt -> Fmt -> Fmt
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>-- not really a foreign func but easiest way to leverage typechecking of $display
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- etc and support variable numbers of args
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>foreign $format            :: Bit 1 = "$format" -- really returns a Fmt!
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^^^^^^^^^ source.bh
#                           ^^ source.bh keyword.operator.double-colon.bh
#                             ^ source.bh
#                              ^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh constant.numeric.integral.decimal.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                  ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance Arith Fmt
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (+) x y  = primFmtConcat x y
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^ source.bh
>    (-) _ _  = error "The operator `-' is not defined for `Fmt'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    negate _ = error "The function `negate' is not defined for `Fmt'"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (*) _ _  = error "The operator `*' is not defined for `Fmt'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (/) _ _  = error "The operator `/' is not defined for `Fmt'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (%) _ _  = error "The operator `%' is not defined for `Fmt'"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    -- use default for these:
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --abs x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --signum x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --(**) b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --exp_e x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --logb b x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log2 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    --log10 x = ...
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance Literal Fmt
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^ source.bh meta.declaration.instance.bh storage.type.bh
>    where
#^^^^ source.bh meta.declaration.instance.bh
#    ^^^^^ source.bh keyword.other.where.bh
>    fromInteger _ = error ( "Converting integers to Fmts is not supported.")
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                           ^ source.bh punctuation.paren.bh
>    inLiteralRange _ _ = False
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^^ source.bh constant.other.bh
>
>-- ----------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Module}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ The \te{Module} type is a built-in type in the compiler.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ \index{Module@\te{Module} (type)}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>primitive type Module :: * -> *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Monad #(Module);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Monad Module
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    return x = primModuleReturn x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^^ source.bh
>    bind x f = primModuleBind x f
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance MonadFix #(Module);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     mfix =  primModuleFix;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endinstance
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance MonadFix Module
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    mfix = primModuleFix
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^ source.bh
>
>-- used to force the monad in a "module" expression to be a module,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- so that we fail fast for good error positions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>forceIsModule :: (IsModule m c) => m a -> m a
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>forceIsModule x = x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^ source.bh
>
>primitive primBuildModule :: Name__ -> Clock -> Reset -> Module a -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive type Name__ :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primitive primGetName :: a -> Name__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primGetParamName :: (a -> b) -> Name__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primMakeName :: String -> Position__ -> Name__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primJoinNames :: Name__ -> Name__ -> Name__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primExtendNameInteger :: Name__ -> Integer -> Name__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primExtendNameIndex :: (PrimIndex ix dx) => Name__ -> ix -> Name__
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primExtendNameIndex n i = if (isStaticIndex i) then
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^^ source.bh keyword.control.if.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^^^^ source.bh keyword.control.then.bh
>                             primExtendNameInteger n (toStaticIndex i)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
>                          else primError (primGetNamePosition n) "Instantiation with dynamic or undefined index"
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^^^ source.bh keyword.control.else.bh
#                              ^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- state-naming primitive
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- used to inject correct instance names
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- for an instantiated module
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primitive primStateName :: Name__ -> Module a -> Module a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primGetModuleName :: a -> Name__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>setStateName :: (IsModule m c) => Name__ -> m a -> m a
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                 ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>setStateName n = liftModuleOp (primStateName n)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>
>primitive type Attributes__ :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primitive primStateAttrib :: Attributes__ -> Module a -> Module a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>setStateAttrib :: (IsModule m c) => Attributes__ -> m a -> m a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>setStateAttrib as = liftModuleOp (primStateAttrib as)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>-- position primitives
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>primitive type Position__ :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>-- primitive primMakePosition :: String -> Integer -> Integer -> PositionnoPosition :: Position__
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>noPosition :: Position__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>noPosition = primNoPosition
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>
>primitive primNoPosition :: Position__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primPrintPosition :: Position__ -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>printPosition :: Position__ -> String
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>printPosition = primPrintPosition
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primGetStringPosition :: String -> Position__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>getStringPosition :: String -> Position__
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getStringPosition = primGetStringPosition
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primSetStringPosition :: String -> Position__ -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>setStringPosition :: String -> Position__ -> String
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>setStringPosition = primSetStringPosition
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primGetNamePosition :: Name__ -> Position__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primGetNameString :: Name__ -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primGetEvalPosition :: a -> Position__
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>getEvalPosition :: a -> Position__
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getEvalPosition = primGetEvalPosition
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- type primitives
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>primitive type Type :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>typeOf :: a -> Type
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>typeOf = primTypeOf
#^^^^^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
#        ^^^^^^^^^^^^ source.bh
>
>printType :: Type -> String
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>printType = primPrintType
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
>
>primitive primTypeOf :: a -> Type
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primPrintType :: Type -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primTypeEQ :: Type -> Type -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primIsIfcType :: Type -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>isInterfaceType :: Type -> Bool
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isInterfaceType = compose primChr primIsIfcType
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance Eq Type where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^^^ source.bh keyword.other.where.bh
>  (==) x y = primChr (primTypeEQ x y)
#^^ source.bh
#  ^ source.bh punctuation.paren.bh
#   ^^ source.bh entity.name.function.infix.bh
#     ^ source.bh punctuation.paren.bh
#      ^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>  (/=) x y = primChr (primBNot (primTypeEQ x y))
#^^ source.bh
#  ^ source.bh punctuation.paren.bh
#   ^^ source.bh entity.name.function.infix.bh
#     ^ source.bh punctuation.paren.bh
#      ^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh punctuation.paren.bh
>
>
>-- type-tracking primitives
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primitive primSavePortType :: Maybe Name__ -> String -> Type -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>
>
>-- ================================================================
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>--@ \subsection{Miscellaneous}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ Generate a compile-time error message and halt compilation.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{error@\te{error} (forced error)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a error(String s);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>error :: String -> a
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>error s = primError (primGetStringPosition s) s
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^ source.bh
>
>--@ Generate a compile-time error message and halt computation in a monad.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{warningM@\te{errorM} (forced error)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function m#(void) errorM(String s)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Monad#(m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>errorM :: (Monad m) => String -> m ()
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                    ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>errorM s = return (error s)
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>
>--@ When applied to a value {\tt v} of type {\tt a}, generate a compile-time
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ warning message and continue compilation, returning {\tt v}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{warning@\te{warning} (forced warning)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a warning(String s, a v);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>warning :: String -> a -> a
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>warning s a = primWarning (primGetStringPosition s) s a
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^ source.bh
>
>--@ Generate a compilation warning in a monad.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{warningM@\te{warningM} (forced warning)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function m#(void) warningM(String s)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Monad#(m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>warningM :: (Monad m) => String -> m ()
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                      ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>warningM s = do
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^ source.bh keyword.control.do.bh
>    -- Ravi added this trick, based on Haskell's traceM?
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    {-# hide #-}
#^^^^ source.bh
#    ^^^ source.bh meta.preprocessor.bh
#       ^^^^^^ source.bh meta.preprocessor.bh
#             ^^^ source.bh meta.preprocessor.bh
>    _msg <- return s
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^ source.bh
>    warning _msg (return ())
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                          ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                           ^ source.bh punctuation.paren.bh
>
>--@ When applied to a value {\tt v} of type {\tt a}, generate a compile-time
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ informative message and continue compilation, returning {\tt v}.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{message@\te{message} (compilation message)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a message(String s, a v);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>message :: String -> a -> a
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>message s a = primMessage (primGetStringPosition s) s a
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^ source.bh
>
>--@ Generate a compilation message in a monad.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{messageM@\te{messageM} (compilation message)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function m#(void) messageM(String s)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Monad#(m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>messageM :: (Monad m) => String -> m ()
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                      ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>messageM s = do
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^ source.bh keyword.control.do.bh
>    -- Ravi added this trick, based on Haskell's traceM?
#^^^^ source.bh punctuation.whitespace.comment.leading.bh
#    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    {-# hide #-}
#^^^^ source.bh
#    ^^^ source.bh meta.preprocessor.bh
#       ^^^^^^ source.bh meta.preprocessor.bh
#             ^^^ source.bh meta.preprocessor.bh
>    _msg <- return s
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^ source.bh
>    message _msg (return ())
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                          ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                           ^ source.bh punctuation.paren.bh
>
>-- Infix application. Basically for precedence-changing so that you can, for example,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- write         \verb|f $ g y|
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- instead of    \verb|f (g y)|.  Useful when \verb|g y| is a big expression
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and you don't want to parenthesize it.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- \index{$@\verb'$' (infix low-precedence ``apply'')}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- \begin{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- function b ($)(function b f(a x1), a x);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   return (f(x));
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- endfunction: $
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- \end{libverbatim}
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- # 2
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^ source.bh comment.line.double-dash.bh
>($) :: (a -> b) -> a -> b
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#  ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>($) f x = f x
#^ source.bh punctuation.paren.bh
# ^ source.bh entity.name.function.infix.bh
#  ^ source.bh punctuation.paren.bh
#   ^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^ source.bh
>
>--@ Function composition
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{$@\te{compose}, function composition}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function (function c (a x0)) compose(function c f(b x1), function b g(a x2));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   function c h(a x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@     return  f(g(x));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   endfunction: h
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   return (h);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endfunction
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>(∘) :: (b -> c) -> (a -> b) -> (a -> c)
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
# ^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#  ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
>(∘) f g = \ x -> f (g x)
#^ source.bh punctuation.paren.bh
# ^ source.bh entity.name.function.infix.bh
#  ^ source.bh punctuation.paren.bh
#   ^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^ source.bh
#          ^ source.bh keyword.operator.lambda.bh
#           ^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.bh
#                ^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
>
>--@ Identity function
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{id@\te{id}, the identity function}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a id(a x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   return (x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endfunction: id
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>id :: a -> a
#^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#  ^ source.bh meta.function.type-declaration.bh
#   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>id x = x
#^^^^^ source.bh
#     ^ source.bh keyword.operator.eq.bh
#      ^^^ source.bh
>
>--@ Make a function curried
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{curry@\te{curry} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>curry :: ((a, b) -> c) -> (a -> b -> c)
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
>curry f x y = f (x, y)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.separator.comma.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
>
>--@ Make a function uncurried
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{uncurry@\te{uncurry} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>uncurry :: (a -> b -> c) -> ((a, b) -> c)
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
>uncurry f (x, y) = f x y
#^^^^^^^^^^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^ source.bh
#            ^ source.bh punctuation.separator.comma.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^ source.bh
>
>--@ Constant function
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{const@\te{const} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a constFn(a x, b y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   return (x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endfunction: constFn
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>const :: a -> b -> a
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>const x _ = x
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
>constFn :: a -> b -> a
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>constFn = const
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^ source.bh
>
>--@ Argument flip
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{flip@\te{flip} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ # 1
#^^^^ source.bh comment.line.documentation.bh
#    ^^^ source.bh comment.line.documentation.bh
>flip :: (a -> b -> c) -> (b -> a -> c)
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
>flip f x y = f y x
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^ source.bh
>
>--@ Repeat a function while a predicate holds
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{while@\te{while} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a while(function Bool p(a x1), function a f(a x1), a x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   return (p(x) ? while(p, f, f(x)) : x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endfunction: while
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>while :: (a->Bool) -> (a->a) -> a -> a
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>while p f x = if p x then while p f (f x) else x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^^^^^ source.bh
#                     ^^^^ source.bh keyword.control.then.bh
#                         ^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^^^^ source.bh keyword.control.else.bh
#                                              ^^^ source.bh
>
>--@ Force the type of the first argument to be the same as the second.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{asTypeOf@\te{asTypeOf} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function a asTypeOf(a x, a y);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   return (x);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ endfunction: asTypeOf
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>asTypeOf :: a -> a -> a
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>asTypeOf x _ = x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^ source.bh
>
>--@ Any function can be lifted into a monadic version.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \index{liftM@\te{liftM} (Prelude function)}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ function m#(b) liftM(function b f(a x1), m#(a) x)
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@   provisos (Monad#(m));
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>liftM :: (Monad m) => (a -> b) -> (m a -> m b)
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
>liftM f x = x `bind` (\ _y -> return (f _y))
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#               ^^^^ source.bh keyword.operator.function.infix.bh
#                   ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh keyword.operator.lambda.bh
#                       ^^^^ source.bh
#                           ^^ source.bh keyword.operator.arrow.bh
#                             ^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>
>liftM2 :: (Monad m) => (a -> b -> c) -> (m a -> m b -> m c)
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
>liftM2 f ma mb = do
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.do.bh
>  {-# hide #-}
#^^ source.bh
#  ^^^ source.bh meta.preprocessor.bh
#     ^^^^^^ source.bh meta.preprocessor.bh
#           ^^^ source.bh meta.preprocessor.bh
>  _a <- ma
#^^^^^ source.bh
#     ^^ source.bh keyword.operator.arrow.left.bh
#       ^^^^ source.bh
>  {-# hide #-}
#^^ source.bh
#  ^^^ source.bh meta.preprocessor.bh
#     ^^^^^^ source.bh meta.preprocessor.bh
#           ^^^ source.bh meta.preprocessor.bh
>  _b <- mb
#^^^^^ source.bh
#     ^^ source.bh keyword.operator.arrow.left.bh
#       ^^^^ source.bh
>  return (f _a _b)
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
>
>bindM :: (Monad m) => m a -> (a -> m b) -> m b
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>bindM = bind
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.eq.bh
#       ^^^^^^ source.bh
>
>---
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^ source.bh comment.line.double-dash.bh
>
>primitive type Clock :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>{-
#^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
>struct Clock =
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>  osc  :: Bit 1
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>  gate :: Bool
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
> -- deriving(Bits)
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>-}
#^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
>
>primitive type Power :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>{-
#^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
>struct Power =
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>  switch :: Bool
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
> deriving(Bits)
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>-}
#^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
>
>primitive type Reset :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>{-
#^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
>struct Reset =
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>  rstn :: Bit 1
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
> deriving (Bits)
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
>-}
#^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
>
>primitive type Inout  :: * -> *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type Inout_ :: # -> *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primInoutCast0   :: (Bits a sa) => Inout   a -> Inout_ sa
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^^^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primInoutCast0   = primInoutCast
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^ source.bh
>primInoutUncast0 :: (Bits a sa) => Inout_ sa -> Inout   a
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^^^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primInoutUncast0 = primInoutUncast
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primInoutCast   :: {- (Bits a sa) => -} Inout a -> Inout_ sa
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^^^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
#                               ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
#                                               ^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primInoutUncast :: {-(Bits a sa) => -} Inout_ sa -> Inout a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
#                               ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.block.bh
#                                              ^^ source.bh meta.function.type-declaration.bh comment.block.bh punctuation.definition.comment.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>exposeCurrentClock :: (IsModule m c) => m Clock
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>exposeCurrentClock = liftModule primCurrentClock
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primCurrentClock :: Module Clock
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>exposeCurrentReset :: (IsModule m c) => m Reset
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>exposeCurrentReset = liftModule primCurrentReset
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primCurrentReset :: Module Reset
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primModuleClock :: Clock -> Module a -> Module a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primModuleReset :: Reset -> Module a -> Module a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>-- primitive primModulePower :: Power -> Module a -> Module a
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>primSpecialWires :: (Maybe Clock) -> (Maybe Reset) -> (Maybe Power) ->
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
>                    (Module a) -> (Module a)
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
>primSpecialWires _mc _mr _mp _m =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>  letseq _m' = case _mc of
#^^ source.bh
#  ^^^^^^ source.bh keyword.other.letseq.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^ source.bh keyword.control.case.bh
#                   ^^^^^ source.bh
#                        ^^ source.bh keyword.control.of.bh
>                Nothing  -> _m
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^^ source.bh keyword.operator.arrow.bh
#                           ^^^^ source.bh
>                (Just _c) -> primModuleClock _c _m
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^ source.bh keyword.operator.arrow.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>  in letseq _m'' = case _mr of
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^^^^^ source.bh keyword.other.letseq.bh
#           ^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^ source.bh keyword.control.case.bh
#                       ^^^^^ source.bh
#                            ^^ source.bh keyword.control.of.bh
>                    Nothing  -> _m'
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^^^^^^ source.bh constant.other.bh
#                           ^^ source.bh
#                             ^^ source.bh keyword.operator.arrow.bh
#                               ^^^^^ source.bh
>                    (Just _r) -> primModuleReset _r _m'
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^ source.bh keyword.operator.arrow.bh
#                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>     in case _mp of
#^^^^^ source.bh
#     ^^ source.bh keyword.other.in.bh
#       ^ source.bh
#        ^^^^ source.bh keyword.control.case.bh
#            ^^^^^ source.bh
#                 ^^ source.bh keyword.control.of.bh
>          Nothing  -> _m''
#^^^^^^^^^^ source.bh
#          ^^^^^^^ source.bh constant.other.bh
#                 ^^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^^^^^^ source.bh
>          (Just _) -> error "powered_by not yet implemented"
#^^^^^^^^^^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^^ source.bh constant.other.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>changeSpecialWires :: (IsModule m c) => (Maybe Clock) -> (Maybe Reset) -> (Maybe Power) -> m a -> m a
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh
#                                                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>changeSpecialWires _mc _mr _mp = liftModuleOp (primSpecialWires _mc _mr _mp)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
>
>primitive primSameFamilyClock  :: Clock -> Clock -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primIsAncestorClock  :: Clock -> Clock -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primClockEQ          :: Clock -> Clock -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primClockOf  :: a -> Clock
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primClocksOf :: (List Clock) -> (Clock -> List Clock -> List Clock) -> a -> List Clock
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>clockOf :: a -> Clock
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>clockOf = primClockOf
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^ source.bh
>
>clocksOf :: a -> List Clock
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>clocksOf = primClocksOf nil cons
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>sameFamily :: Clock -> Clock -> Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>sameFamily x y = primChr (primSameFamilyClock x y)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>
>isAncestor :: Clock -> Clock -> Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isAncestor x y = primChr (primIsAncestorClock x y)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>
>primitive primNoClock :: Clock
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>noClock :: Clock
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>noClock = primNoClock
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^ source.bh
>
>instance Eq Clock
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    (==) x y = primChr (primClockEQ x y)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>    (/=) x y = primChr (primBNot (primClockEQ x y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>
>primitive primNoReset  :: Reset
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primResetEQ  :: Reset -> Reset -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primResetOf  :: a -> Reset
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primResetsOf :: (List Reset) -> (Reset -> List Reset -> List Reset) -> a -> List Reset
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>noReset :: Reset
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>noReset = primNoReset
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^ source.bh
>
>resetOf :: a -> Reset
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>resetOf = primResetOf
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^ source.bh
>
>resetsOf :: a -> List Reset
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>resetsOf = primResetsOf nil cons
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance Eq Reset
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^ source.bh meta.declaration.instance.bh storage.type.bh
#           ^ source.bh meta.declaration.instance.bh
#            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>   (==) x y = primChr (primResetEQ x y)
#^^^ source.bh
#   ^ source.bh punctuation.paren.bh
#    ^^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>   (/=) x y = primChr (primBNot (primResetEQ x y))
#^^^ source.bh
#   ^ source.bh punctuation.paren.bh
#    ^^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>
>primitive type SizeOf :: * -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primitive type TAdd :: # -> # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TSub :: # -> # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TMul :: # -> # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TDiv :: # -> # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TLog :: # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TExp :: # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TMax :: # -> # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>primitive type TMin :: # -> # -> #
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>------------------
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>--- Bit operations
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>primitive primAdd :: Bit n -> Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primSub :: Bit n -> Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primAnd :: Bit n -> Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primOr  :: Bit n -> Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primXor :: Bit n -> Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primMul :: (Add k n m) => Bit k -> Bit n -> Bit m
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>
>primitive primSL  :: Bit n -> Bit k -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primSRL :: Bit n -> Bit k -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primSRA :: Bit n -> Bit k -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primQuot :: Bit k -> Bit n -> Bit k
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primRem  :: Bit k -> Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primInv :: Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primNeg :: Bit n -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primEQ  :: Bit n -> Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primEQ3 :: Bit n -> Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primULE :: Bit n -> Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primULT :: Bit n -> Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primSLE :: Bit n -> Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primSLT :: Bit n -> Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primIf :: Bit 1 -> a -> a -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primZeroExt :: (Add k n m) => Bit n -> Bit m
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primSignExt :: (Add k n m) => Bit n -> Bit m
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primTrunc :: (Add k m n) => Bit n -> Bit m
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primBNot :: Bit 1-> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primBAnd :: Bit 1 -> Bit 1 -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primBOr :: Bit 1 -> Bit 1 -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primError   :: Position__ -> String -> a                -- compile time error
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^^^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                                    ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primGenerateError :: Integer -> Position__ -> String -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- check for clock-domain crossing errors in the argument
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primChkClockDomain :: Name__ -> String -> Bit n -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>
>chkClockDomain :: (Bits a sa, IsModule m c) => Name__ -> String -> a -> m ()
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>chkClockDomain name object val = liftModule (primChkClockDomain name object (pack val))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^^^^^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh punctuation.paren.bh
>
>primitive primMessage :: Position__ -> String -> a -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primWarning :: Position__ -> String -> a -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primPoisonedDef :: Name__ -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primDynamicError :: String -> a        -- run time (C) error
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^^^^^^^^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                   ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>-- Beware of negative numbers when using this function!
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primIntegerToBit :: Integer -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primIntegerToUIntBits :: Integer -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primIntegerToIntBits  :: Integer -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- This is a really nasty primitive; it shouldn't be here.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primBitToInteger :: Bit n -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>-- checks if an integer is a compile-time constant or not
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primIsStaticInteger :: Integer -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>isStaticInteger :: Integer -> Bool
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isStaticInteger = compose primChr primIsStaticInteger
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- checks if a bit vector is a compile-time constant or not
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primitive primAreStaticBits :: Bit n -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>areStaticBits :: Bit n -> Bool
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>areStaticBits = compose primChr primAreStaticBits
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- these are elaboration-time-only conversions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- primAreStaticBits should be called first
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primitive primUIntBitsToInteger :: Bit n -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntBitsToInteger  :: Bit n -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primIntegerToString :: Integer -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primConcat :: (Add n m k) => Bit n -> Bit m -> Bit k
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primSplit :: (Add n m k) => Bit k -> PrimPair (Bit n) (Bit m)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
>
>-----
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>interface PrimPair a b = { fst :: a; snd :: b } deriving (Eq, Bits, Bounded, DefaultValue)
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.PrimPair a b .bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                           ^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                               ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                   ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                     ^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                         ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh keyword.operator.double-colon.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                                               ^ source.bh meta.declaration.interface.algebraic.bh
#                                                ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                                                        ^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh
#                                                         ^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                                                          ^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh storage.type.bh
#                                                            ^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh
#                                                              ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh storage.type.bh
#                                                                  ^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh
#                                                                    ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh storage.type.bh
#                                                                           ^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh
#                                                                             ^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh storage.type.bh
#                                                                                         ^ source.bh meta.declaration.interface.algebraic.bh meta.deriving.bh punctuation.paren.bh
>
>-- Ord is not derivable in Bluespec, but the others are.
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>instance (Ord a, Ord b, Eq a) => Ord (a, b) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
>    (<)  (a, b) (a', b')  =  a < a' || a == a' && b <  b'
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^^^ source.bh
#                                                    ^ source.bh keyword.operator.infix.bh
#                                                     ^^^^^ source.bh
>    (<=) (a, b) (a', b')  =  a < a' || a == a' && b <= b'
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^^^ source.bh
>    (>)  (a, b) (a', b')  =  a > a' || a == a' && b >  b'
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^^^ source.bh
#                                                    ^ source.bh keyword.operator.infix.bh
#                                                     ^^^^^ source.bh
>    (>=) (a, b) (a', b')  =  a > a' || a == a' && b >= b'
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^^^ source.bh
>
>-----
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^ source.bh comment.line.double-dash.bh
>
>primitive primOrd :: a -> Bit n
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primChr :: Bit n -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- The value n, i.e., the size of the bit vector
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primValueOf :: Bit n -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>-- The string value of a string type (wrapped in a proxy type)
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>data (StringProxy :: $ -> *) s = StringProxy
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(StringProxy :: $ -> *) s .bh
#                              ^ source.bh meta.declaration.data.algebraic.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>primitive primStringOf :: StringProxy s -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>-- add an implicit condition to an expression
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primWhen :: Bit 1 -> a -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- internal primitive type for tracking implicit conditions
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive type Pred__ :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>_when_ :: Bool -> a -> a
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>_when_ b = primWhen (primOrd b)
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>
>-- x[h:l], n >= k
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primExtract :: (PrimIndex ix dx) => Position__ -> Bit n -> ix -> ix -> Bit k
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primExtract pos bs i1 i2 =
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
>  let i1' = toStaticIndex i1
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
>      i2' = toStaticIndex i2
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
>      range = i1' - i2' + 1
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
>      range_msg = "Bit range [" +++ integerToString i1' +++ ":" +++
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                   ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^^^ source.bh keyword.operator.infix.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                               ^ source.bh
#                                                                ^^^ source.bh keyword.operator.infix.bh
>                  integerToString i2' +++ "]"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^^^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>  in if (isStaticIndex i1) &&
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
>        (i1' < 0 || i1' >= valueOf n)
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh
#             ^ source.bh keyword.operator.infix.bh
#              ^ source.bh
#               ^ source.bh constant.numeric.integral.decimal.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^^^^^ source.bh
#                        ^^ source.bh keyword.operator.infix.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>     then
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.then.bh
>        -- XXX consider using PrimGenerateError
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        primError pos $ listMessage i1' "bit extraction - high index"
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else if (isStaticIndex i2) &&
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
>             (i2' < 0 || i2' >= valueOf n)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>     then
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.then.bh
>        -- XXX consider using PrimGenerateError
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        primError pos $ listMessage i2' "bit extraction - low index"
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else if (isStaticIndex i1) && (isStaticIndex i2) && (i1' < i2')
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^ source.bh
#                                                              ^ source.bh keyword.operator.infix.bh
#                                                               ^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>     then
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.then.bh
>        let zero_msg     = range_msg +++ " selects zero bits"
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^ source.bh
#                                     ^^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>            negative_msg = range_msg +++ " selects a negative number of bits"
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^ source.bh
#                                     ^^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>        in if (i1' == i2' - 1) then
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh
#                   ^^ source.bh keyword.operator.infix.bh
#                     ^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.bh
#                           ^ source.bh
#                            ^ source.bh constant.numeric.integral.decimal.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^^^^ source.bh keyword.control.then.bh
>              -- XXX consider using PrimGenerateError
#^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#              ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>              primError pos zero_msg
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>           else
#^^^^^^^^^^^ source.bh
#           ^^^^ source.bh keyword.control.else.bh
>              -- XXX consider using PrimGenerateError
#^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#              ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>              primError pos negative_msg
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>     else if (isStaticIndex i1) && (isStaticIndex i2) &&
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
>             (range > valueOf k)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh
#                    ^ source.bh keyword.operator.infix.bh
#                     ^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>     then
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.then.bh
>        let msg = range_msg +++ " selects " +++ integerToString range +++
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^ source.bh
#                            ^^^ source.bh keyword.operator.infix.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh
#                                            ^^^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                      ^^^ source.bh keyword.operator.infix.bh
>                  " bits but only " +++ integerToString (valueOf k) +++
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                   ^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^ source.bh
#                                    ^^^ source.bh keyword.operator.infix.bh
#                                       ^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh
#                                                                    ^^^ source.bh keyword.operator.infix.bh
>                  " bits are expected from the result"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>        in  -- XXX consider using PrimGenerateError (see G0053)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^ source.bh
#            ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>            primError pos msg
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>     else
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
>        -- XXX Update the position of this extraction with "pos"
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        primExtractInternal bs (toDynamicIndex i1) (toDynamicIndex i2)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
>
>primitive primExtractInternal :: Bit n -> Bit l -> Bit l -> Bit k
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>------------------
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>--- Misc
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>primitive primStringConcat :: String -> String -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primStringEQ :: String -> String -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primJoinRules :: Rules -> Rules -> Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>-- first argument gets higher priority
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primJoinRulesPreempt :: Rules -> Rules -> Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primJoinRulesUrgency :: Rules -> Rules -> Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primJoinRulesExecutionOrder :: Rules -> Rules -> Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primJoinRulesMutuallyExclusive :: Rules -> Rules -> Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primJoinRulesConflictFree :: Rules -> Rules -> Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primNoRules :: Rules
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primModuleBind :: Module a -> (a -> Module b) -> Module b
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primModuleReturn :: a -> Module a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>--- PrimUnit
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>struct PrimUnit = { }
#^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.struct.bh
#      ^ source.bh meta.declaration.struct.algebraic.bh
#       ^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.PrimUnit .bh
#               ^ source.bh meta.declaration.struct.algebraic.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.struct.algebraic.bh
#                  ^ source.bh meta.declaration.struct.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                   ^ source.bh meta.declaration.struct.algebraic.bh meta.record.definition.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>        deriving (Eq, Bits, Bounded, DefaultValue)
#^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh
#        ^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh
#                 ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                  ^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh storage.type.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh
#                      ^^^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh storage.type.bh
#                          ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh
#                            ^^^^^^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh storage.type.bh
#                                   ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh
#                                     ^^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh storage.type.bh
#                                                 ^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh
>
>--- Integer
#^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>
>primitive primIntegerAdd :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerSub :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerNeg :: Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerMul :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerDiv :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerMod :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerQuot :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerRem :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerExp :: Integer -> Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerLog2 :: Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primIntegerLog10 :: Integer -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primIntegerEQ  :: Integer -> Integer -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primIntegerLE  :: Integer -> Integer -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primIntegerLT  :: Integer -> Integer -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>--- Real
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>primitive primIntegerToReal :: Integer -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primRealEQ :: Real -> Real -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primRealLE :: Real -> Real -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primRealLT :: Real -> Real -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>primitive primRealToString :: Real -> String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primRealAdd :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealSub :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealNeg :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealMul :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealDiv :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealAbs :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealSignum :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealExpE :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealPow :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealLogE :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealLogBase :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealLog2 :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealLog10 :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primRealToBits :: Real -> Bit 64
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primBitsToReal :: Bit 64 -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primRealSin :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealCos :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealTan :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealSinH :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealCosH :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealTanH :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealASin :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealACos :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealATan :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealASinH :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealACosH :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealATanH :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealATan2 :: Real -> Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primRealSqrt :: Real -> Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primRealTrunc :: Real -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealCeil  :: Real -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealFloor :: Real -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealRound :: Real -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primSplitReal :: Real -> PrimPair Integer Real
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primDecodeReal :: Real -> PrimPair (Bit 1) (PrimPair Integer Integer)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                      ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh
>primitive primRealToDigits :: Integer -> Real -> PrimPair (List Integer) Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primRealIsInfinite :: Real -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>primitive primRealIsNegativeZero :: Real -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>------------------
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>--- Misc
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>-- XXX Minor inefficiency:
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- This doesn't inline properly in ISimplify because `bind' isn't known.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>bind_ :: (Monad m) => m a -> m b -> m b
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>bind_ x y = x `bind` \ _ -> y
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#               ^^^^ source.bh keyword.operator.function.infix.bh
#                   ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#                    ^ source.bh
#                     ^ source.bh keyword.operator.lambda.bh
#                      ^^^ source.bh
#                         ^^ source.bh keyword.operator.arrow.bh
#                           ^^^ source.bh
>
>primitive primExpIf :: PrimAction -> PrimAction
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>splitIf :: Bool -> Action -> Action -> Action
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>splitIf c t e = fromPrimAction (primExpIf (if c then toPrimAction t else toPrimAction e))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^ source.bh keyword.control.if.bh
#                                             ^^^ source.bh
#                                                ^^^^ source.bh keyword.control.then.bh
#                                                    ^^^^^^^^^^^^^^^^ source.bh
#                                                                    ^^^^ source.bh keyword.control.else.bh
#                                                                        ^^^^^^^^^^^^^^^ source.bh
#                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                        ^ source.bh punctuation.paren.bh
>
>primitive primNoExpIf :: PrimAction -> PrimAction
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>nosplitIf :: Bool -> Action -> Action -> Action
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nosplitIf c t e = fromPrimAction (primNoExpIf (if c then toPrimAction t else toPrimAction e))
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^ source.bh keyword.control.if.bh
#                                                 ^^^ source.bh
#                                                    ^^^^ source.bh keyword.control.then.bh
#                                                        ^^^^^^^^^^^^^^^^ source.bh
#                                                                        ^^^^ source.bh keyword.control.else.bh
#                                                                            ^^^^^^^^^^^^^^^ source.bh
#                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                            ^ source.bh punctuation.paren.bh
>
>primitive primNosplitDeep :: PrimAction -> PrimAction
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>nosplitDeepAV :: ActionValue a -> ActionValue a
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>nosplitDeepAV (ActionValue av) = ActionValue (\aw ->
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^ source.bh
#                                 ^^^^^^^^^^^ source.bh constant.other.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh keyword.operator.lambda.bh
#                                               ^^^ source.bh
#                                                  ^^ source.bh keyword.operator.arrow.bh
>  letseq av' = av aw
#^^ source.bh
#  ^^^^^^ source.bh keyword.other.letseq.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
>         val = av'.avValue
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^ source.bh
>         act = av'.avAction
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^^ source.bh
>         aw' = av'.avWorld
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^ source.bh
>  in AVStruct { avValue = val; avAction = primNosplitDeep act; avWorld = aw' })
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^^^^^^^ source.bh constant.other.bh
#             ^ source.bh
#              ^ source.bh meta.record.bh punctuation.brace.bh
#               ^ source.bh meta.record.bh
#                ^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                       ^ source.bh meta.record.bh
#                        ^ source.bh meta.record.bh keyword.operator.eq.bh
#                         ^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                        ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                        ^^^^^ source.bh meta.record.bh
#                                                                             ^ source.bh meta.record.bh punctuation.brace.bh
#                                                                              ^ source.bh punctuation.paren.bh
>
>nosplitDeepIf :: Bool -> Action -> Action -> Action
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nosplitDeepIf c t e =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>        fromPrimAction (primNosplitDeep
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^ source.bh
>        (if c then toPrimAction t else toPrimAction e))
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^^^^^^^^^^^^^^^^ source.bh
#                                  ^^^^ source.bh keyword.control.else.bh
#                                      ^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
>
>primitive primSplitDeep :: PrimAction -> PrimAction
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>splitDeepAV :: ActionValue a -> ActionValue a
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>splitDeepAV (ActionValue av) = ActionValue (\aw ->
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^ source.bh constant.other.bh
#                        ^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^^^^^^^^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh keyword.operator.lambda.bh
#                                             ^^^ source.bh
#                                                ^^ source.bh keyword.operator.arrow.bh
>  letseq av' = av aw
#^^ source.bh
#  ^^^^^^ source.bh keyword.other.letseq.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
>         val = av'.avValue
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^ source.bh
>         act = av'.avAction
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^^ source.bh
>         aw' = av'.avWorld
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^ source.bh
>  in AVStruct { avValue = val; avAction = primSplitDeep act; avWorld = aw' })
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^^^^^^^ source.bh constant.other.bh
#             ^ source.bh
#              ^ source.bh meta.record.bh punctuation.brace.bh
#               ^ source.bh meta.record.bh
#                ^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                       ^ source.bh meta.record.bh
#                        ^ source.bh meta.record.bh keyword.operator.eq.bh
#                         ^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                        ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                     ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                      ^^^^^ source.bh meta.record.bh
#                                                                           ^ source.bh meta.record.bh punctuation.brace.bh
#                                                                            ^ source.bh punctuation.paren.bh
>
>splitDeepIf :: Bool -> Action -> Action -> Action
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>splitDeepIf c t e =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
>        fromPrimAction (primSplitDeep
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^ source.bh
>        (if c then toPrimAction t else toPrimAction e))
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^^^^^^^^^^^^^^^^ source.bh
#                                  ^^^^ source.bh keyword.control.else.bh
#                                      ^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
>
>primitive primModuleFix :: (a -> Module a) -> Module a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>moduleFix :: (IsModule m c) => (a -> m a) -> m a
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>moduleFix = mfix
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^ source.bh
>
>primFix :: (a -> a) -> a
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primFix f = f (primFix f)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- XXX experimental primitive
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- extract the implicit condition of an arbitrary expression
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primitive primImpCondOf:: a -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>impCondOf :: a -> Bool
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>impCondOf = unpack ∘ primImpCondOf
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.infix.bh
#                    ^^^^^^^^^^^^^^^ source.bh
>
>-----------------------------------------------------------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- System tasks
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- XXX: Well-intentioned lies
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>foreign $display :: PrimAction = "$display"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^ source.bh
#                    ^^^^^^^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^^^^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $displayb :: PrimAction = "$displayb"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.double-colon.bh
#                    ^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $displayh :: PrimAction = "$displayh"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.double-colon.bh
#                    ^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $displayo :: PrimAction = "$displayo"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.double-colon.bh
#                    ^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $write :: PrimAction = "$write"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh
#               ^^ source.bh keyword.operator.double-colon.bh
#                 ^ source.bh
#                  ^^^^^^^^^^ source.bh storage.type.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                ^^^^^^ source.bh string.quoted.double.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $writeb :: PrimAction = "$writeb"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.double-colon.bh
#                  ^ source.bh
#                   ^^^^^^^^^^ source.bh storage.type.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $writeh :: PrimAction = "$writeh"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.double-colon.bh
#                  ^ source.bh
#                   ^^^^^^^^^^ source.bh storage.type.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $writeo :: PrimAction = "$writeo"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.double-colon.bh
#                  ^ source.bh
#                   ^^^^^^^^^^ source.bh storage.type.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $error :: PrimAction = "$error"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh
#               ^^ source.bh keyword.operator.double-colon.bh
#                 ^ source.bh
#                  ^^^^^^^^^^ source.bh storage.type.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                ^^^^^^ source.bh string.quoted.double.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $warning :: PrimAction = "$warning"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^ source.bh
#                    ^^^^^^^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^^^^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $info :: PrimAction = "$info"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^ source.bh
#              ^^ source.bh keyword.operator.double-colon.bh
#                ^ source.bh
#                 ^^^^^^^^^^ source.bh storage.type.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^ source.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                               ^^^^^ source.bh string.quoted.double.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fatal :: PrimAction = "$fatal"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh
#               ^^ source.bh keyword.operator.double-colon.bh
#                 ^ source.bh
#                  ^^^^^^^^^^ source.bh storage.type.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                ^^^^^^ source.bh string.quoted.double.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $SVA :: PrimAction = "$sva"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^ source.bh constant.other.bh
#            ^ source.bh
#             ^^ source.bh keyword.operator.double-colon.bh
#               ^ source.bh
#                ^^^^^^^^^^ source.bh storage.type.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                              ^^^^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>data SvaParam = SvaBool Bool | SvaNumber (UInt 32) deriving (Bits)
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.SvaParam .bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh
#                               ^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                         ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                          ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                              ^ source.bh meta.declaration.data.algebraic.bh
#                                               ^^ source.bh meta.declaration.data.algebraic.bh constant.numeric.integral.decimal.bh
#                                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                                   ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                                                           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                                            ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                                                             ^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                                                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
>
>displayHex :: (Bits a sa) => a -> Action
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>displayHex x = $display "0x%h" x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.prefix.dollar.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^ source.bh string.quoted.double.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                              ^^^ source.bh
>
>displayDec :: (Bits a sa) => a -> Action
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>displayDec x = $display "%0d" x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.prefix.dollar.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                             ^^^ source.bh
>
>displayOct :: (Bits a sa) => a -> Action
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>displayOct x = $display "0o%o" x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.prefix.dollar.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^ source.bh string.quoted.double.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                              ^^^ source.bh
>
>displayBin :: (Bits a sa) => a -> Action
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>displayBin x = $display "0b%b" x
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.prefix.dollar.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^ source.bh string.quoted.double.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                              ^^^ source.bh
>
>$finish :: Bit 2 -> Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^ source.bh
#        ^^ source.bh keyword.operator.double-colon.bh
#          ^ source.bh
#           ^^^ source.bh storage.type.bh
#              ^ source.bh
#               ^ source.bh constant.numeric.integral.decimal.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.bh
#                   ^ source.bh
#                    ^^^^^^ source.bh storage.type.bh
>$finish code = fromPrimAction (_finish_ (zeroExtend code))
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>
>$stop :: Bit 2 -> Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^ source.bh
#      ^^ source.bh keyword.operator.double-colon.bh
#        ^ source.bh
#         ^^^ source.bh storage.type.bh
#            ^ source.bh
#             ^ source.bh constant.numeric.integral.decimal.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.bh
#                 ^ source.bh
#                  ^^^^^^ source.bh storage.type.bh
>$stop code = fromPrimAction (_stop_ (zeroExtend code))
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>foreign _finish_ :: Bit 32 -> PrimAction = "$finish"
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^ source.bh
#                    ^^^ source.bh storage.type.bh
#                       ^ source.bh
#                        ^^ source.bh constant.numeric.integral.decimal.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.arrow.bh
#                             ^ source.bh
#                              ^^^^^^^^^^ source.bh storage.type.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^ source.bh string.quoted.double.bh
#                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign _stop_ :: Bit 32 -> PrimAction = "$stop"
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.double-colon.bh
#                 ^ source.bh
#                  ^^^ source.bh storage.type.bh
#                     ^ source.bh
#                      ^^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.bh
#                           ^ source.bh
#                            ^^^^^^^^^^ source.bh storage.type.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumpon :: Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^ source.bh
#        ^^ source.bh keyword.operator.double-colon.bh
#          ^ source.bh
#           ^^^^^^ source.bh storage.type.bh
>$dumpon = fromPrimAction (__dumpon__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>foreign __dumpon__ :: PrimAction = "$dumpon"
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^ source.bh
#                      ^^^^^^^^^^ source.bh storage.type.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                    ^^^^^^^ source.bh string.quoted.double.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumpoff :: Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.double-colon.bh
#           ^ source.bh
#            ^^^^^^ source.bh storage.type.bh
>$dumpoff = fromPrimAction (__dumpoff__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>foreign __dumpoff__ :: PrimAction = "$dumpoff"
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.double-colon.bh
#                      ^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumpvars :: Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.double-colon.bh
#            ^ source.bh
#             ^^^^^^ source.bh storage.type.bh
>$dumpvars = fromPrimAction (__dumpvars__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
>foreign __dumpvars__ :: PrimAction = "$dumpvars"
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^^ source.bh keyword.operator.double-colon.bh
#                       ^ source.bh
#                        ^^^^^^^^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^^^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumpall :: Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.double-colon.bh
#           ^ source.bh
#            ^^^^^^ source.bh storage.type.bh
>$dumpall = fromPrimAction (__dumpall__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>foreign __dumpall__ :: PrimAction = "$dumpall"
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.double-colon.bh
#                      ^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumpflush :: Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.double-colon.bh
#             ^ source.bh
#              ^^^^^^ source.bh storage.type.bh
>$dumpflush = fromPrimAction (__dumpflush__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>foreign __dumpflush__ :: PrimAction = "$dumpflush"
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^ source.bh keyword.operator.double-colon.bh
#                        ^ source.bh
#                         ^^^^^^^^^^ source.bh storage.type.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumpfile :: String -> Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.double-colon.bh
#            ^ source.bh
#             ^^^^^^ source.bh storage.type.bh
#                   ^ source.bh
#                    ^^ source.bh keyword.operator.arrow.bh
#                      ^ source.bh
#                       ^^^^^^ source.bh storage.type.bh
>$dumpfile x = fromPrimAction (__dumpfile__ x)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>foreign __dumpfile__ :: String -> PrimAction = "$dumpfile"
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^^ source.bh keyword.operator.double-colon.bh
#                       ^ source.bh
#                        ^^^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^^ source.bh keyword.operator.arrow.bh
#                                 ^ source.bh
#                                  ^^^^^^^^^^ source.bh storage.type.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^ source.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$dumplimit :: Bit 64 -> Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.double-colon.bh
#             ^ source.bh
#              ^^^ source.bh storage.type.bh
#                 ^ source.bh
#                  ^^ source.bh constant.numeric.integral.decimal.bh
#                    ^ source.bh
#                     ^^ source.bh keyword.operator.arrow.bh
#                       ^ source.bh
#                        ^^^^^^ source.bh storage.type.bh
>$dumplimit x = fromPrimAction (__dumplimit__ x)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>foreign __dumplimit__ :: Bit 64 -> PrimAction = "$dumplimit"
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^ source.bh keyword.operator.double-colon.bh
#                        ^ source.bh
#                         ^^^ source.bh storage.type.bh
#                            ^ source.bh
#                             ^^ source.bh constant.numeric.integral.decimal.bh
#                               ^ source.bh
#                                ^^ source.bh keyword.operator.arrow.bh
#                                  ^ source.bh
#                                   ^^^^^^^^^^ source.bh storage.type.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
#                                               ^ source.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                 ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $signed :: Bit n -> Bit n = "$signed"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.double-colon.bh
#                  ^ source.bh
#                   ^^^ source.bh storage.type.bh
#                      ^ source.bh
#                       ^ source.bh variable.other.generic-type.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.bh
#                           ^ source.bh
#                            ^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh variable.other.generic-type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $unsigned :: Bit n -> Bit n = "$unsigned"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.double-colon.bh
#                    ^ source.bh
#                     ^^^ source.bh storage.type.bh
#                        ^ source.bh
#                         ^ source.bh variable.other.generic-type.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.operator.arrow.bh
#                             ^ source.bh
#                              ^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh variable.other.generic-type.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- XXX extra argument to $time and $stime to
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- force applications to be saved on the heap
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>$time :: ActionValue (Bit 64)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^ source.bh
#      ^^ source.bh keyword.operator.double-colon.bh
#        ^ source.bh
#         ^^^^^^^^^^^ source.bh storage.type.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^ source.bh storage.type.bh
#                         ^ source.bh
#                          ^^ source.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh
>$time = fromActionValue_ (__time__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^ source.bh
#      ^ source.bh keyword.operator.eq.bh
#       ^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
>
>$stime :: ActionValue (Bit 32)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^ source.bh
#       ^^ source.bh keyword.operator.double-colon.bh
#         ^ source.bh
#          ^^^^^^^^^^^ source.bh storage.type.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^ source.bh storage.type.bh
#                          ^ source.bh
#                           ^^ source.bh constant.numeric.integral.decimal.bh
#                             ^ source.bh
>$stime = fromActionValue_ (__stime__)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>
>foreign __time__ :: ActionValue_ 64 = "$time"
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^ source.bh
#                    ^^^^^^^^^^^^ source.bh storage.type.bh
#                                ^ source.bh
#                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign __stime__ :: ActionValue_ 32 = "$stime"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.double-colon.bh
#                    ^ source.bh
#                     ^^^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^^ source.bh constant.numeric.integral.decimal.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>--  File type and system tasks which use it
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>data File = InvalidFile |
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.File .bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
>            MCD (Bit 31) |
#^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#            ^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                 ^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh
#                     ^^ source.bh meta.declaration.data.algebraic.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
>            FD  (Bit 31)
#^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#            ^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                 ^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh
#                     ^^ source.bh meta.declaration.data.algebraic.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
>  deriving(Eq)
#^^ source.bh meta.declaration.data.algebraic.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#           ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#             ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
>
>instance Bits File 32
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#             ^ source.bh meta.declaration.instance.bh
#              ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    pack InvalidFile = 0
#^^^^^^^^^ source.bh
#         ^^^^^^^^^^^ source.bh constant.other.bh
#                    ^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh constant.numeric.integral.decimal.bh
>    pack (FD x)      = 1 ++ x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^ source.bh constant.other.bh
#            ^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^^^ source.bh
>    pack (MCD x)     = 0 ++ x
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^ source.bh constant.other.bh
#             ^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^^^ source.bh
>    unpack x = if (x == 0)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^ source.bh keyword.control.if.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^ source.bh
#                     ^^ source.bh keyword.operator.infix.bh
#                       ^ source.bh
#                        ^ source.bh constant.numeric.integral.decimal.bh
#                         ^ source.bh punctuation.paren.bh
>               then InvalidFile
#^^^^^^^^^^^^^^^ source.bh
#               ^^^^ source.bh keyword.control.then.bh
#                   ^ source.bh
#                    ^^^^^^^^^^^ source.bh constant.other.bh
>               else case (x[31:31]) of
#^^^^^^^^^^^^^^^ source.bh
#               ^^^^ source.bh keyword.control.else.bh
#                   ^ source.bh
#                    ^^^^ source.bh keyword.control.case.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.bracket.bh
#                            ^^ source.bh constant.numeric.integral.decimal.bh
#                              ^ source.bh keyword.operator.colon.bh
#                               ^^ source.bh constant.numeric.integral.decimal.bh
#                                 ^ source.bh punctuation.bracket.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^ source.bh keyword.control.of.bh
>                 1 -> FD x[30:0]
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^ source.bh
#                      ^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.bracket.bh
#                           ^^ source.bh constant.numeric.integral.decimal.bh
#                             ^ source.bh keyword.operator.colon.bh
#                              ^ source.bh constant.numeric.integral.decimal.bh
#                               ^ source.bh punctuation.bracket.bh
>                 0 -> MCD x[30:0]
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^ source.bh
#                      ^^^ source.bh constant.other.bh
#                         ^^ source.bh
#                           ^ source.bh punctuation.bracket.bh
#                            ^^ source.bh constant.numeric.integral.decimal.bh
#                              ^ source.bh keyword.operator.colon.bh
#                               ^ source.bh constant.numeric.integral.decimal.bh
#                                ^ source.bh punctuation.bracket.bh
>
>-- An packing for File type to be used with Bitwise operations on multi-channel descriptors
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- since bit ops are not allowed on FD, then return a 0 which is "safe"
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>mcdFilePack :: File -> Bit 31
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>mcdFilePack InvalidFile = 0
#^^^^^^^^^^^^ source.bh
#            ^^^^^^^^^^^ source.bh constant.other.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
>mcdFilePack (FD _)      = 0
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh constant.other.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
>mcdFilePack (MCD x)     = x
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^ source.bh constant.other.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^ source.bh
>
>mcdFileUnpack :: Bit 31 -> File
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mcdFileUnpack x = MCD x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^^ source.bh
>
>-- In Verilog and now in bsv bit wise operations can occur with File provided they ar
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- multi-channel descriptors
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance Bitwise File where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^^ source.bh keyword.other.where.bh
>    (&) x y  = mcdFileUnpack ( primAnd (mcdFilePack x) (mcdFilePack y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh punctuation.paren.bh
>    (|) x y  = mcdFileUnpack ( primOr  (mcdFilePack x) (mcdFilePack y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh punctuation.paren.bh
>    (^) x y  = mcdFileUnpack ( primXor (mcdFilePack x) (mcdFilePack y))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh entity.name.function.infix.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh punctuation.paren.bh
>    (^~) x y = mcdFileUnpack ( primInv (primXor (mcdFilePack x) (mcdFilePack y)))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^^^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^ source.bh punctuation.paren.bh
>    (~^) x y = mcdFileUnpack ( primInv (primXor (mcdFilePack x) (mcdFilePack y)))
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^^^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^ source.bh punctuation.paren.bh
>    invert x = mcdFileUnpack ( primInv (mcdFilePack x))
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
>    (<<) _ _ = error "Left shift operation is not supported with type File"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    (>>) _ _ = error "Right shift operation is not supported with type File"
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    msb  _   = error "lsb operation is not supported with type File"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    lsb  _   = error "msb operation is not supported with type File"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>
>
>
>-- arguments handled by compiler
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- $fflush :: PrimAction
#^^^^ source.bh comment.block.documentation.bh punctuation.whitespace.comment.leading.bh
#    ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.documentation.bh
>-- $fflush :: File -> PrimAction
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.documentation.bh
>foreign $fflush :: PrimAction = "$fflush"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.double-colon.bh
#                  ^ source.bh
#                   ^^^^^^^^^^ source.bh storage.type.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- Type checking is done by bsc
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- $fopen :: String ->  ActionValue#(File)
#^^^^ source.bh comment.block.documentation.bh punctuation.whitespace.comment.leading.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.documentation.bh
>-- $fopen :: String -> String ->  ActionValue#(File)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.documentation.bh
>foreign $fopen :: ActionValue_ 32 = "$fopen"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^ source.bh
#               ^^ source.bh keyword.operator.double-colon.bh
#                 ^ source.bh
#                  ^^^^^^^^^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^^ source.bh constant.numeric.integral.decimal.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^ source.bh string.quoted.double.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>
>-- The arguments for these are handled internally
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>foreign $fwrite  ::  PrimAction = "$fwrite"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fwriteb ::  PrimAction = "$fwriteb"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^^ source.bh string.quoted.double.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fwriteo ::  PrimAction = "$fwriteo"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^^ source.bh string.quoted.double.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fwriteh ::  PrimAction = "$fwriteh"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.double-colon.bh
#                   ^^ source.bh
#                     ^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^^^^ source.bh string.quoted.double.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $swriteAV  ::  ActionValue_  n = "$swriteAV"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^^^ source.bh storage.type.bh
#                                   ^^ source.bh
#                                     ^ source.bh variable.other.generic-type.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swrite    ::  PrimAction = "$swrite"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swritebAV ::  ActionValue_  n = "$swritebAV"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^^^ source.bh storage.type.bh
#                                   ^^ source.bh
#                                     ^ source.bh variable.other.generic-type.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swriteb   ::  PrimAction = "$swriteb"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swriteoAV ::  ActionValue_  n = "$swriteoAV"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^^^ source.bh storage.type.bh
#                                   ^^ source.bh
#                                     ^ source.bh variable.other.generic-type.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swriteo   ::  PrimAction = "$swriteo"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swritehAV ::  ActionValue_  n = "$swritehAV"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^^^ source.bh storage.type.bh
#                                   ^^ source.bh
#                                     ^ source.bh variable.other.generic-type.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $swriteh   ::  PrimAction = "$swriteh"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $sformatAV ::  ActionValue_  n = "$sformatAV"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^^^ source.bh storage.type.bh
#                                   ^^ source.bh
#                                     ^ source.bh variable.other.generic-type.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $sformat   ::  PrimAction = "$sformat"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $fdisplay  ::  PrimAction = "$fdisplay"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fdisplayb ::  PrimAction = "$fdisplayb"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fdisplayo ::  PrimAction = "$fdisplayo"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>foreign $fdisplayh ::  PrimAction = "$fdisplayh"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^^ source.bh
#                       ^^^^^^^^^^ source.bh storage.type.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>foreign $random :: ActionValue_ 32 = "$random"
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.prefix.dollar.bh
#         ^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.double-colon.bh
#                  ^ source.bh
#                   ^^^^^^^^^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^ source.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$fgetc :: File -> ActionValue (Int 32) -- to allow space for -1
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^ source.bh
#       ^^ source.bh keyword.operator.double-colon.bh
#         ^ source.bh
#          ^^^^ source.bh storage.type.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.bh
#                 ^ source.bh
#                  ^^^^^^^^^^^ source.bh storage.type.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh
#                                      ^ source.bh
#                                       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>$fgetc f = fromActionValue_ (__fgetc__ (pack f))
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh punctuation.paren.bh
>foreign __fgetc__ :: Bit 32 -> ActionValue_ 32 = "$fgetc"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.double-colon.bh
#                    ^ source.bh
#                     ^^^ source.bh storage.type.bh
#                        ^ source.bh
#                         ^^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.operator.arrow.bh
#                              ^ source.bh
#                               ^^^^^^^^^^^^ source.bh storage.type.bh
#                                           ^ source.bh
#                                            ^^ source.bh constant.numeric.integral.decimal.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
#                                                ^ source.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                  ^^^^^^ source.bh string.quoted.double.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$fclose :: File -> Action
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^ source.bh
#        ^^ source.bh keyword.operator.double-colon.bh
#          ^ source.bh
#           ^^^^ source.bh storage.type.bh
#               ^ source.bh
#                ^^ source.bh keyword.operator.arrow.bh
#                  ^ source.bh
#                   ^^^^^^ source.bh storage.type.bh
>$fclose f = fromActionValue_ (__fclose__ (pack f))
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>foreign __fclose__ :: Bit 32 -> Action_ = "$fclose"
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^ source.bh
#                      ^^^ source.bh storage.type.bh
#                         ^ source.bh
#                          ^^ source.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.operator.arrow.bh
#                               ^ source.bh
#                                ^^^^^^^ source.bh storage.type.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^^^^^^^ source.bh string.quoted.double.bh
#                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>$ungetc :: Bit 8 -> File -> ActionValue (Int 32)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^ source.bh
#        ^^ source.bh keyword.operator.double-colon.bh
#          ^ source.bh
#           ^^^ source.bh storage.type.bh
#              ^ source.bh
#               ^ source.bh constant.numeric.integral.decimal.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.bh
#                   ^ source.bh
#                    ^^^^ source.bh storage.type.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.bh
#                           ^ source.bh
#                            ^^^^^^^^^^^ source.bh storage.type.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^ source.bh storage.type.bh
#                                            ^ source.bh
#                                             ^^ source.bh constant.numeric.integral.decimal.bh
#                                               ^ source.bh
>$ungetc c f = fromActionValue_ ( __fungetc__ c (pack f))
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
>foreign __fungetc__ :: Bit 8 -> Bit 32 -> ActionValue_ 32 = "$ungetc"
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.double-colon.bh
#                      ^ source.bh
#                       ^^^ source.bh storage.type.bh
#                          ^ source.bh
#                           ^ source.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.operator.arrow.bh
#                               ^ source.bh
#                                ^^^ source.bh storage.type.bh
#                                   ^ source.bh
#                                    ^^ source.bh constant.numeric.integral.decimal.bh
#                                      ^ source.bh
#                                       ^^ source.bh keyword.operator.arrow.bh
#                                         ^ source.bh
#                                          ^^^^^^^^^^^^ source.bh storage.type.bh
#                                                      ^ source.bh
#                                                       ^^ source.bh constant.numeric.integral.decimal.bh
#                                                         ^ source.bh
#                                                          ^ source.bh keyword.operator.eq.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^^^^^^^ source.bh string.quoted.double.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>
>-- "standard" file descriptors
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>stdin  :: File
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stdin = FD 0
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.eq.bh
#       ^ source.bh
#        ^^ source.bh constant.other.bh
#          ^ source.bh
#           ^ source.bh constant.numeric.integral.decimal.bh
>stdout :: File
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stdout = FD 1
#^^^^^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
#        ^ source.bh
#         ^^ source.bh constant.other.bh
#           ^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
>stderr :: File
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stderr = FD 2
#^^^^^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
#        ^ source.bh
#         ^^ source.bh constant.other.bh
#           ^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
>
>stdout_mcd :: File
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stdout_mcd = MCD 1
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^^ source.bh constant.other.bh
#                ^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
>
>$test$plusargs :: String -> ActionValue Bool
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^ source.bh
#     ^ source.bh keyword.operator.infix.bh
#      ^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.double-colon.bh
#                 ^ source.bh
#                  ^^^^^^ source.bh storage.type.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.bh
#                           ^ source.bh
#                            ^^^^^^^^^^^ source.bh storage.type.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh storage.type.bh
>$test$plusargs x = fromActionValue_ (__testplusargs__ x)
#^ source.bh keyword.operator.prefix.dollar.bh
# ^^^^ source.bh
#     ^ source.bh keyword.operator.infix.bh
#      ^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
>foreign __testplusargs__ :: String -> ActionValue_ 1 = "$test$plusargs"
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh keyword.operator.double-colon.bh
#                           ^ source.bh
#                            ^^^^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^^ source.bh keyword.operator.arrow.bh
#                                     ^ source.bh
#                                      ^^^^^^^^^^^^ source.bh storage.type.bh
#                                                  ^ source.bh
#                                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                                    ^ source.bh
#                                                     ^ source.bh keyword.operator.eq.bh
#                                                      ^ source.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                        ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- TUPLES
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^ source.bh comment.line.double-dash.bh
>
>type Tuple2 a b = (a,b)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                   ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.type.bh
>type Tuple3 a b c = (a,b,c)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.type.bh
#                    ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                     ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.type.bh
>type Tuple4 a b c d = (a,b,c,d)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.type.bh
#                    ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                     ^ source.bh meta.declaration.type.bh
#                      ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                       ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.type.bh
>type Tuple5 a b c d e = (a,b,c,d,e)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.type.bh
#                    ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.type.bh
#                      ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                       ^ source.bh meta.declaration.type.bh
#                        ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                         ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.type.bh
>type Tuple6 a b c d e f = (a,b,c,d,e,f)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.type.bh
#                    ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.type.bh
#                      ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.type.bh
#                        ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                         ^ source.bh meta.declaration.type.bh
#                          ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                           ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.type.bh
>type Tuple7 a b c d e f g = (a,b,c,d,e,f,g)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.type.bh
#                    ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.type.bh
#                      ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.type.bh
#                        ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.type.bh
#                          ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                           ^ source.bh meta.declaration.type.bh
#                            ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                             ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                       ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                         ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.type.bh
>type Tuple8 a b c d e f g h = (a,b,c,d,e,f,g,h)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.type.bh
#                ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.type.bh
#                    ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.type.bh
#                      ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.type.bh
#                        ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.type.bh
#                          ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.type.bh
#                            ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#                             ^ source.bh meta.declaration.type.bh
#                              ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                               ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                     ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                       ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                         ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                           ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                                             ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.type.bh
>-- If you add more tuples, make sure to update TypeAnalysis and FShow instances
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>
>class incoherent Has_tpl_1 t a | t -> a where { tpl_1 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_2 t a | t -> a where { tpl_2 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_3 t a | t -> a where { tpl_3 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_4 t a | t -> a where { tpl_4 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_5 t a | t -> a where { tpl_5 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_6 t a | t -> a where { tpl_6 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_7 t a | t -> a where { tpl_7 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>class incoherent Has_tpl_8 t a | t -> a where { tpl_8 :: t -> a }
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^^^^^^^^^^^ source.bh meta.declaration.class.bh keyword.other.coherent.bh
#                ^ source.bh meta.declaration.class.bh
#                 ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.class.bh
#                                      ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^^ source.bh
#                                                      ^^ source.bh keyword.operator.double-colon.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^ source.bh variable.other.generic-type.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple8 a b c d e f g h) a where {tpl_1 (x,_,_,_,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple8 a b c d e f g h) b where {tpl_2 (_,x,_,_,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_3 (Tuple8 a b c d e f g h) c where {tpl_3 (_,_,x,_,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_4 (Tuple8 a b c d e f g h) d where {tpl_4 (_,_,_,x,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_5 (Tuple8 a b c d e f g h) e where {tpl_5 (_,_,_,_,x,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_6 (Tuple8 a b c d e f g h) f where {tpl_6 (_,_,_,_,_,x,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_7 (Tuple8 a b c d e f g h) g where {tpl_7 (_,_,_,_,_,_,x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_8 (Tuple8 a b c d e f g h) h where {tpl_8 (_,_,_,_,_,_,_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.brace.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.separator.comma.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
#                                                                              ^^^ source.bh
#                                                                                 ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple7 a b c d e f g) a where {tpl_1 (x,_,_,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple7 a b c d e f g) b where {tpl_2 (_,x,_,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_3 (Tuple7 a b c d e f g) c where {tpl_3 (_,_,x,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_4 (Tuple7 a b c d e f g) d where {tpl_4 (_,_,_,x,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_5 (Tuple7 a b c d e f g) e where {tpl_5 (_,_,_,_,x,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_6 (Tuple7 a b c d e f g) f where {tpl_6 (_,_,_,_,_,x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_7 (Tuple7 a b c d e f g) g where {tpl_7 (_,_,_,_,_,_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^^^^^ source.bh keyword.other.where.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.separator.comma.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.separator.comma.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple6 a b c d e f) a where {tpl_1 (x,_,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple6 a b c d e f) b where {tpl_2 (_,x,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.brace.bh
>instance Has_tpl_3 (Tuple6 a b c d e f) c where {tpl_3 (_,_,x,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.brace.bh
>instance Has_tpl_4 (Tuple6 a b c d e f) d where {tpl_4 (_,_,_,x,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.brace.bh
>instance Has_tpl_5 (Tuple6 a b c d e f) e where {tpl_5 (_,_,_,_,x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.brace.bh
>instance Has_tpl_6 (Tuple6 a b c d e f) f where {tpl_6 (_,_,_,_,_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^^^ source.bh keyword.other.where.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.separator.comma.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.separator.comma.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple5 a b c d e) a where {tpl_1 (x,_,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh keyword.operator.eq.bh
#                                                                  ^^^ source.bh
#                                                                     ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple5 a b c d e) b where {tpl_2 (_,x,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh keyword.operator.eq.bh
#                                                                  ^^^ source.bh
#                                                                     ^ source.bh punctuation.brace.bh
>instance Has_tpl_3 (Tuple5 a b c d e) c where {tpl_3 (_,_,x,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh keyword.operator.eq.bh
#                                                                  ^^^ source.bh
#                                                                     ^ source.bh punctuation.brace.bh
>instance Has_tpl_4 (Tuple5 a b c d e) d where {tpl_4 (_,_,_,x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh keyword.operator.eq.bh
#                                                                  ^^^ source.bh
#                                                                     ^ source.bh punctuation.brace.bh
>instance Has_tpl_5 (Tuple5 a b c d e) e where {tpl_5 (_,_,_,_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.brace.bh
#                                               ^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.separator.comma.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh keyword.operator.eq.bh
#                                                                  ^^^ source.bh
#                                                                     ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple4 a b c d) a where {tpl_1 (x,_,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.brace.bh
#                                             ^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
#                                                              ^^^ source.bh
#                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple4 a b c d) b where {tpl_2 (_,x,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.brace.bh
#                                             ^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
#                                                              ^^^ source.bh
#                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_3 (Tuple4 a b c d) c where {tpl_3 (_,_,x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.brace.bh
#                                             ^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
#                                                              ^^^ source.bh
#                                                                 ^ source.bh punctuation.brace.bh
>instance Has_tpl_4 (Tuple4 a b c d) d where {tpl_4 (_,_,_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.brace.bh
#                                             ^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.separator.comma.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.separator.comma.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
#                                                              ^^^ source.bh
#                                                                 ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple3 a b c) a where {tpl_1 (x,_,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.brace.bh
#                                           ^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.separator.comma.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh keyword.operator.eq.bh
#                                                          ^^^ source.bh
#                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple3 a b c) b where {tpl_2 (_,x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.brace.bh
#                                           ^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.separator.comma.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh keyword.operator.eq.bh
#                                                          ^^^ source.bh
#                                                             ^ source.bh punctuation.brace.bh
>instance Has_tpl_3 (Tuple3 a b c) c where {tpl_3 (_,_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.brace.bh
#                                           ^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.separator.comma.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh keyword.operator.eq.bh
#                                                          ^^^ source.bh
#                                                             ^ source.bh punctuation.brace.bh
>
>instance Has_tpl_1 (Tuple2 a b) a where {tpl_1 (x,_) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.brace.bh
#                                         ^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.separator.comma.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh keyword.operator.eq.bh
#                                                      ^^^ source.bh
#                                                         ^ source.bh punctuation.brace.bh
>instance Has_tpl_2 (Tuple2 a b) b where {tpl_2 (_,x) = x }
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                    ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.brace.bh
#                                         ^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.separator.comma.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh keyword.operator.eq.bh
#                                                      ^^^ source.bh
#                                                         ^ source.bh punctuation.brace.bh
>
>tuple2 :: a -> b -> Tuple2 a b
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple2 a b = (a,b)
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^ source.bh punctuation.separator.comma.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
>tuple3 :: a -> b -> c -> Tuple3 a b c
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple3 a b c = (a,b,c)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.separator.comma.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
>tuple4 :: a -> b -> c -> d  -> Tuple4 a b c d
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple4 a b c d = (a,b,c,d)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.separator.comma.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
>tuple5 :: a -> b -> c -> d -> e  -> Tuple5 a b c d e
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple5 a b c d e = (a,b,c,d,e)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.separator.comma.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.separator.comma.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
>tuple6 :: a -> b -> c -> d -> e -> f  -> Tuple6 a b c d e f
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple6 a b c d e f = (a,b,c,d,e,f)
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.separator.comma.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.separator.comma.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.separator.comma.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.separator.comma.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>tuple7 :: a -> b -> c -> d -> e -> f -> g   -> Tuple7 a b c d e f g
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^^^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple7 a b c d e f g = (a,b,c,d,e,f,g)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.separator.comma.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.separator.comma.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.separator.comma.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.separator.comma.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.separator.comma.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>tuple8 :: a -> b -> c -> d -> e -> f -> g -> h   -> Tuple8 a b c d e f g h
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>tuple8 a b c d e f g h = (a,b,c,d,e,f,g,h)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.separator.comma.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.separator.comma.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.separator.comma.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.separator.comma.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.separator.comma.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>
>-- FUNCTIONS TO REPLACE UNAVAILABLE INFIXES
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>compose :: (b -> c) -> (a -> b) -> (a -> c)
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
>compose f g x = f $ g x
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^ source.bh
#                  ^ source.bh keyword.operator.infix.bh
#                   ^^^^^ source.bh
>
>composeM :: (Monad m) => (a -> m b) -> (b -> m c) -> a -> m c
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>composeM f g x = do
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.do.bh
> {-# hide #-}
#^ source.bh
# ^^^ source.bh meta.preprocessor.bh
#    ^^^^^^ source.bh meta.preprocessor.bh
#          ^^^ source.bh meta.preprocessor.bh
> _fx  <- f x
#^^^^^^ source.bh
#      ^^ source.bh keyword.operator.arrow.left.bh
#        ^^^^^ source.bh
> {-# hide #-}
#^ source.bh
# ^^^ source.bh meta.preprocessor.bh
#    ^^^^^^ source.bh meta.preprocessor.bh
#          ^^^ source.bh meta.preprocessor.bh
> _fgx <- g _fx
#^^^^^^ source.bh
#      ^^ source.bh keyword.operator.arrow.left.bh
#        ^^^^^^^ source.bh
> return _fgx
#^^^^^^^^^^^^^ source.bh
>
>
>-- Parts of List library required for desugaring in BSV
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>data List a = Nil | Cons a (List a)
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.List a .bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh
#                    ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                            ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
>  deriving (Eq)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#              ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- New functions required for BSV
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>
>nil :: List a
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>nil = Nil
#^^^^ source.bh
#    ^ source.bh keyword.operator.eq.bh
#     ^ source.bh
#      ^^^ source.bh constant.other.bh
>
>cons :: a -> List a -> List a
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>cons x xs = Cons x xs
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^^^^ source.bh
>
>isCons :: List a -> Bool
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isCons (Cons _ _) = True
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^ source.bh constant.other.bh
#            ^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^^ source.bh constant.other.bh
>isCons _ = False
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^ source.bh
#           ^^^^^ source.bh constant.other.bh
>
>isNil :: List a -> Bool
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isNil Nil = True
#^^^^^^ source.bh
#      ^^^ source.bh constant.other.bh
#         ^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^^^ source.bh constant.other.bh
>isNil _ = False
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^ source.bh
#          ^^^^^ source.bh constant.other.bh
>
>decodeList :: List a -> Maybe (a, List a)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
>decodeList (Cons x xs) = Valid (x, xs)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.separator.comma.bh
#                                  ^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>decodeList Nil = Invalid
#^^^^^^^^^^^ source.bh
#           ^^^ source.bh constant.other.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^^^^^ source.bh constant.other.bh
>
>-- uck! We define these twice because we want people
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- to be able to import standard list functions qualified
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- not sure why re-exporting isn't working...
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>listPrimAppend :: List a -> List a -> List a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimAppend Nil ys = ys
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^ source.bh
>listPrimAppend (Cons x xs) ys = Cons x (listPrimAppend xs ys)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^ source.bh
#                                ^^^^ source.bh constant.other.bh
#                                    ^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>
>listPrimConcat :: List (List a) -> List a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimConcat Nil = Nil
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^^^ source.bh constant.other.bh
>listPrimConcat (Cons x xs) = listPrimAppend x (listPrimConcat xs)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
>
>instance PrimSelectable (List a) a
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>   primSelectFn = listPrimSelect
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimUpdateable (List a) a
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>   primUpdateFn = listPrimUpdate
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^ source.bh
>
>--@ The \te{List} type is a monad.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ instance Monad #(List);
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>instance Monad List
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
>    where
#^^^^ source.bh meta.declaration.instance.bh
#    ^^^^^ source.bh keyword.other.where.bh
>        return x = Cons x Nil
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^^ source.bh
#                          ^^^ source.bh constant.other.bh
>        bind x f = listPrimConcat (listPrimMap f x)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>-- copied !! and !!! from List.bs for PrimSelectable instance
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>listMessage :: Integer -> String -> String
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>listMessage i mess =
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
>  letseq messStr = if mess == "" then "" else (" ("+++ mess +++")")
#^^ source.bh
#  ^^^^^^ source.bh keyword.other.letseq.bh
#        ^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^^^^^^ source.bh
#                           ^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^ source.bh
#                                 ^^^^ source.bh keyword.control.then.bh
#                                     ^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                        ^ source.bh
#                                         ^^^^ source.bh keyword.control.else.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                ^^ source.bh string.quoted.double.bh
#                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                      ^^^^^^ source.bh
#                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                ^ source.bh string.quoted.double.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                  ^ source.bh punctuation.paren.bh
>  in ("index " +++ (integerToString i) +++ " out-of-range " +++ messStr)
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^ source.bh punctuation.paren.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#       ^^^^^^ source.bh string.quoted.double.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#              ^ source.bh
#               ^^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^^^ source.bh keyword.operator.infix.bh
#                                          ^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                               ^^^^^^^^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
>
>listPrimSelect :: (PrimIndex ix dx) => Position__ -> List a -> ix -> a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimSelect pos xs n =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
>  if (isStaticIndex n) then
#^^ source.bh
#  ^^ source.bh keyword.control.if.bh
#    ^ source.bh
#     ^ source.bh punctuation.paren.bh
#      ^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^^^^ source.bh keyword.control.then.bh
>   listStaticSelect pos xs (toStaticIndex n)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>  else listDynamicSelect pos xs n
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>listDrop :: Integer -> List a -> List a
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listDrop 0 l   = l
#^^^^^^^^^ source.bh
#         ^ source.bh constant.numeric.integral.decimal.bh
#          ^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^ source.bh
>listDrop _ Nil = Nil
#^^^^^^^^^^^ source.bh
#           ^^^ source.bh constant.other.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^ source.bh constant.other.bh
>listDrop n (Cons _ xs) = listDrop (n-1) xs
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh
>
>listNullOrUndef :: List a -> Bool
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>listNullOrUndef Nil = True
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^ source.bh constant.other.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^^^^ source.bh constant.other.bh
>listNullOrUndef (Cons _ _) = False
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^^^^^ source.bh constant.other.bh
>listNullOrUndef _ = True
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^^ source.bh constant.other.bh
>
>listLength :: List a -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>listLength l =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
>  let len = listLength' l 0
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
>  in if (isRawUndefined len) then
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^^^ source.bh keyword.control.then.bh
>       primGenerateError 80 (primGetEvalPosition len)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
>         "Attempt to get the length of an undetermined list"
#^^^^^^^^^ source.bh
#         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else len
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^^^^^ source.bh
>
>listLength' :: List a -> Integer -> Integer
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>listLength' Nil n = n
#^^^^^^^^^^^^ source.bh
#            ^^^ source.bh constant.other.bh
#               ^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^ source.bh
>-- XXX faking primSeq here
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>listLength' (Cons _ xs) n = if (n == n) then
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^ source.bh constant.other.bh
#                 ^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.control.if.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
#                                    ^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh keyword.control.then.bh
>                              listLength' xs (n + 1)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^ source.bh
#                                                ^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh constant.numeric.integral.decimal.bh
#                                                   ^ source.bh punctuation.paren.bh
>                            else listLength' xs (n + 1)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^^^^ source.bh keyword.control.else.bh
#                                ^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^ source.bh
#                                                   ^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh punctuation.paren.bh
>
>
>listStaticSelect :: Position__ -> List a -> Integer -> a
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listStaticSelect pos xs n =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>    let listPrimSelect' :: List b -> Integer -> Integer -> b
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^^^^^^^^^^^ source.bh
#                        ^^ source.bh keyword.operator.double-colon.bh
#                          ^ source.bh
#                           ^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh variable.other.generic-type.bh
#                                 ^ source.bh
#                                  ^^ source.bh keyword.operator.arrow.bh
#                                    ^ source.bh
#                                     ^^^^^^^ source.bh storage.type.bh
#                                            ^ source.bh
#                                             ^^ source.bh keyword.operator.arrow.bh
#                                               ^ source.bh
#                                                ^^^^^^^ source.bh storage.type.bh
#                                                       ^ source.bh
#                                                        ^^ source.bh keyword.operator.arrow.bh
#                                                          ^ source.bh
#                                                           ^ source.bh variable.other.generic-type.bh
>        listPrimSelect' Nil _ n0 =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>           let b = n0 < 0 || listNullOrUndef (listDrop n0 xs)
#^^^^^^^^^^^ source.bh
#           ^^^ source.bh keyword.other.let.bh
#              ^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^ source.bh
#                        ^ source.bh constant.numeric.integral.decimal.bh
#                         ^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
#                            ^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>              -- don't raise an error unless we can prove we are out-of-bounds
#^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#              ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>           in if (isStaticBool b) && b then
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.other.in.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
#                                    ^^^ source.bh
#                                       ^^^^ source.bh keyword.control.then.bh
>                primError pos $ listMessage n0 "list selection"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.infix.bh
#                               ^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>              else primBuildUndefined pos iuDontCare -- should add runtime error here
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        listPrimSelect' (Cons x _) 0 _  = x
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                    ^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^ source.bh
>        listPrimSelect' (Cons _ vs) i i0 = listPrimSelect' vs (i-1) i0
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh keyword.operator.infix.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^^ source.bh
>    in  listPrimSelect' xs n n
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>listPrimNum :: List e -> List (e, Integer)
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
>listPrimNum l = let listPrimNum' :: List e -> Integer -> List (e, Integer)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^^^ source.bh keyword.other.let.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^^ source.bh keyword.operator.double-colon.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh storage.type.bh
#                                        ^ source.bh
#                                         ^ source.bh variable.other.generic-type.bh
#                                          ^ source.bh
#                                           ^^ source.bh keyword.operator.arrow.bh
#                                             ^ source.bh
#                                              ^^^^^^^ source.bh storage.type.bh
#                                                     ^ source.bh
#                                                      ^^ source.bh keyword.operator.arrow.bh
#                                                        ^ source.bh
#                                                         ^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh variable.other.generic-type.bh
#                                                                ^ source.bh punctuation.separator.comma.bh
#                                                                 ^ source.bh
#                                                                  ^^^^^^^ source.bh storage.type.bh
#                                                                         ^ source.bh
>                    listPrimNum' Nil _ = Nil
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^^^ source.bh constant.other.bh
#                                    ^^^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^^^ source.bh constant.other.bh
>                    listPrimNum' (Cons x xs) n = Cons (x, n) (listPrimNum' xs (n+1))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
#                                                ^ source.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh punctuation.separator.comma.bh
#                                                         ^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh
#                                                                                ^ source.bh keyword.operator.infix.bh
#                                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>                in listPrimNum' l 0
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.other.in.bh
#                  ^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh constant.numeric.integral.decimal.bh
>
>-- make sure not to recurse if the literal gets out of range to avoid
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- an infinite loop with an infinite or undefined list
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>listDynamicSelect :: (PrimIndex ix dx) => Position__ -> List a -> ix -> a
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listDynamicSelect pos xs n = letseq rangeTest = inLiteralRange n
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^^^^^^ source.bh keyword.other.letseq.bh
#                                   ^^^^^^^^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
#                                               ^^^^^^^^^^^^^^^^^^ source.bh
>                                    f p r = if (rangeTest p.snd) then
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^ source.bh
#                                            ^^ source.bh keyword.control.if.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^ source.bh
#                                                           ^ source.bh keyword.operator.infix.bh
#                                                            ^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^^^^ source.bh keyword.control.then.bh
>                                                if (n == fromInteger p.snd) then p.fst else r
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^^ source.bh keyword.control.if.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
#                                                        ^^^^^^^^^^^^^^ source.bh
#                                                                      ^ source.bh keyword.operator.infix.bh
#                                                                       ^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^ source.bh
#                                                                            ^^^^ source.bh keyword.control.then.bh
#                                                                                ^^ source.bh
#                                                                                  ^ source.bh keyword.operator.infix.bh
#                                                                                   ^^^^ source.bh
#                                                                                       ^^^^ source.bh keyword.control.else.bh
#                                                                                           ^^^ source.bh
>                                            else (primBuildUndefined pos iuDontCare)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^^^^ source.bh keyword.control.else.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>                             in listPrimFoldR f (primBuildUndefined pos iuDontCare) (listPrimNum xs)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^^ source.bh keyword.other.in.bh
#                               ^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^^^^^^^^^^^^^^ source.bh
#                                                                                                   ^ source.bh punctuation.paren.bh
>
>listPrimLength :: List a -> Integer
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>listPrimLength Nil = 0
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^ source.bh constant.numeric.integral.decimal.bh
>listPrimLength (Cons _ xs) = 1 + (listPrimLength xs)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^ source.bh constant.numeric.integral.decimal.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>listPrimUpdate :: (PrimIndex ix dx) => Position__ -> List a -> ix -> a -> List a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh
#                                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimUpdate pos l k x =
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
>    let k' = toStaticIndex k
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^^ source.bh
>        rangeTest = inLiteralRange k
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^ source.bh
>        b = listNullOrUndef (listDrop k' l)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>    in
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
>      if (isRawUndefined l) then
#^^^^^^ source.bh
#      ^^ source.bh keyword.control.if.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^^^^ source.bh keyword.control.then.bh
>        primGenerateError 78 pos "Attempt to update an undetermined list"
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^ source.bh constant.numeric.integral.decimal.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>      else if (isRawUndefined k) then
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^^^^ source.bh keyword.control.then.bh
>        primGenerateError 79 pos "Attempt to update a list at an undetermined position"
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^ source.bh constant.numeric.integral.decimal.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>      else if ((isStaticIndex k) && (k' < 0 || (isStaticBool b && b)))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^^ source.bh keyword.operator.infix.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^ source.bh
#                                        ^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                           ^ source.bh
#                                            ^^ source.bh keyword.operator.infix.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^^^^^ source.bh
#                                                               ^^ source.bh keyword.operator.infix.bh
#                                                                 ^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh punctuation.paren.bh
>          then primError pos $ listMessage k' "list updating"
#^^^^^^^^^^ source.bh
#          ^^^^ source.bh keyword.control.then.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                               ^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>      else listPrimMap (\ p -> if (rangeTest p.snd) && (k == fromInteger p.snd) then x else p.fst)
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh keyword.operator.lambda.bh
#                         ^^^ source.bh
#                            ^^ source.bh keyword.operator.arrow.bh
#                              ^ source.bh
#                               ^^ source.bh keyword.control.if.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^ source.bh
#                                              ^ source.bh keyword.operator.infix.bh
#                                               ^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^ source.bh
#                                                          ^^ source.bh keyword.operator.infix.bh
#                                                            ^^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh keyword.operator.infix.bh
#                                                                           ^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh
#                                                                                ^^^^ source.bh keyword.control.then.bh
#                                                                                    ^^^ source.bh
#                                                                                       ^^^^ source.bh keyword.control.else.bh
#                                                                                           ^^ source.bh
#                                                                                             ^ source.bh keyword.operator.infix.bh
#                                                                                              ^^^ source.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
>                       (listPrimNum l)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>
>listPrimSomeBitsToList :: Integer -> Integer -> Bit m -> List (Bit k)
#^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
>listPrimSomeBitsToList i n bs =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>    if i >= n then
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.infix.bh
#           ^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
>        Nil
#^^^^^^^^ source.bh
#        ^^^ source.bh constant.other.bh
>    else
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
>        letseq i' = i + valueOf k
#^^^^^^^^ source.bh
#        ^^^^^^ source.bh keyword.other.letseq.bh
#              ^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^ source.bh
#                      ^ source.bh keyword.operator.infix.bh
#                       ^^^^^^^^^^^ source.bh
>               x = bs[fromInteger (i'-1) : fromInteger i]
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.bracket.bh
#                      ^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^ source.bh
#                                     ^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.colon.bh
#                                          ^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.bracket.bh
>        in  Cons x (listPrimSomeBitsToList i' n bs)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^ source.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>listPrimMap :: (c -> d) -> List c -> List d
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimMap _ Nil = Nil
#^^^^^^^^^^^^^^ source.bh
#              ^^^ source.bh constant.other.bh
#                 ^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^ source.bh constant.other.bh
>listPrimMap f (Cons x xs) = Cons (f x) (listPrimMap f xs)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
>
>listPrimFoldL :: (b -> a -> b) -> b -> List a -> b
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimFoldL _ z Nil = z
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^ source.bh
>listPrimFoldL f z (Cons x xs) = listPrimFoldL f (f z x) xs
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^ source.bh
>
>listPrimFoldR :: (a -> b -> b) -> b -> List a -> b
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>listPrimFoldR _ z Nil = z
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^ source.bh
>listPrimFoldR f z (Cons x xs) = f x (listPrimFoldR f z xs)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
>
>constantWithAllBitsSet :: (Bit sa)
#^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
>constantWithAllBitsSet = ((invert 0) :: Bit sa)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^ source.bh
#                                  ^ source.bh constant.numeric.integral.decimal.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.double-colon.bh
#                                       ^ source.bh
#                                        ^^^ source.bh storage.type.bh
#                                           ^ source.bh
#                                            ^^ source.bh variable.other.generic-type.bh
#                                              ^ source.bh punctuation.paren.bh
>
>constantWithAllBitsUnset :: (Bit sa)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
>constantWithAllBitsUnset = (0 :: Bit sa)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh constant.numeric.integral.decimal.bh
#                             ^ source.bh
#                              ^^ source.bh keyword.operator.double-colon.bh
#                                ^ source.bh
#                                 ^^^ source.bh storage.type.bh
#                                    ^ source.bh
#                                     ^^ source.bh variable.other.generic-type.bh
#                                       ^ source.bh punctuation.paren.bh
>
>integerToString :: Integer -> String
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>integerToString = primIntegerToString
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>--XXX Ugly but we can't print bit vectors (at compile-time) any other way
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>bitToString :: (Bit n) -> String
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>bitToString = compose integerToString primBitToInteger
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>primitive primStringLength :: String -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>stringLength :: String -> Integer
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stringLength a =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
>  let l = primStringLength a
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^^^^^ source.bh
>  in if (isRawUndefined l) then
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^^^ source.bh keyword.control.then.bh
>       primGenerateError 80 (primGetEvalPosition l)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>         "Attempt to get the length of an undetermined string"
#^^^^^^^^^ source.bh
#         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>       else l
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^^^ source.bh
>
>primitive type Array :: * -> *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>primitive primArrayNew :: Integer -> a -> Array a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primArraySelect :: Array a -> Integer -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primArrayDynSelect :: Array a -> Bit n -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primArrayUpdate :: Array a -> Integer -> a -> Array a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primArrayDynUpdate :: Array a -> Bit n -> a -> Array a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primitive primArrayLength :: Array a -> Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>primitive primMarkArrayInitialized :: Array a -> Array a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>arrayLength :: Array a -> Integer
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>arrayLength a =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
>  let l = primArrayLength a
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^^^^ source.bh
>  in if (isRawUndefined l) then
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^^^ source.bh keyword.control.then.bh
>       primGenerateError 80 (primGetEvalPosition l)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>         "Attempt to get the length of an undetermined array"
#^^^^^^^^^ source.bh
#         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else l
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^^^ source.bh
>
>primArrayNewU :: Integer -> Array a
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primArrayNewU k = primArrayNew k _
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimSelectable (Array a) a
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>   primSelectFn :: (PrimIndex ix dx) =>
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
>                   Position__ -> (Array a) -> ix -> a
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>   primSelectFn pos v x =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
>     if (isStaticIndex x) then
#^^^^^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^^^ source.bh keyword.control.then.bh
>        letseq i = toStaticIndex x
#^^^^^^^^ source.bh
#        ^^^^^^ source.bh keyword.other.letseq.bh
#              ^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^ source.bh
>               b  = i >= primArrayLength v
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^^^^^^^^^ source.bh
>        in if (isStaticBool b && b) || (i < 0) then
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^^^^ source.bh
#                              ^^ source.bh keyword.operator.infix.bh
#                                ^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^ source.bh
#                                          ^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh constant.numeric.integral.decimal.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^^^^ source.bh keyword.control.then.bh
>              primError pos (listMessage i "array selection" )
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>           else primArraySelect v i
#^^^^^^^^^^^ source.bh
#           ^^^^ source.bh keyword.control.else.bh
#               ^^^^^^^^^^^^^^^^^^^^^ source.bh
>     else primArrayDynSelect v (toDynamicIndex x)
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
>              -- would be nice to provide a default value for out of range
#^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#              ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>              -- (primBuildUndefined pos iuDontCare)
#^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#              ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance PrimUpdateable (Array a) a
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>   primUpdateFn :: (PrimIndex ix dx) =>
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
>                   Position__ -> (Array a) -> ix -> a -> Array a
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>   primUpdateFn pos v0 x n =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>    let v = primMarkArrayInitialized v0
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>    in
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
>     if (isRawUndefined v) then
#^^^^^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^^^^ source.bh keyword.control.then.bh
>       primGenerateError 78 pos "Attempt to update an undetermined array"
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh constant.numeric.integral.decimal.bh
#                           ^^^^^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else if (isRawUndefined x) then
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^^^ source.bh keyword.control.then.bh
>       primGenerateError 79 pos "Attempt to update an array at an undetermined position"
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^ source.bh constant.numeric.integral.decimal.bh
#                           ^^^^^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else if (isStaticIndex x) then
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^^^^ source.bh keyword.control.then.bh
>        letseq i = toStaticIndex x
#^^^^^^^^ source.bh
#        ^^^^^^ source.bh keyword.other.letseq.bh
#              ^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^ source.bh
>               b  = i >= primArrayLength v
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^^^^^^^^^ source.bh
>        in if (isStaticBool b && b) || (i < 0) then
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^^^^ source.bh
#                              ^^ source.bh keyword.operator.infix.bh
#                                ^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^ source.bh
#                                          ^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh constant.numeric.integral.decimal.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^^^^ source.bh keyword.control.then.bh
>              primError pos (listMessage i "array update")
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                         ^ source.bh punctuation.paren.bh
>           else primArrayUpdate v i n
#^^^^^^^^^^^ source.bh
#           ^^^^ source.bh keyword.control.else.bh
#               ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>     else primArrayDynUpdate v (toDynamicIndex x) n
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^ source.bh
>
>instance (Eq a) => Eq  (Array a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^ source.bh meta.declaration.instance.bh storage.type.bh
#            ^ source.bh meta.declaration.instance.bh
#             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                        ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>    (==) :: Array a -> Array a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    (==) v1 v2 = let doEq :: Integer -> Integer -> Array a -> Array a -> Bool
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^ source.bh keyword.other.let.bh
#                    ^^^^^^ source.bh
#                          ^^ source.bh keyword.operator.double-colon.bh
#                            ^ source.bh
#                             ^^^^^^^ source.bh storage.type.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.arrow.bh
#                                       ^ source.bh
#                                        ^^^^^^^ source.bh storage.type.bh
#                                               ^ source.bh
#                                                ^^ source.bh keyword.operator.arrow.bh
#                                                  ^ source.bh
#                                                   ^^^^^ source.bh storage.type.bh
#                                                        ^ source.bh
#                                                         ^ source.bh variable.other.generic-type.bh
#                                                          ^ source.bh
#                                                           ^^ source.bh keyword.operator.arrow.bh
#                                                             ^ source.bh
#                                                              ^^^^^ source.bh storage.type.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh variable.other.generic-type.bh
#                                                                     ^ source.bh
#                                                                      ^^ source.bh keyword.operator.arrow.bh
#                                                                        ^ source.bh
#                                                                         ^^^^ source.bh storage.type.bh
>                     doEq n k x1 x2 = if (n > k)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^^ source.bh keyword.control.if.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^ source.bh
#                                            ^ source.bh keyword.operator.infix.bh
#                                             ^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>                                      then True
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^^^^ source.bh keyword.control.then.bh
#                                          ^ source.bh
#                                           ^^^^ source.bh constant.other.bh
>                                      else (primArraySelect x1 n) == (primArraySelect x2 n) &&
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^^^^ source.bh keyword.control.else.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh
#                                                                  ^^ source.bh keyword.operator.infix.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                           ^ source.bh
#                                                                                            ^^ source.bh keyword.operator.infix.bh
>                                           (doEq (n+1) k x1 x2)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
>                 in (primArrayLength v1) == (primArrayLength v2) &&
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.other.in.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh keyword.operator.infix.bh
>                    if (primArrayLength v1) > 0
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.control.if.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.infix.bh
#                                             ^ source.bh
#                                              ^ source.bh constant.numeric.integral.decimal.bh
>                       then doEq 0 ((primArrayLength v1) - 1) v1 v2
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^^ source.bh keyword.control.then.bh
#                           ^^^^^^ source.bh
#                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh keyword.operator.infix.bh
#                                                          ^ source.bh
#                                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
>                       else True
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^^ source.bh keyword.control.else.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
>    (/=) :: Array a -> Array a -> Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#     ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh entity.name.function.infix.bh
#       ^ source.bh meta.function.type-declaration.bh entity.name.function.bh punctuation.paren.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    (/=) v1 v2 = not (v1 == v2)
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^^ source.bh entity.name.function.infix.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>
>instance (PrimDeepSeqCond a) => PrimDeepSeqCond (Array a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.declaration.instance.bh
#                                                         ^ source.bh meta.declaration.instance.bh
#                                                          ^^^^^ source.bh keyword.other.where.bh
>   primDeepSeqCond :: (Array a) -> b -> b
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>   primDeepSeqCond xs =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>     let l = arrayLength xs
#^^^^^ source.bh
#     ^^^ source.bh keyword.other.let.bh
#        ^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>         seqCells :: Integer -> b -> b
#^^^^^^^^^ source.bh meta.function.type-declaration.bh
#         ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>         seqCells i b =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>           let x = primSelectFn noPosition xs i
#^^^^^^^^^^^ source.bh
#           ^^^ source.bh keyword.other.let.bh
#              ^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>           in if (i >= l)
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.other.in.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
>              then b
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^^^ source.bh
>              else primDeepSeqCond x (seqCells (i+1) b)
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh keyword.operator.infix.bh
#                                                  ^ source.bh constant.numeric.integral.decimal.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
>     in seqCells 0
#^^^^^ source.bh
#     ^^ source.bh keyword.other.in.bh
#       ^^^^^^^^^^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
>
>primArrayInitialize :: List a -> Array a
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primArrayInitialize l =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>  let
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
>      doInit :: List a -> Array a -> Integer -> Array a
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>      doInit Nil v _ = v
#^^^^^^^^^^^^^ source.bh
#             ^^^ source.bh constant.other.bh
#                ^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^ source.bh
>      doInit (Cons x xs) v k = doInit xs (primArrayUpdate v (n-k-1) x) (k-1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh
#                                                              ^ source.bh keyword.operator.infix.bh
#                                                               ^ source.bh
#                                                                ^ source.bh keyword.operator.infix.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                                           ^ source.bh punctuation.paren.bh
>      n = listPrimLength l
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^^^^^^^^^^^ source.bh
>  in
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
>     doInit l (primArrayNew n _) (n - 1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^ source.bh
#                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                       ^ source.bh punctuation.paren.bh
>
>primArrayCheck :: Position__ -> Integer -> Array a -> Array a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>primArrayCheck pos n v =
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
>  let
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
>      len = primArrayLength v
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>  in if (isStaticInteger len)
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^ source.bh
#     ^^ source.bh keyword.control.if.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
>     then if len == n
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.then.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^^^^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^^^ source.bh
>          then v
#^^^^^^^^^^ source.bh
#          ^^^^ source.bh keyword.control.then.bh
#              ^^^ source.bh
>          else primError pos $
#^^^^^^^^^^ source.bh
#          ^^^^ source.bh keyword.control.else.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
>               "Array was declared as length "
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>               +++ (integerToString n)
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>               +++ " but was initialized to length "
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>               +++ (integerToString len)
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>               +++ "."
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^ source.bh string.quoted.double.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>     else -- XXX dynamic error needed
#^^^^^ source.bh
#     ^^^^ source.bh keyword.control.else.bh
#         ^ source.bh
#          ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>          v
#^^^^^^^^^^^^ source.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Some bit utilities functions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>reverseBits :: Bit n -> Bit n
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>reverseBits b = let rev :: List a -> List a -> List a
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^^^ source.bh keyword.other.let.bh
#                   ^^^^^ source.bh
#                        ^^ source.bh keyword.operator.double-colon.bh
#                          ^ source.bh
#                           ^^^^ source.bh storage.type.bh
#                               ^ source.bh
#                                ^ source.bh variable.other.generic-type.bh
#                                 ^ source.bh
#                                  ^^ source.bh keyword.operator.arrow.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh storage.type.bh
#                                         ^ source.bh
#                                          ^ source.bh variable.other.generic-type.bh
#                                           ^ source.bh
#                                            ^^ source.bh keyword.operator.arrow.bh
#                                              ^ source.bh
#                                               ^^^^ source.bh storage.type.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
>                    rev Nil ys = ys
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^ source.bh
>                    rev (Cons x xs) ys = rev xs (Cons x ys)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
>                    --
#^^^^^^^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#                    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>                    lb :: List (Bit 1)
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh meta.function.type-declaration.bh
>                    lb = listPrimSomeBitsToList 0 (valueOf n) b
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh constant.numeric.integral.decimal.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^ source.bh
>                    lbr = rev lb Nil
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^^^^ source.bh
#                                 ^^^ source.bh constant.other.bh
>                in flatN 0 lbr
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.other.in.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh constant.numeric.integral.decimal.bh
#                          ^^^^^ source.bh
>
>countOnes :: (Add 1 n n1, Log n1 lgn1, Add 1 xx lgn1)  => Bit n -> UInt lgn1
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh
#                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>countOnes bin = let lb :: List (Bit 1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^^^ source.bh keyword.other.let.bh
#                   ^^^^ source.bh
#                       ^^ source.bh keyword.operator.double-colon.bh
#                         ^ source.bh
#                          ^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^ source.bh storage.type.bh
#                                   ^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh
>                    lb = listPrimSomeBitsToList 0 (valueOf n) bin
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh constant.numeric.integral.decimal.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^ source.bh
>                    sumx :: Bit 1 -> UInt lgn1 -> UInt lgn1
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>                    sumx b x = x + (zExt1U b)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>                    zExt1U :: (Add m1 1 m) => Bit 1 -> UInt m
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>                    zExt1U = compose unpack primZeroExt
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                in listPrimFoldR sumx 0 lb
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.other.in.bh
#                  ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                       ^^^^ source.bh
>
>countZerosLSB :: (Add 1 n n1, Log n1 lgn1) => Bit n -> UInt lgn1
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>countZerosLSB bin = let lb :: List (Bit 1)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^^ source.bh keyword.other.let.bh
#                       ^^^^ source.bh
#                           ^^ source.bh keyword.operator.double-colon.bh
#                             ^ source.bh
#                              ^^^^ source.bh storage.type.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^ source.bh storage.type.bh
#                                       ^ source.bh
#                                        ^ source.bh constant.numeric.integral.decimal.bh
#                                         ^ source.bh
>                        lb = listPrimSomeBitsToList 0 (valueOf n)  bin
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^^^^^ source.bh
>                        pairsn = zipwith1 (\x y -> (x,y)) lb (map1 fromInteger (upto1 0 (valueOf n)))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh keyword.operator.lambda.bh
#                                            ^^^^ source.bh
#                                                ^^ source.bh keyword.operator.arrow.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.separator.comma.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^^^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^^^^^^ source.bh
#                                                                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                       ^ source.bh
#                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                         ^^^^^^^^^ source.bh
#                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
>                        --
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#                        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>                        testF :: (Bit 1, UInt lgn1) -> UInt lgn1 -> UInt lgn1
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                        ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>                        testF (1, t) _  = t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh constant.numeric.integral.decimal.bh
#                                ^ source.bh punctuation.separator.comma.bh
#                                 ^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^ source.bh
>                        testF (0, _) p  = p
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh constant.numeric.integral.decimal.bh
#                                ^ source.bh punctuation.separator.comma.bh
#                                 ^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^ source.bh
>                        --
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#                        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>                     in listPrimFoldR testF (fromInteger $ (valueOf n)) pairsn
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^^ source.bh keyword.other.in.bh
#                       ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh keyword.operator.infix.bh
#                                                          ^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^^^^^^^^ source.bh
>
>
>countZerosMSB :: (Add 1 n n1, Log n1 lgn1) => Bit n -> UInt lgn1
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>countZerosMSB = compose countZerosLSB  reverseBits
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- make (field-blasted) uninitialized value,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- so it can be constructed piece-by-piece
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- BSV is a sequential syntax where a variable can be declared (uninitialized)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and then assigned a value by later sequential statements. This is implemented
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- in the BSV parser by nested let-expressions: the outer let-expression assigns
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- the variable to a 'uninitialized' primitive value, and then later assignment
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- statements become nested let-expressions that shadow that definition with a
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- new definition that replaces the value. If the 'uninitialized' primitive is
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- ever evaluated, that indicates that the program is reading the variable's
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- value without ever assigning a value, so BSC gives a warning/error.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- The polymorphic function 'primMakeRawUninitialized' is that primitive.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- However, instead of using this primitive directly, we define the typeclass
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- `PrimMakeUninitialized` with the member function `primMakeUninitialized`
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and we use that function instead.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- This is because we want to support BSV programs that declare a variable
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- for a complex type and then subsequently assign individual fields/arguments
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- of the type. This could be implemented by constructing the new value
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- every time, but we can save work by constructing the 'uninitialized' value
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- as a structure with uninitialized leaves. We use `primMakeUninitialized` to
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- construct that structure.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>class coherent PrimMakeUninitialized a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                                    ^ source.bh meta.declaration.class.bh
#                                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.class.bh
#                                       ^^^^^ source.bh keyword.other.where.bh
>   primMakeUninitialized :: Position__ -> String -> a
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- BSV only, touching an uninitialized value is an error
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- calls primMakeUninitialized via evaluation-time code-generation
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- to field-blast struct, vectors, etc. appropriately
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- (even polymorphic) without requiring crazy contexts
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primUninitialized :: Position__ -> String -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- "raw" uninitialized value, raises error when evaluated
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>primitive primMakeRawUninitialized :: Position__ -> String -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- can't derive this because -> is magic, not defined
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>instance PrimMakeUninitialized (a -> b) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^ source.bh meta.declaration.instance.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
>   primMakeUninitialized = primMakeRawUninitialized
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- Default generic instance covers data and structs
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance (Generic a r, PrimMakeUninitialized' a r) => PrimMakeUninitialized a where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^ source.bh meta.declaration.instance.bh
#                                                   ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                           ^ source.bh meta.declaration.instance.bh
#                                                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                             ^ source.bh meta.declaration.instance.bh
#                                                                              ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized pos f = primMakeUninitialized' ((error "proxy") :: r) pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^^ source.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                ^^^^^ source.bh string.quoted.double.bh
#                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^ source.bh
#                                                                        ^^ source.bh keyword.operator.double-colon.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh variable.other.generic-type.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^^^^ source.bh
>
>-- Extra intermediate helper type class allows coherent dispatch on number of constructors
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>class PrimMakeUninitialized' a r where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized' :: r -> Position__ -> String -> a
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- When the type has a single constructor, we can build that
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- structure, with uninitialized arguments (via calls to the typeclass member,
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- not the primitive, in case the sub-types themselves have structure).
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- The derived instance for structs is like the instance for data types with a single
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- constructor: a struct value is returned with uninitialized values in its
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- fields.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>--
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>instance (Generic a r, PrimMakeUninitialized'' r) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                              ^ source.bh meta.declaration.instance.bh
#                                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.declaration.instance.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         PrimMakeUninitialized' a (Meta (MetaData n p ta 1) r') where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                   ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                         ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.declaration.instance.bh
#                                                         ^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                                                          ^ source.bh meta.declaration.instance.bh
#                                                           ^ source.bh meta.declaration.instance.bh
#                                                            ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.instance.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized' _ pos f = to $ primMakeUninitialized'' False pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^ source.bh
#                                      ^ source.bh keyword.operator.infix.bh
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^^^^^ source.bh constant.other.bh
#                                                                     ^^^^^^^ source.bh
>
>-- This instance for types with multiple constructors just returns
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- `primMakeRawUninitialized` because we don't know any more about the
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- structure.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance PrimMakeUninitialized' a r where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized' _ = primMakeRawUninitialized
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>class PrimMakeUninitialized'' r where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.class.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' :: Bool -> Position__ -> String -> r
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- The uninitialized value of a field is created by calling the typeclass
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- member, not the primitive, in case the field's type also has structure.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>instance (PrimMakeUninitialized a) => PrimMakeUninitialized'' (Conc a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                             ^ source.bh meta.declaration.instance.bh
#                                                              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                   ^ source.bh meta.declaration.instance.bh
#                                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh
#                                                                       ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' _ pos f = Conc $ primMakeUninitialized pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- The exception to the above is when a field is polymorphic (has free type variables);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- in that case, the type of the uninitialized value won't be known until
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- elaboration time.  The representation type here is a generated wrapper struct
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- with a polymorphic field. This has a PrimMakeUninitialized instance that uses
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- `primUninitialized` to delay the decision until elaboration time.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- In the elaborator, `primUninitialized` becomes a simple
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- call to `primMakeUninitialized', of the appropriate type.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance (PrimMakeUninitialized a) => PrimMakeUninitialized'' (ConcPoly a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                             ^ source.bh meta.declaration.instance.bh
#                                                              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                               ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.declaration.instance.bh
#                                                                          ^ source.bh meta.declaration.instance.bh
#                                                                           ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' _ pos f = ConcPoly $ primMakeUninitialized pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^^^^^^^^ source.bh constant.other.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimMakeUninitialized'' a) => PrimMakeUninitialized'' (Meta (MetaData n p ta nc) a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                 ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                       ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                               ^ source.bh meta.declaration.instance.bh
#                                                                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                 ^ source.bh meta.declaration.instance.bh
#                                                                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                   ^ source.bh meta.declaration.instance.bh
#                                                                                    ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                      ^ source.bh meta.declaration.instance.bh
#                                                                                       ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                         ^ source.bh meta.declaration.instance.bh
#                                                                                          ^ source.bh meta.declaration.instance.bh
#                                                                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                            ^ source.bh meta.declaration.instance.bh
#                                                                                             ^ source.bh meta.declaration.instance.bh
#                                                                                              ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' named pos f = Meta $ primMakeUninitialized'' named pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimMakeUninitialized'' a) => PrimMakeUninitialized'' (Meta (MetaConsNamed n i nf) a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                 ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                       ^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                                    ^ source.bh meta.declaration.instance.bh
#                                                                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                      ^ source.bh meta.declaration.instance.bh
#                                                                                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                        ^ source.bh meta.declaration.instance.bh
#                                                                                         ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                           ^ source.bh meta.declaration.instance.bh
#                                                                                            ^ source.bh meta.declaration.instance.bh
#                                                                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                              ^ source.bh meta.declaration.instance.bh
#                                                                                               ^ source.bh meta.declaration.instance.bh
#                                                                                                ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' _ pos f = Meta $ primMakeUninitialized'' True pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                   ^^^^ source.bh constant.other.bh
#                                                                       ^^^^^^^ source.bh
>
>instance (PrimMakeUninitialized'' a) => PrimMakeUninitialized'' (Meta (MetaConsAnon n i nf) a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                 ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                       ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                                   ^ source.bh meta.declaration.instance.bh
#                                                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                                        ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                          ^ source.bh meta.declaration.instance.bh
#                                                                                           ^ source.bh meta.declaration.instance.bh
#                                                                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                             ^ source.bh meta.declaration.instance.bh
#                                                                                              ^ source.bh meta.declaration.instance.bh
#                                                                                               ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' _ pos f = Meta $ primMakeUninitialized'' False pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                   ^^^^^ source.bh constant.other.bh
#                                                                        ^^^^^^^ source.bh
>
>instance (PrimMakeUninitialized'' a) => PrimMakeUninitialized'' (Meta (MetaField n i) a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                 ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                                       ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                                ^ source.bh meta.declaration.instance.bh
#                                                                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                  ^ source.bh meta.declaration.instance.bh
#                                                                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                    ^ source.bh meta.declaration.instance.bh
#                                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                                        ^ source.bh meta.declaration.instance.bh
#                                                                                         ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' True pos f = Meta $ primMakeUninitialized'' True pos $ f + "." + stringOf n
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^^^^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^ source.bh
#                                       ^^^^ source.bh constant.other.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.infix.bh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                      ^^^^ source.bh constant.other.bh
#                                                                          ^^^^^ source.bh
#                                                                               ^ source.bh keyword.operator.infix.bh
#                                                                                ^^^ source.bh
#                                                                                   ^ source.bh keyword.operator.infix.bh
#                                                                                    ^ source.bh
#                                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                      ^ source.bh string.quoted.double.bh
#                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                        ^ source.bh
#                                                                                         ^ source.bh keyword.operator.infix.bh
#                                                                                          ^^^^^^^^^^^^ source.bh
>  primMakeUninitialized'' False pos f = Meta $ primMakeUninitialized'' False pos f
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^^^^ source.bh constant.other.bh
#                               ^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                       ^^^^^ source.bh constant.other.bh
#                                                                            ^^^^^^^ source.bh
>
>instance (PrimMakeUninitialized'' a, PrimMakeUninitialized'' b) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.instance.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         PrimMakeUninitialized'' (a, b) where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' named pos f = (primMakeUninitialized'' named pos f, primMakeUninitialized'' named pos f)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                            ^ source.bh punctuation.separator.comma.bh
#                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                 ^ source.bh punctuation.paren.bh
>
>instance PrimMakeUninitialized'' () where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh support.constant.unit.bh punctuation.paren.bh
#                                  ^ source.bh meta.declaration.instance.bh support.constant.unit.bh punctuation.paren.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
>  primMakeUninitialized'' _ _ _ = ()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                                   ^ source.bh constant.language.unit.bh punctuation.paren.bh
>
>
>-- make an undefined value with a position and kind
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- See the comment on 'PrimMakeUninitialized` about how BSV's sequential
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- syntax is implemented as nested let-expressions, and how we can optimize
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- the work in each re-assignment by constructing data structures once at
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- the start. As with the 'uninitialized' primitive value, we do the same thing
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- here for the 'undefined' primitive value: when an undefined value is created
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- (either explicitly or implicitly) we could call the primitive 'undefined'
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- function; instead, we call a typeclass member function, whose instances are
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- defined to return a structure with undefined values at the leaves.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- The polymorphic function 'primMakeRawUndefined' is the primitive, and
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- `PrimMakeUndefined' is the typeclass, with 'primMakeUndefined' as its
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- member function.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>class coherent PrimMakeUndefined a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.class.bh
#                                   ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined :: Position__ -> Integer -> a
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- definitions for the known "kinds"
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>iuNotUsed :: Integer
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>iuNotUsed = 0
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
>
>iuDontCare :: Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>iuDontCare = 1
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh constant.numeric.integral.decimal.bh
>
>iuNoMatch :: Integer
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>iuNoMatch = 2
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
>
>-- call PrimMakeUndefined via evaluator
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>primitive primBuildUndefined :: Position__ -> Integer -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primMakeRawUndefined :: Position__ -> Integer -> a
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>primitive primIsRawUndefined :: a -> Bit 1
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>
>isRawUndefined :: a -> Bool
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isRawUndefined = compose primChr primIsRawUndefined
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimMakeUndefined b) => PrimMakeUndefined (a -> b) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^ source.bh meta.declaration.instance.bh keyword.operator.arrow.bh
#                                                         ^ source.bh meta.declaration.instance.bh
#                                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.instance.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos kind =  \_ -> primMakeUndefined pos kind
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^ source.bh
#                                 ^ source.bh keyword.operator.lambda.bh
#                                  ^^ source.bh
#                                    ^^ source.bh keyword.operator.arrow.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined PrimAction where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined _pos _kind = primNoActions
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined (Bit n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                            ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined Integer where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined String where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined Char where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined Real where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined Fmt where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance PrimMakeUndefined Clock where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos _kind = primGenerateError 47 pos "Attempt to use this undetermined clock"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance PrimMakeUndefined Reset where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos _kind = primGenerateError 48 pos "Attempt to use this undetermined reset"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance PrimMakeUndefined (Inout a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos _kind = primGenerateError 49 pos "Attempt to use this undetermined inout"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance PrimMakeUndefined (Inout_ n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                            ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos _kind = primGenerateError 49 pos "Attempt to use this undetermined inout_"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance PrimMakeUndefined (Module a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                            ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos _kind = primGenerateError 11 pos "Trying to generate a module from a don't-care value"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance PrimMakeUndefined Rules where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined pos _kind =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>       primGenerateError 109 pos
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^^ source.bh constant.numeric.integral.decimal.bh
#                            ^^^^^ source.bh
>           ("Trying to generate rules from a don't-care value. " +++
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                ^ source.bh
#                                                                 ^^^ source.bh keyword.operator.infix.bh
>            "Perhaps you meant to use `emptyRules'.")
#^^^^^^^^^^^^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>instance PrimMakeUndefined (Array a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh keyword.other.where.bh
>   primMakeUndefined = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- Default generic instance covers data and structs
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance (Generic a r, PrimMakeUndefined' a r) => PrimMakeUndefined a where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^ source.bh meta.declaration.instance.bh
#                                               ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                   ^ source.bh meta.declaration.instance.bh
#                                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined pos i = primMakeUndefined' ((error "proxy") :: r) pos i
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^ source.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                        ^^^^^ source.bh string.quoted.double.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^^ source.bh keyword.operator.double-colon.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh variable.other.generic-type.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^^^^^^^ source.bh
>
>-- Extra intermediate helper type class allows coherent dispatch on number of constructors
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>class PrimMakeUndefined' a r where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.class.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined' :: r -> Position__ -> Integer -> a
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- Single constructor case, make undefined values for all the fields.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- The derived instance for structs is like for data types with a single
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- constructor: a struct value is returned with undefined values in its
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- fields.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>instance (Generic a r, PrimMakeUndefined'' r) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         PrimMakeUndefined' a (Meta (MetaData n p ta 1) r') where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                     ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.declaration.instance.bh
#                                                     ^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh
#                                                        ^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.declaration.instance.bh
#                                                           ^ source.bh meta.declaration.instance.bh
#                                                            ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined' _ pos i = to $ primMakeUndefined'' pos i
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^ source.bh
#                                  ^ source.bh keyword.operator.infix.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- Primitive case, make a type-specific error value
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance (PrimMakeUndefined a) => PrimMakeUndefined' a (ConcPrim a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                    ^ source.bh meta.declaration.instance.bh
#                                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                        ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                ^ source.bh meta.declaration.instance.bh
#                                                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                  ^ source.bh meta.declaration.instance.bh
#                                                                   ^ source.bh meta.declaration.instance.bh
#                                                                    ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined' (ConcPrim x) pos _ = primError pos $
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^ source.bh constant.other.bh
#                              ^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh keyword.operator.infix.bh
>    "Attempt to use undetermined " +++ (printType (typeOf x))
#^^^^ source.bh
#    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                  ^ source.bh
#                                   ^^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
>
>-- The instance for types with multiple constructors just returns
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- `primMakeRawUndefined` because we don't know any more about the
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- structure.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance PrimMakeUndefined' a r where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined' _ = primMakeRawUndefined
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>class PrimMakeUndefined'' r where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined'' :: Position__ -> Integer -> r
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- The undefined value of a field is created by calling the typeclass
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- member, not the primitive, in case the field's type also has structure.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>instance (PrimMakeUndefined a) => PrimMakeUndefined'' (Conc a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                       ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                           ^ source.bh meta.declaration.instance.bh
#                                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                             ^ source.bh meta.declaration.instance.bh
#                                                              ^ source.bh meta.declaration.instance.bh
#                                                               ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined'' pos i = Conc $ primMakeUndefined pos i
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^ source.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.infix.bh
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- The exception to the above is when a field is polymorphic (has free type variables);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- in that case, the type of the undefined value won't be known until
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- elaboration time.  The representation type here is a generated wrapper struct
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- with a polymorphic field. This has a PrimMakeUndefined instance that uses
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- `primBuildUndefined` to delay the decision until elaboration time.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- In the elaborator, `primBuildUndefined` becomes a simple
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- call to `primMakeUndefined', of the appropriate type.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>instance (PrimMakeUndefined a) => PrimMakeUndefined'' (ConcPoly a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                       ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.declaration.instance.bh
#                                                                  ^ source.bh meta.declaration.instance.bh
#                                                                   ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined'' pos i = ConcPoly $ primMakeUndefined pos i
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^ source.bh
#                              ^^^^^^^^ source.bh constant.other.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimMakeUndefined'' a) => PrimMakeUndefined'' (Meta m a) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                       ^ source.bh meta.declaration.instance.bh
#                                                        ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                         ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                             ^ source.bh meta.declaration.instance.bh
#                                                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.declaration.instance.bh
#                                                                  ^ source.bh meta.declaration.instance.bh
#                                                                   ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined'' pos i = Meta $ primMakeUndefined'' pos i
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^ source.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.infix.bh
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>instance (PrimMakeUndefined'' a, PrimMakeUndefined'' b) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                             ^ source.bh meta.declaration.instance.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                    ^ source.bh meta.declaration.instance.bh
#                                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh
#                                                        ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         PrimMakeUndefined'' (a, b) where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined'' pos i = (primMakeUndefined'' pos i, primMakeUndefined'' pos i)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.separator.comma.bh
#                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>
>instance PrimMakeUndefined'' () where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh support.constant.unit.bh punctuation.paren.bh
#                              ^ source.bh meta.declaration.instance.bh support.constant.unit.bh punctuation.paren.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^^^^ source.bh keyword.other.where.bh
>  primMakeUndefined'' _ _ = ()
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                             ^ source.bh constant.language.unit.bh punctuation.paren.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \subsubsection{Environment}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>--@ \index{Environment@\te{Environment} (package)|textbf}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ The \te{Environment} section of the Prelude contains some value definitions that remain
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ static within a compilation, but may vary between compilations.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@
#^^^^ source.bh comment.line.documentation.bh
>
>-- The values here are just dummies, the actual values will
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- be inserted by the compiler.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>--@ \index{genC@\te{genC}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Is the compiler generating C?
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Bool genC;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>primitive primGenC :: Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>genC :: Bool
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>genC = primGenC
#^^^^^ source.bh
#     ^ source.bh keyword.operator.eq.bh
#      ^^^^^^^^^^ source.bh
>
>--@ \index{genVerilog@\te{genVerilog}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Is the compiler generating {\veri}?
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Bool genVerilog;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>primitive primGenVerilog :: Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>genVerilog :: Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>genVerilog = primGenVerilog
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>
>genPackageName :: String
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>genPackageName = "Prelude"
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>primitive primGenModuleName :: String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>genModuleName :: String
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>genModuleName = primGenModuleName
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^ source.bh
>
>--@ \index{compilerVersion@\te{compilerVersion}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Version of the compiler.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ String compilerVersion;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>compilerVersion :: String
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>compilerVersion = "Bluespec compiler"
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                   ^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>--@ \index{date@\te{date}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Current date and time.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ String date;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>date :: String
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>date = "2000-01-01 00:00:00"
#^^^^^ source.bh
#     ^ source.bh keyword.operator.eq.bh
#      ^ source.bh
#       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#        ^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>--@ \index{epochTime@\te{epochTime}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Current date and time specified in the number of seconds since 1970-01-01 00:00:00.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Bit#(32) epochTime;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>epochTime :: Bit 32
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>epochTime = 0
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
>
>--@ \index{buildVersion@\te{buildVersion}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ The Version of the compiler.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Bit#(32) buildVersion;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>buildVersion :: Bit 32
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
>buildVersion = 0
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh constant.numeric.integral.decimal.bh
>
>--@ \index{testAssert@\te{testAssert}|textbf}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Test assertions.
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \begin{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ Bool testAssert;
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>--@ \end{libverbatim}
#^^^^ source.bh comment.line.documentation.bh
#    ^^^^^^^^^^^^^^^^^ source.bh comment.line.documentation.bh
>testAssert :: Bool
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>testAssert = False
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^^^^ source.bh constant.other.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Elaboration-time file IO
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>primitive type Handle :: *
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^ source.bh meta.function.type-declaration.bh keyword.other.type.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh storage.type.operator.infix.bh
>
>data IOMode = ReadMode | WriteMode | AppendMode
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.IOMode .bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (Eq)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#              ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>primitive primOpenFile :: String -> Bit 2 -> Module Handle
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>openFile :: (IsModule m c) => String -> IOMode -> m Handle
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>openFile filename mode = liftModule $ primOpenFile filename (primOrd mode)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^^^^^^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
>
>primitive primCloseHandle :: Handle -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                               ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>
>hClose :: (IsModule m c) => Handle -> m Empty
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hClose hdl = liftModule $ do primCloseHandle hdl
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^^ source.bh keyword.control.do.bh
#                            ^^^^^^^^^^^^^^^^^^^^^ source.bh
>                             return (interface Empty {})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^ source.bh
#                                               ^^^^^ source.bh constant.other.bh
#                                                    ^ source.bh
#                                                     ^ source.bh meta.record.bh punctuation.brace.bh
#                                                      ^ source.bh meta.record.bh punctuation.brace.bh
#                                                       ^ source.bh punctuation.paren.bh
>
>primitive primHandleIsEOF :: Handle -> Module (Bit 1)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                               ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
>
>hIsEOF :: (IsModule m c) => Handle -> m Bool
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hIsEOF hdl = liftModule $ do res <- primHandleIsEOF hdl
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^^ source.bh keyword.control.do.bh
#                            ^^^^^ source.bh
#                                 ^^ source.bh keyword.operator.arrow.left.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^ source.bh
>                             return (primChr res)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
>
>primitive primHandleIsOpen :: Handle -> Module (Bit 1)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
>primitive primHandleIsClosed :: Handle -> Module (Bit 1)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
>primitive primHandleIsReadable :: Handle -> Module (Bit 1)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
>primitive primHandleIsWritable :: Handle -> Module (Bit 1)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
>
>hIsOpen :: (IsModule m c) => Handle -> m Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hIsOpen hdl = liftModule $ do res <- primHandleIsOpen hdl
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.control.do.bh
#                             ^^^^^ source.bh
#                                  ^^ source.bh keyword.operator.arrow.left.bh
#                                    ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                              return (primChr res)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>
>hIsClosed :: (IsModule m c) => Handle -> m Bool
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hIsClosed hdl = liftModule $ do res <- primHandleIsClosed hdl
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.infix.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.control.do.bh
#                               ^^^^^ source.bh
#                                    ^^ source.bh keyword.operator.arrow.left.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                                return (primChr res)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>hIsReadable :: (IsModule m c) => Handle -> m Bool
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hIsReadable hdl = liftModule $ do res <- primHandleIsReadable hdl
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^ source.bh
#                               ^^ source.bh keyword.control.do.bh
#                                 ^^^^^ source.bh
#                                      ^^ source.bh keyword.operator.arrow.left.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                                  return (primChr res)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>hIsWritable :: (IsModule m c) => Handle -> m Bool
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hIsWritable hdl = liftModule $ do res <- primHandleIsWritable hdl
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^ source.bh
#                               ^^ source.bh keyword.control.do.bh
#                                 ^^^^^ source.bh
#                                      ^^ source.bh keyword.operator.arrow.left.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                                  return (primChr res)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>
>data BufferMode = NoBuffering
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.BufferMode .bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>                | LineBuffering
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>                | BlockBuffering (Maybe Integer)
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                  ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
>  deriving (Eq)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#              ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>primitive primSetHandleBuffering :: Handle -> BufferMode -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>primitive primGetHandleBuffering :: Handle -> Module BufferMode
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primFlushHandle :: Handle -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                               ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>
>hSetBuffering :: (IsModule m c) => Handle -> BufferMode -> m Empty
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hSetBuffering hdl mode =
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
>    liftModule $ do primSetHandleBuffering hdl mode
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.infix.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.do.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                    return (interface Empty {})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^ source.bh
#                                      ^^^^^ source.bh constant.other.bh
#                                           ^ source.bh
#                                            ^ source.bh meta.record.bh punctuation.brace.bh
#                                             ^ source.bh meta.record.bh punctuation.brace.bh
#                                              ^ source.bh punctuation.paren.bh
>
>hGetBuffering :: (IsModule m c) => Handle -> m BufferMode
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hGetBuffering hdl = liftModule $ primGetHandleBuffering hdl
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.infix.bh
#                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>hFlush :: (IsModule m c) => Handle -> m Empty
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hFlush hdl =
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
>    liftModule $ do primFlushHandle hdl
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.infix.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.do.bh
#                   ^^^^^^^^^^^^^^^^^^^^^ source.bh
>                    return (interface Empty {})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^ source.bh
#                                      ^^^^^ source.bh constant.other.bh
#                                           ^ source.bh
#                                            ^ source.bh meta.record.bh punctuation.brace.bh
#                                             ^ source.bh meta.record.bh punctuation.brace.bh
#                                              ^ source.bh punctuation.paren.bh
>
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>
>primitive primWriteHandle :: Handle -> String -> Module ()
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                                         ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
>
>hPutStr :: (IsModule m c) => Handle -> String -> m Empty
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hPutStr hdl str = liftModule $ do primWriteHandle hdl str
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^ source.bh
#                               ^^ source.bh keyword.control.do.bh
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                                  return (interface Empty {})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^ source.bh
#                                                    ^^^^^ source.bh constant.other.bh
#                                                         ^ source.bh
#                                                          ^ source.bh meta.record.bh punctuation.brace.bh
#                                                           ^ source.bh meta.record.bh punctuation.brace.bh
#                                                            ^ source.bh punctuation.paren.bh
>
>hPutStrLn :: (IsModule m c) => Handle -> String -> m Empty
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hPutStrLn hdl str = hPutStr hdl (str + "\n")
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^ source.bh
#                                     ^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^ source.bh string.quoted.double.bh constant.character.escape.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh punctuation.paren.bh
>
>hPutChar :: (IsModule m c) => Handle -> Char -> m Empty
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hPutChar hdl c = hPutStr hdl (charToString c)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>
>primitive primReadHandleChar :: Handle -> Module Char
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>primitive primReadHandleLine :: Handle -> Module String
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh keyword.other.primitive.bh
#          ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>hGetChar :: (IsModule m c) => Handle -> m Char
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hGetChar hdl = liftModule $ primReadHandleChar hdl
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>hGetLine :: (IsModule m c) => Handle -> m String
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>hGetLine hdl = liftModule $ primReadHandleLine hdl
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- support typechecking of import-BVI parameters and ports using typeclasses
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and catch errors on these typeclasses and report then specially
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>class PrimParam ty primty | ty -> primty where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#               ^ source.bh meta.declaration.class.bh
#                ^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.class.bh
#                   ^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.class.bh
#                               ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.declaration.class.bh
#                                  ^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.class.bh
#                                         ^^^^^ source.bh keyword.other.where.bh
>  primToParam :: ty -> primty
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>class PrimPort ty primty | ty -> primty where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.class.bh
#                  ^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.declaration.class.bh
#                                 ^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.class.bh
#                                        ^^^^^ source.bh keyword.other.where.bh
>  primToPort :: ty -> primty
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- Ports must be bitifiable
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>instance (Bits t tsz) => PrimPort t (Bit tsz) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                     ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                        ^ source.bh meta.declaration.instance.bh
#                                         ^^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh keyword.other.where.bh
>  primToPort x = pack x
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^ source.bh
>
>-- Parameters must be bitifiable, or Integer (which is converted to 32-bit),
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- or String or Real (which are left as is)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>instance (Bits t tsz) => PrimParam t (Bit tsz) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.instance.bh
#                 ^^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                      ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^^^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^ source.bh meta.declaration.instance.bh
#                                               ^^^^^ source.bh keyword.other.where.bh
>  primToParam x = pack x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^ source.bh
>
>instance PrimParam Integer (Bit 32) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                            ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^^ source.bh meta.declaration.instance.bh constant.numeric.integral.decimal.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
>  primToParam x = fromInteger x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^ source.bh
>
>instance PrimParam String String where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                         ^ source.bh meta.declaration.instance.bh
#                          ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^^^^^ source.bh keyword.other.where.bh
>  primToParam x = x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^ source.bh
>
>instance PrimParam Real Real where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^^^^^ source.bh keyword.other.where.bh
>  primToParam x = x
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^ source.bh
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>class FShow t where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#           ^ source.bh meta.declaration.class.bh
#            ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.class.bh
#              ^^^^^ source.bh keyword.other.where.bh
>  fshow :: t -> Fmt
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>instance FShow Fmt where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh keyword.other.where.bh
>  fshow = id
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^ source.bh
>
>instance FShow String where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^^ source.bh keyword.other.where.bh
>  fshow value = $format value
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^^^^^^^ source.bh
>
>instance FShow Char where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^^^^^ source.bh keyword.other.where.bh
>  fshow value = $format (charToString value)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>
>instance FShow PrimUnit where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^ source.bh keyword.other.where.bh
>  fshow _ = $format ""
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh keyword.operator.prefix.dollar.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>{- -- This is derived
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>instance FShow Bool where
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>  fshow True  = $format "True"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>  fshow False = $format "False"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>-}
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>
>{- -- This is derived
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>instance (FShow a) => FShow (Maybe a) where
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>  fshow Invalid = $format "Invalid"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>  fshow (Valid v) = $format "Valid " (fshow v)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.bh
>-}
#^^ source.bh comment.block.bh punctuation.definition.comment.bh
>
>instance FShow (Int n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^ source.bh keyword.other.where.bh
>  fshow value = $format "%d" value
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                            ^^^^^^^ source.bh
>
>instance FShow (UInt n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^ source.bh keyword.other.where.bh
>  fshow value = $format "%d" value
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                            ^^^^^^^ source.bh
>
>instance FShow (Bit n) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^^^^^ source.bh keyword.other.where.bh
>  fshow value = $format "'h%h" value
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.prefix.dollar.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^ source.bh string.quoted.double.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                              ^^^^^^^ source.bh
>
>instance (FShow a, FShow b) => FShow (Tuple2 a b) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                      ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                            ^ source.bh meta.declaration.instance.bh
#                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.instance.bh
#                                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.declaration.instance.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b) = $format "<" (fshow a) "," (fshow b) ">"
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh keyword.operator.prefix.dollar.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                          ^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^ source.bh string.quoted.double.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                      ^ source.bh string.quoted.double.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a, FShow b, FShow c) => FShow (Tuple3 a b c) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                               ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.declaration.instance.bh
#                                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.declaration.instance.bh
#                                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.instance.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b, c) = $format "<" (fshow a) "," (fshow b) "," (fshow c) ">"
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.prefix.dollar.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a, FShow b, FShow c, FShow d) => FShow (Tuple4 a b c d) where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                                                ^ source.bh meta.declaration.instance.bh
#                                                 ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                                                        ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                              ^ source.bh meta.declaration.instance.bh
#                                                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                ^ source.bh meta.declaration.instance.bh
#                                                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                  ^ source.bh meta.declaration.instance.bh
#                                                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.declaration.instance.bh
#                                                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                      ^ source.bh meta.declaration.instance.bh
#                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                        ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b, c, d) =
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
>      $format "<" (fshow a) "," (fshow b) "," (fshow c) "," (fshow d) ">"
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.prefix.dollar.bh
#       ^^^^^^^ source.bh
#              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#               ^ source.bh string.quoted.double.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a, FShow b, FShow c, FShow d, FShow e) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.instance.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         FShow (Tuple5 a b c d e) where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b, c, d, e) =
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
>      $format "<" (fshow a) "," (fshow b) "," (fshow c) "," (fshow d) ","
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.prefix.dollar.bh
#       ^^^^^^^ source.bh
#              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#               ^ source.bh string.quoted.double.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                  (fshow e) ">"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a, FShow b, FShow c, FShow d, FShow e, FShow f) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.instance.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         FShow (Tuple6 a b c d e f) where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b, c, d, e, f) =
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.separator.comma.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>      $format "<" (fshow a) "," (fshow b) "," (fshow c) "," (fshow d) ","
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.prefix.dollar.bh
#       ^^^^^^^ source.bh
#              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#               ^ source.bh string.quoted.double.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                  (fshow e) "," (fshow f) ">"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a, FShow b, FShow c, FShow d, FShow e, FShow f, FShow g) =>
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                       ^ source.bh meta.declaration.instance.bh
#                                                                        ^ source.bh meta.declaration.instance.bh
#                                                                         ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
>         FShow (Tuple7 a b c d e f g) where
#^^^^^^^^^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                      ^ source.bh meta.declaration.instance.bh
#                       ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.instance.bh
#                                 ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.instance.bh
#                                   ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b, c, d, e, f, g) =
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.separator.comma.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.separator.comma.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>      $format "<" (fshow a) "," (fshow b) "," (fshow c) "," (fshow d) ","
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.prefix.dollar.bh
#       ^^^^^^^ source.bh
#              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#               ^ source.bh string.quoted.double.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                  (fshow e) "," (fshow f) "," (fshow g) ">"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a, FShow b, FShow c, FShow d, FShow e, FShow f, FShow g,
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                        ^ source.bh meta.declaration.instance.bh
#                         ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                          ^ source.bh meta.declaration.instance.bh
#                                           ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                                      ^ source.bh meta.declaration.instance.bh
#                                                       ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                            ^ source.bh meta.declaration.instance.bh
#                                                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
#                                                               ^ source.bh meta.declaration.instance.bh
#                                                                ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                                                     ^ source.bh meta.declaration.instance.bh
#                                                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                                       ^ source.bh meta.declaration.instance.bh punctuation.separator.comma.bh
>          FShow h) => FShow (Tuple8 a b c d e f g h) where
#^^^^^^^^^^ source.bh meta.declaration.instance.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                             ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                   ^ source.bh meta.declaration.instance.bh
#                                    ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.instance.bh
#                                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.instance.bh
#                                        ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.declaration.instance.bh
#                                          ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.instance.bh
#                                            ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.instance.bh
#                                              ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.declaration.instance.bh
#                                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.instance.bh
#                                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.instance.bh
#                                                    ^ source.bh meta.declaration.instance.bh
#                                                     ^^^^^ source.bh keyword.other.where.bh
>  fshow (a, b, c, d, e, f, g, h) =
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.separator.comma.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.separator.comma.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.separator.comma.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>      $format "<" (fshow a) "," (fshow b) "," (fshow c) "," (fshow d) ","
#^^^^^^ source.bh
#      ^ source.bh keyword.operator.prefix.dollar.bh
#       ^^^^^^^ source.bh
#              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#               ^ source.bh string.quoted.double.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>                  (fshow e) "," (fshow f) "," (fshow g) "," (fshow h) ">"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                             ^ source.bh string.quoted.double.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>instance (FShow a) => FShow (List a)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#               ^ source.bh meta.declaration.instance.bh
#                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh
#                   ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                           ^ source.bh meta.declaration.instance.bh
#                            ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                             ^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    fshow value =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
>        let insertSpace a b = a + ($format " ") + b
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^ source.bh
#                                ^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh keyword.operator.prefix.dollar.bh
#                                    ^^^^^^^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^ source.bh keyword.operator.infix.bh
#                                                 ^^^ source.bh
>            fmts = listPrimMap fshow value
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>            -- XXX This adds an extra space at the end
#^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#            ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>            elements = listPrimFoldR insertSpace (fshow "") fmts
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^^^^^^ source.bh
>        in  $format "<List " elements " >"
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.other.in.bh
#          ^^ source.bh
#            ^ source.bh keyword.operator.prefix.dollar.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                     ^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                            ^^^^^^^^^^ source.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^ source.bh string.quoted.double.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- The idea of the DefaultValue typeclass is to provide an overloaded
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- value, defaultValue (for defaultValue), for the type t.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Uses:
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^ source.bh comment.line.double-dash.bh
>-- This should be useful for specifying initial or reset value for
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- structures. E.g.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   Reg#(Int#(17))               rint  <- mkReg#(defaultValue); -- initial value 0
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   Reg#(Tuple2#(Bool,UInt#(5))) tbui  <- mkReg#(defaultValue); -- value is(False,0)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   Reg#(Vector#(n,Bool)         vbool <- mkReg(defaultValue)   --  initial value all False
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   Reg#(MyStruct)               mstr  <- mkReg(defaultValue);  -- defined by user
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- using this typeclass should replace the unsafe use of unpack. e.g.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--   Reg#(MyStruct)               mybad <- mkReg(unpack(0)); -- Bad use of unpack
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Another use model is for module instantiation which require a large structure as
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- as argument.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- ModParam modParams = defaultValue ; -- generate default value
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- modParams.field1 = 5 ;        -- override some default values
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- modParams.field2 = 1.4 ;      --
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- ModIfc <- mkMod (modParams) ; -- construct the module
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>
>class coherent DefaultValue a where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.class.bh
#               ^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                           ^ source.bh meta.declaration.class.bh
#                            ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^^^^^ source.bh keyword.other.where.bh
>   defaultValue :: a
#^^^ source.bh meta.function.type-declaration.bh
#   ^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- Any type in the Literal class can have a default value -- simply 0
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- This picks up Bit#(n), Int#(n), UInt#(n), Real, Integer
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- as well as FixedPoint, Complex
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>instance (Literal t) => DefaultValue t where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#          ^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.instance.bh
#                    ^ source.bh meta.declaration.instance.bh
#                     ^^ source.bh meta.declaration.instance.bh keyword.operator.big-arrow.bh
#                       ^ source.bh meta.declaration.instance.bh
#                        ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.instance.bh
#                                       ^^^^^ source.bh keyword.other.where.bh
>   defaultValue = fromInteger 0
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh constant.numeric.integral.decimal.bh
>
>
>------------------
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Support for datatype-generic functions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- Inspired by GHC Generics:
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- https://hackage.haskell.org/package/base-4.14.0.0/docs/GHC-Generics.html
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- By providing a facility (the 'Generic' typeclass below) for converting
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- values of a datatype 'a' into a generic representation `r`, built from
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- a limited set of type constructors, we allow users to overload functions
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- for any representable type by writing only a few instances (for the
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- limited set of constructors) along with a wrapper that maps between 'a'
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and 'r'.  A clear example of this can be found in the CShow library,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- where CShow is the wrapper and CShow' has instances for the type
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- constructors.  The typeclasses PrimDeepSeqCond, PrimMakeUninitialized,
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- and PrimMakeUndefined (with their associated prime'd typeclasses) are
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- also examples, in this file.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
>-- BSC automatically derives an instance of 'Generic' for all types that
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- don't have an explicit instance.  For libraries that export a type
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- abstractly (without exporting its internals), an explicit instance is
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- needed, to avoid exposing the internal implementation; see the 'Vector'
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- library for an example of this.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- Representable types of kind *
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>class Generic a r | a -> r where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#             ^ source.bh meta.declaration.class.bh
#              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.class.bh
#                ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.class.bh
#                  ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                   ^ source.bh meta.declaration.class.bh
#                    ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.class.bh
#                      ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^^^^^ source.bh keyword.other.where.bh
>  from :: a -> r
#^^ source.bh meta.function.type-declaration.bh
#  ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>  to :: r -> a
#^^ source.bh meta.function.type-declaration.bh
#  ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>
>-- Sum types (e.g. data/unions) are represented by the type Either.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>-- Product types (e.g. structs/data constructors) are represented by types PrimPair/PrimUnit.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>-- Fixed-size collection types (e.g. Vector and ListN) are represented by the type Vector.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>-- Regular, non-representation types may only appear within a generic representation
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>-- type when wrapped in one of the following "Conc" type constructors:
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>-- Represents a regular element type in a Generic instance.
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>data Conc a = Conc a
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Conc a .bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- Represents a primitive type in a Generic instance for a primitive, this is
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- seperate from Conc to avoid infinite recursion through an instance for Conc
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- on the ' type class that defaults back to the non-generic one.
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data ConcPrim a = ConcPrim a
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.ConcPrim a .bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- Represents a higher-rank (polymorphic) field type in a derived Generic instance
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- for a data/struct type.  Here 'a' is a generated wrapper struct for the field type
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- rather than the field type itself, since the latter is impossible to specify in
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- a type class instance (for Generic.)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data ConcPoly a = ConcPoly a
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.ConcPoly a .bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- Tags a representation type 'r' with a metadata type 'm'
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data Meta m r = Meta r
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Meta m r .bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh
#                     ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- The 'm' type in `Meta m r` must be one of the following types:
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>
>-- Indicates that a representation is for a type (e.g. struct/data) with a name,
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- package, type arguments and number of constructors
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data (MetaData :: $ -> $ -> * -> # -> *) name pkg tyargs ncons = MetaData
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(MetaData :: $ -> $ -> * -> # -> *) name pkg tyargs ncons .bh
#                                                              ^ source.bh meta.declaration.data.algebraic.bh
#                                                               ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                                                                ^ source.bh meta.declaration.data.algebraic.bh
#                                                                 ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>-- Wrappers for types appearing in the MetaData type arguments;
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- only kinds *, # and $ are made available, constructor-kinded type arguments
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- cannot be handled in general and are omitted from the ConArg representation type.
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data (StarArg :: * -> *) i = StarArg
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(StarArg :: * -> *) i .bh
#                          ^ source.bh meta.declaration.data.algebraic.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>data (NumArg :: # -> *) i = NumArg
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(NumArg :: # -> *) i .bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh
#                            ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>data (StrArg :: $ -> *) i = StrArg
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(StrArg :: $ -> *) i .bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh
#                            ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>data ConArg = ConArg
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.ConArg .bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.data.algebraic.bh
#              ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- Indicates that a representation is for a constructor with named fields,
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- with a name, index in the data's constructors, and number of fields
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data (MetaConsNamed :: $ -> # -> # -> *) name idx nfields = MetaConsNamed
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(MetaConsNamed :: $ -> # -> # -> *) name idx nfields .bh
#                                                         ^ source.bh meta.declaration.data.algebraic.bh
#                                                          ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                                                           ^ source.bh meta.declaration.data.algebraic.bh
#                                                            ^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- Indicates that a representation is for a constructor with anonymous fields,
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- with a name, index in the data's constructors, and number of fields
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data (MetaConsAnon :: $ -> # -> # -> *) name idx nfields = MetaConsAnon
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(MetaConsAnon :: $ -> # -> # -> *) name idx nfields .bh
#                                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                                         ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                                                          ^ source.bh meta.declaration.data.algebraic.bh
#                                                           ^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>-- Indicates that a representation is for a field, with a field name (either the
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- given name for a named field or the generated field name for an anonymous
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>-- field) and index in the constructor's fields
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh comment.line.double-dash.bh
>data (MetaField :: $ -> # -> *) name idx = MetaField
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.(MetaField :: $ -> # -> *) name idx .bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                         ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                                          ^ source.bh meta.declaration.data.algebraic.bh
#                                           ^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>  deriving (FShow)
#^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#  ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#          ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#           ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#            ^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>