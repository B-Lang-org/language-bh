>package StmtFSM (
#^^^^^^^ source.bh meta.declaration.package.bh keyword.other.package.bh
#       ^ source.bh meta.declaration.package.bh
#        ^^^^^^^ source.bh meta.declaration.package.bh entity.name.namespace.bh
#               ^ source.bh meta.declaration.package.bh
#                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
>                 -- re-exports from the Stmt package
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#                 ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>                 StmtT(..),
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 StmtTifiable(..),
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                              ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 RStmt(..),
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 Stmt(..),
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 StmtM(..),
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 RStmts,
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 unS, _s__, s,
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                            ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 PosInfo, noPosInfo, getPIString, addPIPrefix,
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                     ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                  ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 await, delay, Once(..), mkOnce,
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                               ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                    ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 -- new exports
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.whitespace.comment.leading.bh
#                 ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                   ^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh comment.line.double-dash.bh
>                 RFSM(..), FSMAbort(..), mkRFSM,
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                      ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                           ^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                    ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                         ^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 FSM(..), FSMServer(..),
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                    ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                     ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                        ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                         ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                          ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                   ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                    ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 mkFSM, mkFSMWithPred, mkAutoFSM, mkFSMServer, mkAlwaysFSM, mkAlwaysFSMWithPred,
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                        ^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                       ^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                 ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                  ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                             ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                              ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                               ^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                          ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                                           ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                                            ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh entity.name.function.bh
#                                                                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
>                 ServerCallToStmtT(..), ActionType(..), Freedom(..)
#^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                 ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                   ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                        ^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                   ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                     ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.separator.comma.bh
#                                                       ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                                                        ^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                                                                ^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh variable.other.member.wildcard.bh
#                                                                  ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
>                      ) where
#^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.package.bh meta.declaration.exports.bh
#                      ^ source.bh meta.declaration.package.bh meta.declaration.exports.bh punctuation.paren.bh
#                       ^ source.bh meta.declaration.package.bh
#                        ^^^^^ source.bh keyword.other.where.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>import ClientServer
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^^^^^^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import ConfigReg
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^^^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import DReg
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import FIFO
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import GetPut
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import List
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import TurboFIFO
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^^^^^^ source.bh meta.import.bh entity.name.namespace.bh
>import ToString
#^^^^^^ source.bh meta.import.bh keyword.other.import.bh
#      ^ source.bh meta.import.bh
#       ^^^^^^^^ source.bh meta.import.bh entity.name.namespace.bh
>
>-- #############################################################################
#^^ source.bh meta.import.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.import.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.import.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.import.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.import.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.import.bh comment.line.double-dash.bh
>idle_state :: Integer
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>idle_state = 0
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh constant.numeric.integral.decimal.bh
>
>--type PosInfo = (String, Position__)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>type PosInfo = String
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#            ^ source.bh meta.declaration.type.bh
#             ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.type.bh
#               ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
>
>noPosInfo :: PosInfo
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>--noPosInfo = ("_np", noPosition)
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>noPosInfo = "_np"
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^ source.bh string.quoted.double.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>getPIString :: PosInfo -> String
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>--getPIString (l, p) = l
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>getPIString l = l
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^ source.bh
>
>getPIPosition :: PosInfo -> Position__
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getPIPosition l = getStringPosition( getPIString l)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>addPIPrefix :: String -> PosInfo -> PosInfo
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>--addPIPrefix x (l,p) = ((x +++ l), p)
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>addPIPrefix x y = (x +++ y)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^ source.bh
#                     ^^^ source.bh keyword.operator.infix.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>
>data Freedom
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.Freedom.bh
#           ^ source.bh meta.declaration.data.algebraic.bh
>        = Early String -- string is comment for warning message
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh
>        | Overlap
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>    deriving (Eq)
#^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#    ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#            ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#             ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>data ActionType
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.ActionType.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
>        = Default
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>        | Update Freedom
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | Jump String
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | Wait
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>        | NoME
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>    deriving (Eq)
#^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#    ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#            ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#             ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>nAT :: Maybe ActionType
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nAT = Nothing
#^^^^ source.bh
#    ^ source.bh keyword.operator.eq.bh
#     ^ source.bh
#      ^^^^^^^ source.bh constant.other.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>eR :: Rules
#^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#  ^ source.bh meta.function.type-declaration.bh
#   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>eR = emptyRules
#^^^ source.bh
#   ^ source.bh keyword.operator.eq.bh
#    ^^^^^^^^^^^^ source.bh
>
>nR :: Maybe RuleSet
#^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#  ^ source.bh meta.function.type-declaration.bh
#   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nR = Nothing
#^^^ source.bh
#   ^ source.bh keyword.operator.eq.bh
#    ^ source.bh
#     ^^^^^^^ source.bh constant.other.bh
>
>struct RuleSet
#^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.struct.bh
#      ^ source.bh meta.declaration.struct.algebraic.bh
#       ^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.RuleSet.bh
#             ^ source.bh meta.declaration.struct.algebraic.bh
>  =
#^^ source.bh meta.declaration.struct.algebraic.bh
#  ^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.eq.bh
>    me_local   :: Rules
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#            ^^^ source.bh meta.declaration.struct.algebraic.bh
#               ^^ source.bh meta.declaration.struct.algebraic.bh constant.other.operator.infix.bh
#                 ^ source.bh meta.declaration.struct.algebraic.bh
#                  ^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>    me_parents :: Rules
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.struct.algebraic.bh
#               ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.declaration.struct.algebraic.bh
#                  ^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>    no_me      :: Rules
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#         ^^^^^^ source.bh meta.declaration.struct.algebraic.bh
#               ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.declaration.struct.algebraic.bh
#                  ^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>
>
>emptyRuleSet :: RuleSet
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>emptyRuleSet = RuleSet {me_local   = eR;
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh meta.record.bh punctuation.brace.bh
#                        ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                ^^^ source.bh meta.record.bh
#                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                    ^^^^^ source.bh meta.record.bh
>                        me_parents = eR;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                    ^^^^^ source.bh meta.record.bh
>                        no_me      = eR}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                    ^^^ source.bh meta.record.bh
#                                       ^ source.bh meta.record.bh punctuation.brace.bh
>
>combineRuleSets :: RuleSet -> RuleSet -> RuleSet
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>combineRuleSets rs0 rs1 =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
>                RuleSet {me_local   = (rJoinMutuallyExclusive rs0.me_local rs1.me_local);
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^ source.bh
#                        ^ source.bh meta.record.bh punctuation.brace.bh
#                         ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                 ^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                 ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                                  ^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                              ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                                               ^^^^^^^^ source.bh meta.record.bh
#                                                                                       ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                                        ^^ source.bh meta.record.bh
>                         me_parents = (rJoin rs0.me_parents rs1.me_parents);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                       ^^^^^^^^^ source.bh meta.record.bh
#                                                ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                 ^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                               ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                                ^^^^^^^^^^ source.bh meta.record.bh
#                                                                          ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                           ^^ source.bh meta.record.bh
>                         no_me      = (rJoin rs0.no_me rs1.no_me) }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                       ^^^^^^^^^ source.bh meta.record.bh
#                                                ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                 ^^^^^^^^^ source.bh meta.record.bh
#                                                          ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                           ^^^^^ source.bh meta.record.bh
#                                                                ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                 ^ source.bh meta.record.bh
#                                                                  ^ source.bh meta.record.bh punctuation.brace.bh
>
>mergeRuleSets :: RuleSet -> RuleSet -> RuleSet
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mergeRuleSets rs0 rs1 =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>                RuleSet {me_local   = (rJoin rs0.me_local rs1.me_local);
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^ source.bh
#                        ^ source.bh meta.record.bh punctuation.brace.bh
#                         ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                 ^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                       ^^^^^^^^^ source.bh meta.record.bh
#                                                ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                 ^^^^^^^^^^^^ source.bh meta.record.bh
#                                                             ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                              ^^^^^^^^ source.bh meta.record.bh
#                                                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                       ^^ source.bh meta.record.bh
>                         me_parents = (rJoin rs0.me_parents rs1.me_parents);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                       ^^^^^^^^^ source.bh meta.record.bh
#                                                ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                 ^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                               ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                                ^^^^^^^^^^ source.bh meta.record.bh
#                                                                          ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                           ^^ source.bh meta.record.bh
>                         no_me      = (rJoin rs0.no_me rs1.no_me) }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh punctuation.paren.bh
#                                       ^^^^^^^^^ source.bh meta.record.bh
#                                                ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                 ^^^^^^^^^ source.bh meta.record.bh
#                                                          ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                           ^^^^^ source.bh meta.record.bh
#                                                                ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                 ^ source.bh meta.record.bh
#                                                                  ^ source.bh meta.record.bh punctuation.brace.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>data StmtT a
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.StmtT a.bh
#           ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>        = SAction PosInfo Action (Maybe ActionType)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                  ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
>        | SActionValue PosInfo (ActionValue a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                ^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                           ^ source.bh meta.declaration.data.algebraic.bh
#                                            ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.declaration.data.algebraic.bh
>        | SNamed PosInfo String  (List (StmtT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                               ^^ source.bh meta.declaration.data.algebraic.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                  ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                        ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                             ^ source.bh meta.declaration.data.algebraic.bh
#                                              ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh
>        | SLabel PosInfo String Bool (Maybe (StmtT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh
#                                ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                      ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                           ^ source.bh meta.declaration.data.algebraic.bh
#                                            ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                             ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                                   ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                                     ^ source.bh meta.declaration.data.algebraic.bh
>        | SJump PosInfo String
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SCall PosInfo Action Action Action -- abort_action, start_action, end_action
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh
#                               ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                      ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                            ^ source.bh meta.declaration.data.algebraic.bh
#                                             ^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh
>        | SUntil PosInfo Bool
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SIf1 PosInfo Bool (StmtT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                             ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
>        | SIf2 PosInfo Bool (StmtT a) (StmtT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                             ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                       ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                            ^ source.bh meta.declaration.data.algebraic.bh
#                                             ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.data.algebraic.bh
>        | SWhile PosInfo Bool (StmtT a) (Maybe (StmtT a)) (Maybe (StmtT a)) (Maybe (StmtT a)) -- init_action, pre_action, post_action
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                               ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                         ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                              ^ source.bh meta.declaration.data.algebraic.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                                      ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                                         ^ source.bh meta.declaration.data.algebraic.bh
#                                                          ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                           ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                ^ source.bh meta.declaration.data.algebraic.bh
#                                                                 ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                                  ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                                                        ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.declaration.data.algebraic.bh
#                                                                          ^ source.bh meta.declaration.data.algebraic.bh
#                                                                           ^ source.bh meta.declaration.data.algebraic.bh
#                                                                            ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                                             ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                   ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                                                    ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                                         ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                          ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                                                           ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                            ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                             ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                              ^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh
>        | SFor PosInfo (StmtT a) Bool (StmtT a) (StmtT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                        ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                       ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                            ^ source.bh meta.declaration.data.algebraic.bh
#                                             ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.data.algebraic.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                      ^ source.bh meta.declaration.data.algebraic.bh
#                                                       ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.declaration.data.algebraic.bh
>        | SSeq PosInfo (List (StmtT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                        ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                              ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
>        | SPar PosInfo (List (StmtT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#              ^ source.bh meta.declaration.data.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                        ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                              ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
>        | SSkip PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SRepeat PosInfo Nat (StmtT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                               ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
>        | SDelay PosInfo Nat
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SReturn PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SBreak PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SContinue PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh
#                    ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SExprS PosInfo (RStmt a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                          ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh
>
>class StmtTifiable t a | t -> a where stmtify :: PosInfo -> t -> (StmtT a)
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                  ^ source.bh meta.declaration.class.bh
#                   ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.class.bh
#                     ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.class.bh
#                       ^ source.bh meta.declaration.class.bh keyword.operator.pipe.bh
#                        ^ source.bh meta.declaration.class.bh
#                         ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.class.bh
#                           ^^ source.bh meta.declaration.class.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.declaration.class.bh
#                              ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                               ^ source.bh meta.declaration.class.bh
#                                ^^^^^ source.bh keyword.other.where.bh
#                                     ^^^^^^^^^ source.bh
#                                              ^^ source.bh keyword.operator.double-colon.bh
#                                                ^ source.bh
#                                                 ^^^^^^^ source.bh storage.type.bh
#                                                        ^ source.bh
#                                                         ^^ source.bh keyword.operator.arrow.bh
#                                                           ^ source.bh
#                                                            ^ source.bh variable.other.generic-type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh keyword.operator.arrow.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^^^ source.bh storage.type.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh variable.other.generic-type.bh
#                                                                         ^ source.bh
>
>instance StmtTifiable Action t where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^^^^^ source.bh keyword.other.where.bh
>    stmtify p a = SAction p a Nothing
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^^ source.bh
#                              ^^^^^^^ source.bh constant.other.bh
>
>instance StmtTifiable (RStmt a) a where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                       ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                            ^ source.bh meta.declaration.instance.bh
#                             ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.instance.bh
#                               ^ source.bh meta.declaration.instance.bh
#                                ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
>    stmtify p st = SExprS p st
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^^^^^ source.bh constant.other.bh
#                         ^^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>type RStmts a = List (StmtT a)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.type.bh
#              ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.type.bh
#                ^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                    ^ source.bh meta.declaration.type.bh
#                     ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                      ^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                           ^ source.bh meta.declaration.type.bh
#                            ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.type.bh
>
>type RStmt a = StmtM a ()
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#          ^ source.bh meta.declaration.type.bh
#           ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.type.bh
#             ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.type.bh
#               ^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                    ^ source.bh meta.declaration.type.bh
#                     ^ source.bh meta.declaration.type.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.type.bh
#                       ^ source.bh meta.declaration.type.bh support.constant.unit.bh punctuation.paren.bh
#                        ^ source.bh meta.declaration.type.bh support.constant.unit.bh punctuation.paren.bh
>
>data StmtM a b
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.StmtM a b.bh
#             ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>        = S (Module (b, (RStmts a)))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#           ^ source.bh meta.declaration.data.algebraic.bh
#            ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#             ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh
#                    ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                     ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                      ^ source.bh meta.declaration.data.algebraic.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh
>
>unS :: StmtM a b -> Module (b, (RStmts a))
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh
>unS (S x) = x
#^^^^ source.bh
#    ^ source.bh punctuation.paren.bh
#     ^ source.bh constant.other.bh
#      ^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^ source.bh
>
>instance Monad (StmtM a)
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#              ^ source.bh meta.declaration.instance.bh
#               ^ source.bh meta.declaration.instance.bh punctuation.paren.bh
#                ^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                     ^ source.bh meta.declaration.instance.bh
#                      ^ source.bh meta.declaration.instance.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.instance.bh
>  where
#^^ source.bh meta.declaration.instance.bh
#  ^^^^^ source.bh keyword.other.where.bh
>    return x = S (return (x, Nil))
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh constant.other.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^ source.bh
#                             ^^^ source.bh constant.other.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh punctuation.paren.bh
>    bind (S x) f = S
#^^^^^^^^^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^ source.bh constant.other.bh
#           ^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh constant.other.bh
>        do  (xa, xs) <- x
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.do.bh
#          ^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^ source.bh punctuation.separator.comma.bh
#                ^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^^ source.bh keyword.operator.arrow.left.bh
#                       ^^^ source.bh
>            (fa, fs) <- unS (f xa)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^ source.bh punctuation.separator.comma.bh
#                ^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^^ source.bh keyword.operator.arrow.left.bh
#                       ^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>            return (fa, xs `append` fs)
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.separator.comma.bh
#                       ^^^^ source.bh
#                           ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#                            ^^^^^^ source.bh keyword.operator.function.infix.bh
#                                  ^ source.bh keyword.operator.function.infix.bh punctuation.backtick.bh
#                                   ^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>
>stmt :: (Monad m) => (StmtT a) -> m ((), (RStmts a))
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                     ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                      ^ source.bh meta.function.type-declaration.bh support.constant.unit.bh punctuation.paren.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
>stmt st = return ((), st :> Nil)
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                   ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                    ^ source.bh punctuation.separator.comma.bh
#                     ^^^^ source.bh
#                         ^^ source.bh constant.other.operator.infix.bh
#                           ^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh punctuation.paren.bh
>
>_s__ :: StmtT a -> RStmt a
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>_s__ st = S (stmt st)
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^ source.bh
#          ^ source.bh constant.other.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
>
>s :: Action -> RStmt a
#^ source.bh meta.function.type-declaration.bh entity.name.function.bh
# ^ source.bh meta.function.type-declaration.bh
#  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>s x = _s__ (SAction noPosInfo x Nothing)
#^^^^ source.bh
#    ^ source.bh keyword.operator.eq.bh
#     ^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^^^^ source.bh
#                                ^^^^^^^ source.bh constant.other.bh
#                                       ^ source.bh punctuation.paren.bh
>
>type Stmt = RStmt (Bit 0)
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^ source.bh meta.declaration.type.bh storage.type.bh
#         ^ source.bh meta.declaration.type.bh
#          ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#           ^ source.bh meta.declaration.type.bh
#            ^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                 ^ source.bh meta.declaration.type.bh
#                  ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#                   ^^^ source.bh meta.declaration.type.bh storage.type.bh
#                      ^ source.bh meta.declaration.type.bh
#                       ^ source.bh meta.declaration.type.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh meta.declaration.type.bh
>
>-- #############################################################################
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>
>stmtTToString :: (Monad m) => (StmtT a) -> m String
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stmtTToString (SAction p _ (Just Default)) = return ("[DD Action" +++ (getPIString p) +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^^^^^^^ source.bh constant.other.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                      ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh
#                                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^^^^^^^^^^^^^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^ source.bh
#                                                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                                                         ^ source.bh
#                                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                           ^ source.bh string.quoted.double.bh
#                                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                             ^ source.bh punctuation.paren.bh
>stmtTToString (SAction p _ (Just (Jump l))) = return ("[Jump Action" +++ (getPIString p) +++ " " +++ l +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                       ^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                    ^ source.bh
#                                                                     ^^^ source.bh keyword.operator.infix.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
#                                                                          ^^^^^^^^^^^^^ source.bh
#                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                        ^ source.bh
#                                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                                            ^ source.bh
#                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                              ^ source.bh string.quoted.double.bh
#                                                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                ^ source.bh
#                                                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                                                    ^^^ source.bh
#                                                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                                                          ^ source.bh
#                                                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                            ^ source.bh string.quoted.double.bh
#                                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                              ^ source.bh punctuation.paren.bh
>stmtTToString (SAction p _ _) = return ("[Action" +++ (getPIString p) +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                         ^^^^^^^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                                         ^ source.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                           ^ source.bh string.quoted.double.bh
#                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                             ^ source.bh punctuation.paren.bh
>stmtTToString (SActionValue p _) = return ("[ActionValue" +++ (getPIString p) +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^ source.bh constant.other.bh
#                           ^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                         ^ source.bh
#                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                             ^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^^^^^^^^^^^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^ source.bh
#                                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                                 ^ source.bh
#                                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                   ^ source.bh string.quoted.double.bh
#                                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                     ^ source.bh punctuation.paren.bh
>stmtTToString (SIf1 p _ st)  =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[If1" +++(getPIString p)+++ " " +++ sub +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                               ^ source.bh punctuation.paren.bh
>stmtTToString (SIf2 p _ s0 s1)  =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>    do sub0 <- stmtTToString s0
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^ source.bh
>       sub1 <- stmtTToString s1
#^^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[If2" +++(getPIString p)+++ " " +++ sub0 +++ " " +++ sub1 +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                ^ source.bh
#                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                    ^^^^^^ source.bh
#                                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                               ^ source.bh string.quoted.double.bh
#                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>stmtTToString (SSeq p ss) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>    do subs <- stmtTListToString ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[Seq" +++(getPIString p)+++ " " +++ subs +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                ^ source.bh punctuation.paren.bh
>stmtTToString (SPar p ss) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>    do subs <- stmtTListToString ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[Par" +++(getPIString p)+++ " " +++ subs +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                ^ source.bh punctuation.paren.bh
>stmtTToString (SSkip p) = return ("[Skip" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                   ^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                         ^ source.bh
#                                          ^^^ source.bh keyword.operator.infix.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                               ^ source.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                 ^ source.bh string.quoted.double.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                   ^ source.bh punctuation.paren.bh
>stmtTToString (SCall p _ _ _) = return ("[Call" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                         ^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh punctuation.paren.bh
>stmtTToString (SReturn p) = return ("[Return" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^ source.bh string.quoted.double.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                             ^ source.bh
#                                              ^^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                     ^ source.bh string.quoted.double.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                       ^ source.bh punctuation.paren.bh
>stmtTToString (SBreak p) = return ("[Break" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                    ^^^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh
#                                            ^^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                   ^ source.bh string.quoted.double.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                     ^ source.bh punctuation.paren.bh
>stmtTToString (SContinue p) = return ("[Continue" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^ source.bh keyword.operator.infix.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                         ^ source.bh string.quoted.double.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                           ^ source.bh punctuation.paren.bh
>stmtTToString (SLabel p name _ _) = return ("[Label " +++ name +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^^^^^^^ source.bh string.quoted.double.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                     ^ source.bh
#                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                         ^^^^^^ source.bh
#                                                               ^^^ source.bh keyword.operator.infix.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^^^^^^^^^^^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                                    ^ source.bh
#                                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                      ^ source.bh string.quoted.double.bh
#                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                        ^ source.bh punctuation.paren.bh
>stmtTToString (SJump p name) = return ("[Jump " +++ name +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^^^ source.bh keyword.operator.infix.bh
#                                                                              ^ source.bh
#                                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                ^ source.bh string.quoted.double.bh
#                                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                  ^ source.bh punctuation.paren.bh
>stmtTToString (SUntil _ _) = return ("[SUntil]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh punctuation.paren.bh
>stmtTToString (SWhile p _ st _ _ _) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[While" +++(getPIString p)+++ " " +++ sub +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^ source.bh string.quoted.double.bh
#                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                       ^ source.bh
#                        ^^^ source.bh keyword.operator.infix.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^ source.bh keyword.operator.infix.bh
#                                             ^ source.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                               ^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^^^^^ source.bh
#                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                             ^ source.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                               ^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh punctuation.paren.bh
>stmtTToString (SRepeat p _ st) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[Repeat" +++(getPIString p)+++ " " +++ sub +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^ source.bh keyword.operator.infix.bh
#                                              ^ source.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                ^ source.bh string.quoted.double.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                  ^ source.bh
#                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                      ^^^^^ source.bh
#                                                           ^^^ source.bh keyword.operator.infix.bh
#                                                              ^ source.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                ^ source.bh string.quoted.double.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                  ^ source.bh punctuation.paren.bh
>stmtTToString (SDelay p _) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>    return ("[Delay" +++(getPIString p)+++ " " +++ "]")
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^ source.bh string.quoted.double.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                    ^ source.bh
#                     ^^^ source.bh keyword.operator.infix.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^ source.bh keyword.operator.infix.bh
#                                          ^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                              ^ source.bh
#                                               ^^^ source.bh keyword.operator.infix.bh
#                                                  ^ source.bh
#                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                    ^ source.bh string.quoted.double.bh
#                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                      ^ source.bh punctuation.paren.bh
>stmtTToString (SFor p s1 _ s2 s3) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    do x1 <- stmtTToString s1
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^ source.bh
>       x2 <- stmtTToString s2
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^ source.bh
>       x3 <- stmtTToString s3
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[SFor" +++(getPIString p)+++ " " +++ x1 +++ " " +++ x2 +++ " " +++ x3 +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^ source.bh string.quoted.double.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                              ^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                    ^^^^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                               ^ source.bh
#                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                   ^^^^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                            ^ source.bh string.quoted.double.bh
#                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                              ^ source.bh
#                                                                               ^^^ source.bh keyword.operator.infix.bh
#                                                                                  ^^^^ source.bh
#                                                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                                                         ^ source.bh
#                                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                           ^ source.bh string.quoted.double.bh
#                                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                             ^ source.bh punctuation.paren.bh
>stmtTToString (SNamed p nm Nil)  =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^^^ source.bh
#                           ^^^ source.bh constant.other.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    return ("[SNamed " +++ nm +++(getPIString p)+++ "]")
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^ source.bh string.quoted.double.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^^^^ source.bh
#                              ^^^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^ source.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                     ^ source.bh string.quoted.double.bh
#                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                       ^ source.bh punctuation.paren.bh
>stmtTToString (SNamed p nm (Cons st Nil)) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^^ source.bh
#                                    ^^^ source.bh constant.other.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[SNamed " +++ nm +++(getPIString p)+++ " [" +++ sub +++ "]]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^^^ source.bh
#                                 ^^^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                      ^ source.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                        ^^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                               ^^^^^ source.bh
#                                                                    ^^^ source.bh keyword.operator.infix.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                         ^^ source.bh string.quoted.double.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                            ^ source.bh punctuation.paren.bh
>
>stmtTToString (SExprS p _) = return ("[SExprS " +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh punctuation.paren.bh
>--stmtTToString _ = return "XXXX"
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>stmtTToString _ = error "unhandled case"
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>stmtTListToString :: (Monad m) => (List (StmtT a)) -> m String
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stmtTListToString x =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>    do y <- stmtTListToStringInternal x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("(" +++ y +++ ")")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^ source.bh string.quoted.double.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                  ^ source.bh
#                   ^^^ source.bh keyword.operator.infix.bh
#                      ^^^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^ source.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                              ^ source.bh string.quoted.double.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^ source.bh punctuation.paren.bh
>
>stmtTListToStringInternal :: (Monad m) => (List (StmtT a)) -> m String
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stmtTListToStringInternal Nil = return ""
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>stmtTListToStringInternal (Cons x Nil) = stmtTToString x
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh constant.other.bh
#                               ^^^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^^^^^^^^^^^^^^^^^ source.bh
>stmtTListToStringInternal (Cons x rest) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh constant.other.bh
#                               ^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>    do y <- stmtTToString x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
>       z <- stmtTListToStringInternal rest
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (y +++ " " +++ z)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^^ source.bh keyword.operator.infix.bh
#                    ^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getStmtTPosInfo :: (StmtT a) -> PosInfo
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getStmtTPosInfo (SAction p _ _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
>getStmtTPosInfo (SActionValue p _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^ source.bh constant.other.bh
#                             ^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^^^ source.bh
>getStmtTPosInfo (SCall p _ _ _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
>getStmtTPosInfo (SIf1 p _ _)  = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^ source.bh
>getStmtTPosInfo (SIf2 p _ _ _)  = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
>getStmtTPosInfo (SSeq p _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^ source.bh
>getStmtTPosInfo (SPar p _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^ source.bh
>getStmtTPosInfo (SSkip p) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^ source.bh
>getStmtTPosInfo (SReturn p) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^ source.bh
>getStmtTPosInfo (SBreak p) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^ source.bh
>getStmtTPosInfo (SContinue p) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^ source.bh constant.other.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^ source.bh
>getStmtTPosInfo (SExprS p _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^ source.bh constant.other.bh
#                       ^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^ source.bh
>getStmtTPosInfo (SWhile p _ _ _ _ _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^^^ source.bh
>getStmtTPosInfo (SRepeat p _ _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
>getStmtTPosInfo (SDelay p _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^ source.bh constant.other.bh
#                       ^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^ source.bh
>getStmtTPosInfo (SFor p _ _ _ _) = p
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^ source.bh
>getStmtTPosInfo _ = error "unhandled case"
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                           ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>delay :: (Eq a, Ord a, Arith a, Literal a, Bits a sa, Add x sa 32) => a -> RStmt b
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^ source.bh meta.function.type-declaration.bh storage.type.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                         ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>-- delay num = _s__ (SRepeat noPosInfo (zeroExtend (pack num)) (SAction noPosInfo noAction Nothing))
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>delay num = _s__ (SDelay noPosInfo (zeroExtend (pack num)))
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh punctuation.paren.bh
>
>-- await :: Bool -> RStmt a
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- await cond = _s__ (SUntil noPosInfo cond)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>interface Waiter =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.Waiter .bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>     wait :: Action
#^^^^^ source.bh meta.declaration.interface.algebraic.bh
#     ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>await :: Bool -> Action
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>await condition =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
> let w = interface Waiter
#^ source.bh
# ^^^ source.bh keyword.other.let.bh
#    ^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
#        ^^^^^^^^^^^ source.bh
#                   ^^^^^^ source.bh constant.other.bh
>           wait :: Action
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>           wait = noAction
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^ source.bh
>                  when condition
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^^ source.bh keyword.other.when.bh
#                      ^^^^^^^^^^^ source.bh
> in w.wait
#^ source.bh
# ^^ source.bh keyword.other.in.bh
#   ^^ source.bh
#     ^ source.bh keyword.operator.infix.bh
#      ^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>interface Once =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.Once .bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    start :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    clear :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    done :: Bool
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#        ^ source.bh meta.declaration.interface.algebraic.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>mkOnce :: (IsModule m c) => Action -> m Once
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mkOnce a =
#^^^^^^^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        onceReady :: Reg Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>        onceReady <- mkReg True
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^ source.bh
#                           ^^^^ source.bh constant.other.bh
>        interface
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>            start = action { onceReady := False; a }
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                            ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                             ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                      ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                       ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                         ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                          ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.bh
#                                               ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                 ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>                when onceReady
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>            clear = action { onceReady := True }
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                            ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                             ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                      ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                       ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                         ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                          ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                               ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>            done = onceReady == False ;
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.interface.algebraic.bh
#                             ^^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                               ^ source.bh meta.declaration.interface.algebraic.bh
#                                ^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh
#                                      ^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>interface RFSM a =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.RFSM a .bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    start         :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    abort         :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    ready         :: Bool
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>interface FSMAbort =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort .bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    abort :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>interface FSM =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSM .bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    start :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    done  :: Bool
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#        ^^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    waitTillDone :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>    abort :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>interface FSMServer a b =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMServer a b .bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>    server   :: Server a b
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^^^ source.bh meta.declaration.interface.algebraic.bh
#             ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>    abort    :: Action
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^^^ source.bh meta.declaration.interface.algebraic.bh
#             ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>-- #############################################################################
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>
>type NextStateDescriptor
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
>    = (Bool, Integer)
#^^^^ source.bh meta.declaration.type.bh
#    ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#     ^ source.bh meta.declaration.type.bh
#      ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#       ^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#            ^ source.bh meta.declaration.type.bh
#             ^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                    ^ source.bh meta.declaration.type.bh
>
>type NextStateDescriptors
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
>    = (List NextStateDescriptor)
#^^^^ source.bh meta.declaration.type.bh
#    ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#     ^ source.bh meta.declaration.type.bh
#      ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#       ^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                               ^ source.bh meta.declaration.type.bh
>
>type TwoStateDescriptor_orig
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
>    = (Bool, Integer, Integer)
#^^^^ source.bh meta.declaration.type.bh
#    ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#     ^ source.bh meta.declaration.type.bh
#      ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#       ^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#            ^ source.bh meta.declaration.type.bh
#             ^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                    ^ source.bh meta.declaration.type.bh punctuation.separator.comma.bh
#                     ^ source.bh meta.declaration.type.bh
#                      ^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                             ^ source.bh meta.declaration.type.bh
>
>data TwoStateDescriptor = TSD Bool Integer Integer TSDType
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.TwoStateDescriptor .bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh
#                              ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                          ^ source.bh meta.declaration.data.algebraic.bh
#                                           ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                                   ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>                          deriving (Eq)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                          ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#                                    ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>data TSDType
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.TSDType.bh
#           ^ source.bh meta.declaration.data.algebraic.bh
>        = Default
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>        | Start
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>        | End
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
>    deriving (Eq)
#^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#    ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh keyword.other.deriving.bh
#            ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
#             ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh punctuation.paren.bh
#              ^^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh storage.type.bh
#                ^ source.bh meta.declaration.data.algebraic.bh meta.deriving.bh
>
>combineTSDTypes :: TSDType -> TSDType -> TSDType
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>combineTSDTypes Start   _       = Start
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^^^^^ source.bh constant.other.bh
>combineTSDTypes _       Start   = Start
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^^^^^ source.bh constant.other.bh
#                             ^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^^^^^ source.bh constant.other.bh
>combineTSDTypes End     _       = End
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^^^ source.bh constant.other.bh
>combineTSDTypes _       End     = End
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^^^ source.bh constant.other.bh
>combineTSDTypes _       _       = Default
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^^^^^^^ source.bh constant.other.bh
>
>type TwoStateDescriptors
#^^^^ source.bh meta.declaration.type.bh keyword.other.type.bh
#    ^ source.bh meta.declaration.type.bh
#     ^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
>    = (List TwoStateDescriptor)
#^^^^ source.bh meta.declaration.type.bh
#    ^ source.bh meta.declaration.type.bh keyword.operator.eq.bh
#     ^ source.bh meta.declaration.type.bh
#      ^ source.bh meta.declaration.type.bh punctuation.paren.bh
#       ^^^^ source.bh meta.declaration.type.bh storage.type.bh
#           ^ source.bh meta.declaration.type.bh
#            ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh storage.type.bh
#                              ^ source.bh meta.declaration.type.bh
>
>-- #############################################################################
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.type.bh comment.line.double-dash.bh
>
>compareNSDs :: NextStateDescriptor -> NextStateDescriptor -> Ordering
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>compareNSDs (_conda, a) (_condb, b) = compare a b
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^ source.bh
#                               ^ source.bh punctuation.separator.comma.bh
#                                ^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^^^^^^^^^^^^^ source.bh
>
>matchingNSDs :: NextStateDescriptor -> NextStateDescriptor -> Bool
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>matchingNSDs a b = ((compareNSDs a b) == EQ)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^^ source.bh constant.other.bh
#                                           ^ source.bh punctuation.paren.bh
>
>
>compareTSDs :: TwoStateDescriptor -> TwoStateDescriptor -> Ordering
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>compareTSDs (TSD _conda a0 a1 _) (TSD _condb b0 b1 _) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^ source.bh constant.other.bh
#                ^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^ source.bh keyword.operator.eq.bh
>            if      (a1 < b1) then LT
#^^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^^^ source.bh keyword.control.then.bh
#                                  ^ source.bh
#                                   ^^ source.bh constant.other.bh
>            else if (a1 > b1) then GT
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.if.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^^^ source.bh keyword.control.then.bh
#                                  ^ source.bh
#                                   ^^ source.bh constant.other.bh
>            else if (a0 < b0) then LT
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.if.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^^^ source.bh keyword.control.then.bh
#                                  ^ source.bh
#                                   ^^ source.bh constant.other.bh
>            else if (a0 > b0) then GT
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.if.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^^^ source.bh keyword.control.then.bh
#                                  ^ source.bh
#                                   ^^ source.bh constant.other.bh
>            else                   EQ
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^^ source.bh constant.other.bh
>
>matchingTSDs :: TwoStateDescriptor -> TwoStateDescriptor -> Bool
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>--matchingTSDs a b = ((compareTSDs a b) == EQ)
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>matchingTSDs (TSD _ _ a _) (TSD _ _ b _) = (a == b)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^ source.bh constant.other.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^ source.bh
#                                              ^^ source.bh keyword.operator.infix.bh
#                                                ^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>getFrom :: TwoStateDescriptor -> Integer
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getFrom (TSD _ f _ _) = f
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh constant.other.bh
#            ^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^ source.bh
>
>getTo :: TwoStateDescriptor -> Integer
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getTo (TSD _ _ t _) = t
#^^^^^^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^ source.bh constant.other.bh
#          ^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>class ServerCallToStmtT t where
#^^^^^ source.bh meta.declaration.class.bh keyword.other.class.bh
#     ^ source.bh meta.declaration.class.bh
#      ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.class.bh storage.type.bh
#                       ^ source.bh meta.declaration.class.bh
#                        ^ source.bh meta.declaration.class.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.class.bh
#                          ^^^^^ source.bh keyword.other.where.bh
>      callServer :: (ToPut i b) => t a b -> a -> i -> PosInfo -> (RStmt c)
#^^^^^^ source.bh meta.function.type-declaration.bh
#      ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                  ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
>
>instance ServerCallToStmtT Server where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                 ^ source.bh meta.declaration.instance.bh
#                                  ^^^^^ source.bh keyword.other.where.bh
>      callServer ifc value lhs ps =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>       _s__ (SCall ps
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^ source.bh
>                      noAction
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                      action { ifc.request.put(value) }
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^^^ source.bh keyword.other.action.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.brace.bh
#                              ^^^^ source.bh
#                                  ^ source.bh keyword.operator.infix.bh
#                                   ^^^^^^^ source.bh
#                                          ^ source.bh keyword.operator.infix.bh
#                                           ^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.brace.bh
>                      action { x <- ifc.response.get; (toPut lhs).put x })
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^^^ source.bh keyword.other.action.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.brace.bh
#                              ^^^ source.bh
#                                 ^^ source.bh keyword.operator.arrow.left.bh
#                                   ^^^^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^^^^^^^^ source.bh
#                                                ^ source.bh keyword.operator.infix.bh
#                                                 ^^^ source.bh
#                                                    ^ source.bh punctuation.semicolon.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh keyword.operator.infix.bh
#                                                                  ^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.brace.bh
#                                                                         ^ source.bh punctuation.paren.bh
>
>instance ServerCallToStmtT FSMServer where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                          ^ source.bh meta.declaration.instance.bh
#                           ^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh keyword.other.where.bh
>      callServer ifc value lhs ps =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>       _s__ (SCall    ps
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^^^ source.bh
>                      action { ifc.abort }
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^^^ source.bh keyword.other.action.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.brace.bh
#                              ^^^^ source.bh
#                                  ^ source.bh keyword.operator.infix.bh
#                                   ^^^^^^ source.bh
#                                         ^ source.bh punctuation.brace.bh
>                      action { ifc.server.request.put(value) }
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^^^ source.bh keyword.other.action.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.brace.bh
#                              ^^^^ source.bh
#                                  ^ source.bh keyword.operator.infix.bh
#                                   ^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^^^^ source.bh
#                                                 ^ source.bh keyword.operator.infix.bh
#                                                  ^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.brace.bh
>                      action { x <- ifc.server.response.get; (toPut lhs).put x })
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^^^ source.bh keyword.other.action.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.brace.bh
#                              ^^^ source.bh
#                                 ^^ source.bh keyword.operator.arrow.left.bh
#                                   ^^^^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^^^^^^ source.bh
#                                              ^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^^^ source.bh
#                                                       ^ source.bh keyword.operator.infix.bh
#                                                        ^^^ source.bh
#                                                           ^ source.bh punctuation.semicolon.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh keyword.operator.infix.bh
#                                                                         ^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.brace.bh
#                                                                                ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>data StmtFT a
#^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.data.bh
#    ^ source.bh meta.declaration.data.algebraic.bh
#     ^^^^^^^ source.bh meta.declaration.data.algebraic.bh keyword.other.StmtFT a.bh
#            ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
>        =  SFAction PosInfo Integer NextStateDescriptors Action Action (Maybe ActionType) (Maybe RuleSet)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.eq.bh
#         ^^ source.bh meta.declaration.data.algebraic.bh
#           ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                   ^ source.bh meta.declaration.data.algebraic.bh
#                    ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                           ^ source.bh meta.declaration.data.algebraic.bh
#                            ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh
#                                    ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                                ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                      ^ source.bh meta.declaration.data.algebraic.bh
#                                                                       ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                                        ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                             ^ source.bh meta.declaration.data.algebraic.bh
#                                                                              ^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                         ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                          ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                                                           ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                                                ^ source.bh meta.declaration.data.algebraic.bh
#                                                                                                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                                                        ^ source.bh meta.declaration.data.algebraic.bh
>        | SFLabel PosInfo String NextStateDescriptors (Maybe (StmtT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh
#                                 ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                                      ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                       ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                            ^ source.bh meta.declaration.data.algebraic.bh
#                                                             ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                              ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                                   ^ source.bh meta.declaration.data.algebraic.bh
#                                                                    ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                                                      ^ source.bh meta.declaration.data.algebraic.bh
>        | SFNamed PosInfo String  (List (StmtFT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                ^^ source.bh meta.declaration.data.algebraic.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                   ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
>        | SFUntil PosInfo Bool
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SFIf1 PosInfo Bool (StmtFT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                              ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
>        | SFIf2 PosInfo Bool (StmtFT a) (StmtFT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                            ^ source.bh meta.declaration.data.algebraic.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                              ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                    ^ source.bh meta.declaration.data.algebraic.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.data.algebraic.bh
>        | SFFor PosInfo (StmtFT a) Bool (StmtFT a) (StmtFT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                                   ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                                    ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                                          ^ source.bh meta.declaration.data.algebraic.bh
#                                                           ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.declaration.data.algebraic.bh
>        | SFSeq PosInfo (List (StmtFT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                         ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                             ^ source.bh meta.declaration.data.algebraic.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                               ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                     ^ source.bh meta.declaration.data.algebraic.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh
>        | SFPar PosInfo (StmtFT a) (List (StmtT a))
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#               ^ source.bh meta.declaration.data.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.data.algebraic.bh
#                        ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                         ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh
#                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                  ^ source.bh meta.declaration.data.algebraic.bh
#                                   ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                    ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh
#                                         ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                          ^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                               ^ source.bh meta.declaration.data.algebraic.bh
#                                                ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.data.algebraic.bh
#                                                  ^ source.bh meta.declaration.data.algebraic.bh
>        | SFSkip PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                ^ source.bh meta.declaration.data.algebraic.bh
#                 ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SFDelay PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SFReturn PosInfo
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                  ^ source.bh meta.declaration.data.algebraic.bh
#                   ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
>        | SFWhile PosInfo Bool (StmtFT a)
#^^^^^^^^ source.bh meta.declaration.data.algebraic.bh
#        ^ source.bh meta.declaration.data.algebraic.bh keyword.operator.pipe.bh
#         ^ source.bh meta.declaration.data.algebraic.bh
#          ^^^^^^^ source.bh meta.declaration.data.algebraic.bh constant.other.bh
#                 ^ source.bh meta.declaration.data.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.data.algebraic.bh
#                          ^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                              ^ source.bh meta.declaration.data.algebraic.bh
#                               ^ source.bh meta.declaration.data.algebraic.bh punctuation.paren.bh
#                                ^^^^^^ source.bh meta.declaration.data.algebraic.bh storage.type.bh
#                                      ^ source.bh meta.declaration.data.algebraic.bh
#                                       ^ source.bh meta.declaration.data.algebraic.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.data.algebraic.bh
>
>-- #############################################################################
#^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.data.algebraic.bh comment.line.double-dash.bh
>
>struct LabelState a
#^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.struct.bh
#      ^ source.bh meta.declaration.struct.algebraic.bh
#       ^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh keyword.other.LabelState a.bh
#                  ^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
>  =
#^^ source.bh meta.declaration.struct.algebraic.bh
#  ^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.eq.bh
>    state_num    :: Integer
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#             ^^^^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^ source.bh meta.declaration.struct.algebraic.bh constant.other.operator.infix.bh
#                   ^ source.bh meta.declaration.struct.algebraic.bh
#                    ^^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>    return_label :: String
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.declaration.struct.algebraic.bh
#                    ^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
>    label_names  :: (List String)
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#               ^^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.declaration.struct.algebraic.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh punctuation.paren.bh
#                     ^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                         ^ source.bh meta.declaration.struct.algebraic.bh
#                          ^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                                ^ source.bh meta.declaration.struct.algebraic.bh
>    loop_labels  :: (Maybe (String, String))
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#               ^^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.declaration.struct.algebraic.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh punctuation.paren.bh
#                     ^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                          ^ source.bh meta.declaration.struct.algebraic.bh
#                           ^ source.bh meta.declaration.struct.algebraic.bh punctuation.paren.bh
#                            ^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                                  ^ source.bh meta.declaration.struct.algebraic.bh punctuation.separator.comma.bh
#                                   ^ source.bh meta.declaration.struct.algebraic.bh
#                                    ^^^^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                                          ^ source.bh meta.declaration.struct.algebraic.bh
#                                           ^ source.bh meta.declaration.struct.algebraic.bh
>    ifc          :: (Put a)
#^^^^ source.bh meta.declaration.struct.algebraic.bh
#    ^^^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#       ^^^^^^^^^^ source.bh meta.declaration.struct.algebraic.bh
#                 ^^ source.bh meta.declaration.struct.algebraic.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.declaration.struct.algebraic.bh
#                    ^ source.bh meta.declaration.struct.algebraic.bh punctuation.paren.bh
#                     ^^^ source.bh meta.declaration.struct.algebraic.bh storage.type.bh
#                        ^ source.bh meta.declaration.struct.algebraic.bh
#                         ^ source.bh meta.declaration.struct.algebraic.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.struct.algebraic.bh
>
>initLabelState :: Integer -> String -> (Put a) -> (LabelState a)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                        ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
>initLabelState num return_label ifc = LabelState {
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^^^^^^^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^ source.bh meta.record.bh punctuation.brace.bh
>                   state_num    = num;
#^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                   ^^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                            ^^^^ source.bh meta.record.bh
#                                ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                 ^^^^^^ source.bh meta.record.bh
>                   return_label = return_label;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                 ^^^^^^^^^^^^^^^ source.bh meta.record.bh
>                   label_names  = Nil;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                 ^ source.bh meta.record.bh
#                                  ^^^ source.bh meta.record.bh constant.other.bh
#                                     ^^ source.bh meta.record.bh
>                   loop_labels  = Nothing;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                 ^ source.bh meta.record.bh
#                                  ^^^^^^^ source.bh meta.record.bh constant.other.bh
#                                         ^^ source.bh meta.record.bh
>                   ifc = ifc }
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                        ^^^^^ source.bh meta.record.bh
#                             ^ source.bh meta.record.bh punctuation.brace.bh
>
>incrLabelState :: (LabelState a) -> (LabelState a)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
>incrLabelState ls = ls { state_num = ls.state_num + 1 }
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^ source.bh
#                       ^ source.bh meta.record.bh punctuation.brace.bh
#                        ^ source.bh meta.record.bh
#                         ^^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                  ^ source.bh meta.record.bh
#                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                    ^^^ source.bh meta.record.bh
#                                       ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                        ^^^^^^^^^^ source.bh meta.record.bh
#                                                  ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                   ^ source.bh meta.record.bh
#                                                    ^ source.bh meta.record.bh constant.numeric.integral.decimal.bh
#                                                     ^ source.bh meta.record.bh
#                                                      ^ source.bh meta.record.bh punctuation.brace.bh
>
>isLabelUsed :: String -> (LabelState a) -> Bool
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isLabelUsed label ls =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
>  let check x = x == label
#^^ source.bh
#  ^^^ source.bh keyword.other.let.bh
#     ^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^^^^^ source.bh
>      r = (find check ls.label_names)
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
#         ^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>  in isJust r
#^^ source.bh
#  ^^ source.bh keyword.other.in.bh
#    ^^^^^^^^^^ source.bh
>
>createUniqueLabel :: String -> (LabelState a) -> String
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>createUniqueLabel label ls =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>   if (isLabelUsed label ls)
#^^^ source.bh
#   ^^ source.bh keyword.control.if.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>   then (createUniqueLabelWithSuffix label 1 ls)
#^^^ source.bh
#   ^^^^ source.bh keyword.control.then.bh
#       ^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                            ^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>   else label
#^^^ source.bh
#   ^^^^ source.bh keyword.control.else.bh
#       ^^^^^^^ source.bh
>
>createUniqueLabelWithSuffix :: String -> Integer -> (LabelState a) -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                     ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>createUniqueLabelWithSuffix label suffix ls =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
>   let l = (label +++ "_" +++ (integerToString suffix))
#^^^ source.bh
#   ^^^ source.bh keyword.other.let.bh
#      ^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^ source.bh
#                  ^^^ source.bh keyword.operator.infix.bh
#                     ^ source.bh
#                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                       ^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
>   in if (isLabelUsed l ls)
#^^^ source.bh
#   ^^ source.bh keyword.other.in.bh
#     ^ source.bh
#      ^^ source.bh keyword.control.if.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>      then (createUniqueLabelWithSuffix label (suffix + 1) ls)
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.then.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh
#                                                      ^ source.bh keyword.operator.infix.bh
#                                                       ^ source.bh
#                                                        ^ source.bh constant.numeric.integral.decimal.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>      else l
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^^^ source.bh
>
>addLabel :: String -> (LabelState a) -> (LabelState a)
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
>addLabel label ls = ls { label_names = (Cons label ls.label_names) }
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^ source.bh
#                       ^ source.bh meta.record.bh punctuation.brace.bh
#                        ^ source.bh meta.record.bh
#                         ^^^^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                    ^ source.bh meta.record.bh
#                                     ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                      ^ source.bh meta.record.bh
#                                       ^ source.bh meta.record.bh punctuation.paren.bh
#                                        ^^^^ source.bh meta.record.bh constant.other.bh
#                                            ^^^^^^^^^ source.bh meta.record.bh
#                                                     ^ source.bh meta.record.bh keyword.operator.infix.bh
#                                                      ^^^^^^^^^^^ source.bh meta.record.bh
#                                                                 ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                  ^ source.bh meta.record.bh
#                                                                   ^ source.bh meta.record.bh punctuation.brace.bh
>
>addLoopLabels :: String -> String -> (LabelState a) -> (LabelState a)
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
>addLoopLabels continue break ls = ls { loop_labels = (Just (continue, break)) }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^ source.bh
#                                     ^ source.bh meta.record.bh punctuation.brace.bh
#                                      ^ source.bh meta.record.bh
#                                       ^^^^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                                  ^ source.bh meta.record.bh
#                                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                    ^ source.bh meta.record.bh
#                                                     ^ source.bh meta.record.bh punctuation.paren.bh
#                                                      ^^^^ source.bh meta.record.bh constant.other.bh
#                                                          ^ source.bh meta.record.bh
#                                                           ^ source.bh meta.record.bh punctuation.paren.bh
#                                                            ^^^^^^^^ source.bh meta.record.bh
#                                                                    ^ source.bh meta.record.bh punctuation.separator.comma.bh
#                                                                     ^^^^^^ source.bh meta.record.bh
#                                                                           ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                            ^ source.bh meta.record.bh punctuation.paren.bh
#                                                                             ^ source.bh meta.record.bh
#                                                                              ^ source.bh meta.record.bh punctuation.brace.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- # Convert StmtTs to StmtFTs and label all the actiuons uniquely.
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>labelActions :: (IsModule m c) => (StmtT a) -> (LabelState a) -> m ((StmtFT a), (LabelState a))
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                 ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                 ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh
>labelActions (SAction p a at) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^ source.bh constant.other.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    return ((SFAction p ls.state_num Nil noAction a at nR), incrLabelState(ls))
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh constant.other.bh
#                     ^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.bh
#                           ^^^^^^^^^^ source.bh
#                                     ^^^ source.bh constant.other.bh
#                                        ^^^^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh punctuation.separator.comma.bh
#                                                           ^^^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^^ source.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^ source.bh punctuation.paren.bh
>
>labelActions (SActionValue p av) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^ source.bh constant.other.bh
#                          ^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do let st = (SFSeq p
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^ source.bh
>                (Cons (SFAction p ls.state_num Nil noAction action {x <- av; ls.ifc.put x} nAT nR)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh constant.other.bh
#                               ^^^^^ source.bh
#                                    ^ source.bh keyword.operator.infix.bh
#                                     ^^^^^^^^^^ source.bh
#                                               ^^^ source.bh constant.other.bh
#                                                  ^^^^^^^^^^ source.bh
#                                                            ^^^^^^ source.bh keyword.other.action.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.brace.bh
#                                                                    ^^ source.bh
#                                                                      ^^ source.bh keyword.operator.arrow.left.bh
#                                                                        ^^^ source.bh
#                                                                           ^ source.bh punctuation.semicolon.bh
#                                                                            ^^^ source.bh
#                                                                               ^ source.bh keyword.operator.infix.bh
#                                                                                ^^^ source.bh
#                                                                                   ^ source.bh keyword.operator.infix.bh
#                                                                                    ^^^^^ source.bh
#                                                                                         ^ source.bh punctuation.brace.bh
#                                                                                          ^^^^^^^ source.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
>                 (Cons (SFReturn p) Nil)))
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^ source.bh constant.other.bh
#                                ^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^^ source.bh constant.other.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
>       return (st, incrLabelState(ls))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.separator.comma.bh
#                  ^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh punctuation.paren.bh
>
>labelActions (SCall p a_abort a_start a_done) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
>    do let st = (SFSeq p (Cons
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
>                        (SFAction p ls.state_num Nil a_abort a_start nAT nR)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^ source.bh constant.other.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh keyword.operator.infix.bh
#                                       ^^^^^^^^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
>                         (Cons (SFAction p (ls.state_num + 1) Nil noAction a_done nAT nR) Nil)))
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^ source.bh constant.other.bh
#                                        ^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^ source.bh
#                                              ^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^^^^^ source.bh
#                                                         ^ source.bh keyword.operator.infix.bh
#                                                          ^ source.bh
#                                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh
#                                                              ^^^ source.bh constant.other.bh
#                                                                 ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                         ^ source.bh
#                                                                                          ^^^ source.bh constant.other.bh
#                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                              ^ source.bh punctuation.paren.bh
#                                                                                               ^ source.bh punctuation.paren.bh
>       return (st, incrLabelState(incrLabelState(ls)))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.separator.comma.bh
#                  ^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>labelActions (SIf1 p c st) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>    if (isStaticAndFalse c)
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>    then labelActions (SSkip p) ls
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^ source.bh constant.other.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^ source.bh
>    else do (r, ls') <- labelActions st ls
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.do.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^ source.bh
#              ^ source.bh punctuation.separator.comma.bh
#               ^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^^ source.bh keyword.operator.arrow.left.bh
#                       ^^^^^^^^^^^^^^^^^^^^ source.bh
>            return ((SFIf1 p c r), ls')
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^ source.bh constant.other.bh
#                          ^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh punctuation.separator.comma.bh
#                                  ^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>
>labelActions (SIf2 p c s0 s1) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    if (isStaticAndFalse c)
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>    then labelActions s1 ls
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^^^^^^^^^^^^^^^^^^^^ source.bh
>    else if (isStaticAndTrue c)
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>    then labelActions s0 ls
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
#        ^^^^^^^^^^^^^^^^^^^^ source.bh
>    else do (r0, ls0) <- labelActions s0 ls
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.do.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^ source.bh punctuation.separator.comma.bh
#                ^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.arrow.left.bh
#                        ^^^^^^^^^^^^^^^^^^^^ source.bh
>            (r1, ls1) <- labelActions s1 ls0
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^ source.bh punctuation.separator.comma.bh
#                ^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.arrow.left.bh
#                        ^^^^^^^^^^^^^^^^^^^^^ source.bh
>            return ((SFIf2 p c r0 r1), ls1)
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^ source.bh constant.other.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>
>labelActions (SSeq p Nil) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>     labelActions (SSkip p) ls
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh
>
>labelActions x@(SSeq p (Cons st Nil)) ls =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^ source.bh
#                                ^^^ source.bh constant.other.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
>    do _ <- stmtTToString x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
>       -- messageM("S0 " +++ y)
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       (r, ls0) <- labelActions st ls
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((SFSeq p (Cons r Nil)), ls0)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^ source.bh
#                                ^^^ source.bh constant.other.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>
>labelActions (SSeq p (Cons (SExprS pe e) rest)) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^ source.bh constant.other.bh
#                                  ^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
>    do (_, ss) <- liftModule (unS e)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>       labelActions (SSeq p (Cons (SSeq pe ss) rest)) ls
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh constant.other.bh
#                                       ^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^ source.bh
>
>labelActions (SSeq p (Cons s0 (Cons (SExprS pe e) rest))) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^ source.bh constant.other.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^ source.bh constant.other.bh
#                                           ^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
>    do (_, ss) <- liftModule (unS e)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>       labelActions (SSeq p (Cons s0 (Cons (SSeq pe ss) rest))) ls
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^^ source.bh
>
>labelActions (SSeq p (Cons (SSeq _ s0) rest)) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
>    do let x = (SSeq p (append s0 rest))
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh punctuation.paren.bh
>       _ <- stmtTToString x
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
>       -- messageM("S " +++ y)
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       labelActions x ls
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SSeq p (Cons s0 (Cons (SSeq _ s1) rest))) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^ source.bh constant.other.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^ source.bh
#                                                           ^ source.bh keyword.operator.eq.bh
>    do let x = (SSeq p (Cons s0 (append s1 rest)))
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>       _ <- stmtTToString x
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
>       -- messageM("S " +++ y)
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       labelActions x ls
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions x@(SSeq p (Cons st ss)) ls =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>    do _ <- stmtTToString x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
>       -- messageM("S1 " +++ y)
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       (_r,  ls0)   <- labelActions st        ls
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh
#                    ^^ source.bh keyword.operator.arrow.left.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       (_rr, ls1) <- labelActions (SSeq p ss) ls0
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh constant.other.bh
#                                       ^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^ source.bh
>       return ((SFSeq p (Cons _r (getStmtFTList _rr))), ls1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.separator.comma.bh
#                                                       ^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
>
>labelActions (SPar p Nil) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>     labelActions (SSkip p) ls
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh
>
>labelActions (SPar _ (Cons st Nil)) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^ source.bh
#                              ^^^ source.bh constant.other.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
>     labelActions st ls
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SPar p ss) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
>    do (r, ls0) <- labelActions (SAction p noAction Nothing) ls
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^ source.bh constant.other.bh
#                                        ^^^^^^^^^^^^ source.bh
#                                                    ^^^^^^^ source.bh constant.other.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^^ source.bh
>       return ((SFPar p r ss), (incrLabelState (incrLabelState ls0)))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh punctuation.separator.comma.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh punctuation.paren.bh
>
>labelActions (SSkip p)     ls = return ((SFSkip p), ls)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh constant.other.bh
#                                               ^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.separator.comma.bh
#                                                   ^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
>
>labelActions (SReturn p)    ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>     do let return = ls.return_label
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^ source.bh
#                       ^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^^^ source.bh
>            r      = (SAction p noAction (Just (Jump return)))
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh punctuation.paren.bh
>        labelActions r ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SBreak p)    ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>     do let msg = setStringPosition "break is not inside a loop construct." (getPIPosition p)
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                           ^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^^^^^^^^^^^^ source.bh
#                                                                                            ^ source.bh punctuation.paren.bh
>            loop_labels  = ls.loop_labels
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^^^^^^^ source.bh
>            (_continue, break) = (unJust loop_labels)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.separator.comma.bh
#                       ^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
>            r            = (SAction p noAction (Just (Jump break)))
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^ source.bh constant.other.bh
#                                   ^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^ source.bh constant.other.bh
#                                                          ^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
>        if (not (isJust loop_labels)) then error msg
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.if.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^^^ source.bh keyword.control.then.bh
#                                          ^^^^^^^^^^^ source.bh
>                                      else labelActions r ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^^^^ source.bh keyword.control.else.bh
#                                          ^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SContinue p)    ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>     do let msg = setStringPosition "continue is not inside a loop construct." (getPIPosition p)
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                              ^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^^^^^^^^^^^^^^^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
>            loop_labels  = ls.loop_labels
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^^^^^^^ source.bh
>            (continue, _end) = (unJust loop_labels)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>            r            = (SAction p noAction (Just (Jump continue)))
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^ source.bh constant.other.bh
#                                   ^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^ source.bh constant.other.bh
#                                                          ^^^^^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh punctuation.paren.bh
>        if (not (isJust loop_labels)) then error msg
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.if.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^^^ source.bh keyword.control.then.bh
#                                          ^^^^^^^^^^^ source.bh
>                                      else labelActions r ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^^^^ source.bh keyword.control.else.bh
#                                          ^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SLabel p name True Nothing) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^^^^^^^ source.bh constant.other.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
>     do return ((SFLabel p name Nil Nothing), (addLabel name ls))
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^ source.bh
#                                ^^^ source.bh constant.other.bh
#                                   ^ source.bh
#                                    ^^^^^^^ source.bh constant.other.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.separator.comma.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh punctuation.paren.bh
>
>labelActions (SLabel p name False Nothing) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^^^^^ source.bh constant.other.bh
#                                 ^ source.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>     do let msg = setStringPosition ("label '" +++ name +++ "' is already in use.") (getPIPosition p)
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                      ^^^^^^^ source.bh string.quoted.double.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                              ^ source.bh
#                                               ^^^ source.bh keyword.operator.infix.bh
#                                                  ^^^^^^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^^^^^^^^^^^^^^^ source.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
>        if (isLabelUsed name ls) then error msg
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.control.if.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^^^^ source.bh keyword.control.then.bh
#                                     ^^^^^^^^^^^ source.bh
>                                 else return ((SFLabel p name Nil Nothing), (addLabel name ls))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^^^^ source.bh keyword.control.else.bh
#                                     ^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh constant.other.bh
#                                                      ^^^^^^^^ source.bh
#                                                              ^^^ source.bh constant.other.bh
#                                                                 ^ source.bh
#                                                                  ^^^^^^^ source.bh constant.other.bh
#                                                                         ^ source.bh punctuation.paren.bh
#                                                                          ^ source.bh punctuation.separator.comma.bh
#                                                                           ^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^^^^^^^^^^^^^ source.bh
#                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                              ^ source.bh punctuation.paren.bh
>
>labelActions (SJump p name) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^ source.bh constant.other.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>    labelActions (SAction p noAction (Just (Jump name))) ls
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^ source.bh
>
>labelActions (SNamed p name (Cons st Nil)) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^^ source.bh
#                                     ^^^ source.bh constant.other.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>    do (s0, ls0) <- labelActions st ls
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((SFNamed p name (Cons s0 Nil)), ls0)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh constant.other.bh
#                                    ^^^^ source.bh
#                                        ^^^ source.bh constant.other.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.separator.comma.bh
#                                              ^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>labelActions (SNamed p name Nil) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do return ((SFNamed p name Nil), ls)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^ source.bh
#                               ^^^ source.bh constant.other.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.separator.comma.bh
#                                    ^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>
>labelActions (SNamed p name Nil) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do -- messageM("Statement label is " +++ name)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       return ((SFNamed p name Nil), ls)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^ source.bh
#                               ^^^ source.bh constant.other.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.separator.comma.bh
#                                    ^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>
>labelActions (SUntil p cond) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>    do (s', ls') <- labelActions (SAction p              action { --  $display "(%0d) wait!" $time
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^^^^^^^^^^^^^^^^ source.bh
#                                                         ^^^^^^ source.bh keyword.other.action.bh
#                                                               ^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
#                                                                 ^ source.bh
#                                                                  ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--    do (s', ls') <- labelActions (SAction ("WAIT" +++ p) action { --  $display "(%0d) wait!" $time
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                                                                } (Just Wait)) ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.brace.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^^ source.bh constant.other.bh
#                                                                       ^ source.bh
#                                                                        ^^^^ source.bh constant.other.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^^^^ source.bh
>       return ((SFSeq p (Cons (SFUntil p cond) (Cons s' Nil))), ls')
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^ source.bh constant.other.bh
#                                      ^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^^^^ source.bh
#                                                        ^^^ source.bh constant.other.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^ source.bh punctuation.separator.comma.bh
#                                                               ^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>--    do return ((SFUntil p cond), ls)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>labelActions (SExprS p e) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    do (_, ss) <- liftModule (unS e)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>       labelActions (SSeq p ss) ls
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>labelActions (SWhile p c s0 (Just ss_init) s_pre s_post) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^ source.bh
#                                                            ^ source.bh keyword.operator.eq.bh
>     do let r = (SSeq p (Cons ss_init (Cons (SWhile p c s0 Nothing s_pre s_post) Nil)))
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh constant.other.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^ source.bh constant.other.bh
#                                                   ^^^^^^^^ source.bh
#                                                           ^^^^^^^ source.bh constant.other.bh
#                                                                  ^^^^^^^^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^ source.bh
#                                                                                 ^^^ source.bh constant.other.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh punctuation.paren.bh
>        labelActions r ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SWhile p c s0 Nothing s_pre s_post) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^ source.bh
#                            ^^^^^^^ source.bh constant.other.bh
#                                   ^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh
#                                                     ^ source.bh keyword.operator.eq.bh
>     do let loop_labels = ls.loop_labels
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^ source.bh
#                            ^ source.bh keyword.operator.infix.bh
#                             ^^^^^^^^^^^^ source.bh
>            start    = (createUniqueLabelWithSuffix "_while_start" 0 ls)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                     ^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                                                    ^^^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
>            continue = (createUniqueLabelWithSuffix "_while_continue" 0 ls)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                     ^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                                                       ^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
>            break    = (createUniqueLabelWithSuffix "_while_break"   0 ls)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                     ^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                  ^^^ source.bh
#                                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                                      ^^^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
>            ss_pre   = if (not (isJust s_pre)) then (SSkip p) else (unJust s_pre)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^^ source.bh keyword.control.if.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^^^^ source.bh keyword.control.then.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^ source.bh constant.other.bh
#                                                          ^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh
#                                                              ^^^^ source.bh keyword.control.else.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^^^^^^^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
>            ss_post  = if (not (isJust s_post)) then (SSkip p) else (unJust s_post)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^^ source.bh keyword.control.if.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^^^^ source.bh keyword.control.then.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^ source.bh constant.other.bh
#                                                           ^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^ source.bh
#                                                               ^^^^ source.bh keyword.control.else.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^^^^^^^^^^^^^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
>            ls'      = (addLabel start
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^ source.bh
>                         (addLabel continue
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^^^^^^ source.bh
>                           (addLabel break (addLoopLabels continue break ls))))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^ source.bh punctuation.paren.bh
>
>        let body = (SSeq p (Cons ss_pre (Cons s0 (Cons (SLabel p continue True Nothing) (Cons ss_post Nil)))))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^ source.bh constant.other.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^ source.bh constant.other.bh
#                                                              ^^^^^^^^^^^^ source.bh
#                                                                          ^^^^ source.bh constant.other.bh
#                                                                              ^ source.bh
#                                                                               ^^^^^^^ source.bh constant.other.bh
#                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                       ^ source.bh
#                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                         ^^^^ source.bh constant.other.bh
#                                                                                             ^^^^^^^^^ source.bh
#                                                                                                      ^^^ source.bh constant.other.bh
#                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                             ^ source.bh punctuation.paren.bh
>
>        c_no_action <- getNoActionCondition body
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.arrow.left.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>        (st, ls'') <- if (isStaticAndFalse c_no_action)
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.left.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.control.if.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
>                      then do (t, ls'') <- labelActions body ls'
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^ source.bh keyword.control.then.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.control.do.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.separator.comma.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^^ source.bh keyword.operator.arrow.left.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                              let st' = (SFSeq p
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^^^ source.bh keyword.other.let.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^ source.bh constant.other.bh
#                                              ^^^ source.bh
>                                       (Cons (SFWhile p c t)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^ source.bh constant.other.bh
#                                                     ^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
>                                        (Cons (SFLabel p break Nil Nothing) Nil)))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh constant.other.bh
#                                                      ^^^^^^^^^ source.bh
#                                                               ^^^ source.bh constant.other.bh
#                                                                  ^ source.bh
#                                                                   ^^^^^^^ source.bh constant.other.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^ source.bh
#                                                                            ^^^ source.bh constant.other.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>                              return (st', ls'')
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^ source.bh
#                                         ^ source.bh punctuation.separator.comma.bh
#                                          ^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>                      else do let t = (SIf1 p c
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^^ source.bh keyword.control.else.bh
#                          ^ source.bh
#                           ^^ source.bh keyword.control.do.bh
#                             ^ source.bh
#                              ^^^ source.bh keyword.other.let.bh
#                                 ^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh constant.other.bh
#                                           ^^^^^ source.bh
>                                       (SSeq p
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^^^ source.bh
>                                        (Cons (SLabel p start True Nothing)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^ source.bh constant.other.bh
#                                                     ^^^^^^^^^ source.bh
#                                                              ^^^^ source.bh constant.other.bh
#                                                                  ^ source.bh
#                                                                   ^^^^^^^ source.bh constant.other.bh
#                                                                          ^ source.bh punctuation.paren.bh
>                                         (Cons body
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^^^^^^ source.bh
>                                          (Cons (SIf1 p c (SJump p start))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^^^^^ source.bh constant.other.bh
#                                                                ^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^ source.bh punctuation.paren.bh
>                                           (Cons (SLabel p break True Nothing) Nil))))))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh constant.other.bh
#                                                        ^^^^^^^^^ source.bh
#                                                                 ^^^^ source.bh constant.other.bh
#                                                                     ^ source.bh
#                                                                      ^^^^^^^ source.bh constant.other.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^ source.bh
#                                                                               ^^^ source.bh constant.other.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                       ^ source.bh punctuation.paren.bh
>                              (st', ls'') <- labelActions t ls'
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^ source.bh
#                                  ^ source.bh punctuation.separator.comma.bh
#                                   ^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^^ source.bh keyword.operator.arrow.left.bh
#                                            ^^^^^^^^^^^^^^^^^^^^ source.bh
>                              return (st', ls'')
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^ source.bh
#                                         ^ source.bh punctuation.separator.comma.bh
#                                          ^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>
>        return (st, ls'' { loop_labels = loop_labels })
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.separator.comma.bh
#                   ^^^^^^ source.bh
#                         ^ source.bh meta.record.bh punctuation.brace.bh
#                          ^ source.bh meta.record.bh
#                           ^^^^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                      ^ source.bh meta.record.bh
#                                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                        ^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                     ^ source.bh meta.record.bh punctuation.brace.bh
#                                                      ^ source.bh punctuation.paren.bh
>
>labelActions (SDelay p x) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh constant.other.bh
#                    ^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>     do let size = if (isStatic (pack x)) then (zExtend x) else 33000 -- gets a Bit#(16)
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^^^^ source.bh keyword.control.then.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^^^^ source.bh keyword.control.else.bh
#                                                               ^ source.bh
#                                                                ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                                                                     ^ source.bh
#                                                                      ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                                        ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>            pos  = getPIPosition p
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^ source.bh
>        {-# hide #-}
#^^^^^^^^ source.bh
#        ^^^ source.bh meta.preprocessor.bh
#           ^^^^^^ source.bh meta.preprocessor.bh
#                 ^^^ source.bh meta.preprocessor.bh
>        jj <- if (isStatic (pack x))
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
>              then case (x) of
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^ source.bh
#                   ^^^^ source.bh keyword.control.case.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.control.of.bh
>                 0 -> return ((SFSkip p), ls)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^ source.bh constant.other.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.separator.comma.bh
#                                         ^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>                 1 -> labelActions (SAction p noAction Nothing) ls
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^ source.bh constant.other.bh
#                                           ^^^^^^^^^^^^ source.bh
#                                                       ^^^^^^^ source.bh constant.other.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^^ source.bh
>                 2 -> labelActions (SSeq p (Cons (SAction p noAction Nothing) (Cons (SAction p noAction Nothing) Nil))) ls
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh constant.numeric.integral.decimal.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh constant.other.bh
#                                                         ^^^^^^^^^^^^ source.bh
#                                                                     ^^^^^^^ source.bh constant.other.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^ source.bh constant.other.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^^^^^^^ source.bh constant.other.bh
#                                                                                            ^^^^^^^^^^^^ source.bh
#                                                                                                        ^^^^^^^ source.bh constant.other.bh
#                                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                                ^ source.bh
#                                                                                                                 ^^^ source.bh constant.other.bh
#                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                                                       ^^^^ source.bh
>                 _ -> do delay_count <- mkNCount True size
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.arrow.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.control.do.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^^ source.bh keyword.operator.arrow.left.bh
#                                       ^^^^^^^^^^ source.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^^^^^^ source.bh
>                         let p_init      = (setStringPosition ("_d_init" +++ p) pos)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^^ source.bh keyword.other.let.bh
#                            ^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                ^^^^^^^ source.bh string.quoted.double.bh
#                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                        ^ source.bh
#                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                            ^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>                             action_init = action { delay_count.reset }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^ source.bh
#                                           ^^^^^^ source.bh keyword.other.action.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.brace.bh
#                                                   ^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh keyword.operator.infix.bh
#                                                                ^^^^^^ source.bh
#                                                                      ^ source.bh punctuation.brace.bh
>                             s_init = (SAction p_init action_init Nothing)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^ source.bh constant.other.bh
#                                              ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                  ^^^^^^^ source.bh constant.other.bh
#                                                                         ^ source.bh punctuation.paren.bh
>                         labelActions (SSeq p (Cons s_init (Cons (SWhile p (not (delay_count.is (x-1))) (SAction p action {delay_count.incr} Nothing) Nothing Nothing Nothing) Nil))) ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh constant.other.bh
#                                           ^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^ source.bh constant.other.bh
#                                                   ^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^^ source.bh constant.other.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^^^^ source.bh constant.other.bh
#                                                                        ^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^^^^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^^^^^^^^^^^ source.bh
#                                                                                            ^ source.bh keyword.operator.infix.bh
#                                                                                             ^^^ source.bh
#                                                                                                ^ source.bh punctuation.paren.bh
#                                                                                                 ^ source.bh
#                                                                                                  ^ source.bh keyword.operator.infix.bh
#                                                                                                   ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                                       ^ source.bh
#                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                         ^^^^^^^ source.bh constant.other.bh
#                                                                                                                ^^^ source.bh
#                                                                                                                   ^^^^^^ source.bh keyword.other.action.bh
#                                                                                                                         ^ source.bh
#                                                                                                                          ^ source.bh punctuation.brace.bh
#                                                                                                                           ^^^^^^^^^^^ source.bh
#                                                                                                                                      ^ source.bh keyword.operator.infix.bh
#                                                                                                                                       ^^^^ source.bh
#                                                                                                                                           ^ source.bh punctuation.brace.bh
#                                                                                                                                            ^ source.bh
#                                                                                                                                             ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                                                     ^ source.bh
#                                                                                                                                                      ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                             ^ source.bh
#                                                                                                                                                              ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                                     ^ source.bh
#                                                                                                                                                                      ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                                                                                                              ^ source.bh
#                                                                                                                                                                               ^^^ source.bh constant.other.bh
#                                                                                                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                     ^^^^ source.bh
>              else do delay_count <- mkNCount False size
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.do.bh
#                     ^^^^^^^^^^^^^ source.bh
#                                  ^^ source.bh keyword.operator.arrow.left.bh
#                                    ^^^^^^^^^^ source.bh
#                                              ^^^^^ source.bh constant.other.bh
#                                                   ^^^^^^ source.bh
>                      let  p_init      = (setStringPosition ("_d_init" +++ p) pos)
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^ source.bh keyword.other.let.bh
#                         ^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^^^^^^^ source.bh string.quoted.double.bh
#                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                      ^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>                           action_init = action { delay_count.reset }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^^^^^^ source.bh keyword.other.action.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.brace.bh
#                                                 ^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh keyword.operator.infix.bh
#                                                              ^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.brace.bh
>                           s_init = (SAction p_init action_init Nothing)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^ source.bh constant.other.bh
#                                            ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^^^^^^^ source.bh constant.other.bh
#                                                                       ^ source.bh punctuation.paren.bh
>                      labelActions (SIf1 p (not (x == 0)) (SSeq p (Cons s_init (Cons (SWhile p (not (delay_count.is (x-1))) (SAction p action {delay_count.incr} Nothing) Nothing Nothing Nothing) Nil)))) ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^ source.bh
#                                                   ^^ source.bh keyword.operator.infix.bh
#                                                     ^ source.bh
#                                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^^^^ source.bh constant.other.bh
#                                                               ^^^ source.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^^ source.bh constant.other.bh
#                                                                       ^^^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^^^^ source.bh constant.other.bh
#                                                                                    ^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^^^^^^ source.bh constant.other.bh
#                                                                                            ^^^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                ^^^^ source.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                     ^^^^^^^^^^^ source.bh
#                                                                                                                ^ source.bh keyword.operator.infix.bh
#                                                                                                                 ^^^ source.bh
#                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                     ^ source.bh
#                                                                                                                      ^ source.bh keyword.operator.infix.bh
#                                                                                                                       ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                                                           ^ source.bh
#                                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                                             ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                    ^^^ source.bh
#                                                                                                                                       ^^^^^^ source.bh keyword.other.action.bh
#                                                                                                                                             ^ source.bh
#                                                                                                                                              ^ source.bh punctuation.brace.bh
#                                                                                                                                               ^^^^^^^^^^^ source.bh
#                                                                                                                                                          ^ source.bh keyword.operator.infix.bh
#                                                                                                                                                           ^^^^ source.bh
#                                                                                                                                                               ^ source.bh punctuation.brace.bh
#                                                                                                                                                                ^ source.bh
#                                                                                                                                                                 ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                                                                         ^ source.bh
#                                                                                                                                                                          ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                                                 ^ source.bh
#                                                                                                                                                                                  ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                                                         ^ source.bh
#                                                                                                                                                                                          ^^^^^^^ source.bh constant.other.bh
#                                                                                                                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                                  ^ source.bh
#                                                                                                                                                                                                   ^^^ source.bh constant.other.bh
#                                                                                                                                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                                          ^^^^ source.bh
>        return jj
#^^^^^^^^^^^^^^^^^^ source.bh
>
>labelActions (SRepeat p x st) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^ source.bh constant.other.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>     do let is_static = isStatic (pack x)
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
>            size = if is_static then (zExtend x) else 33000 -- gets a Bit#(16)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^^^^^^^^^^^ source.bh
#                                ^^^^ source.bh keyword.control.then.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^^^^ source.bh keyword.control.else.bh
#                                                     ^ source.bh
#                                                      ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                                              ^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>            pos  = getPIPosition p
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^ source.bh
>        {-# hide #-}
#^^^^^^^^ source.bh
#        ^^^ source.bh meta.preprocessor.bh
#           ^^^^^^ source.bh meta.preprocessor.bh
#                 ^^^ source.bh meta.preprocessor.bh
>        jj <- if (is_static && x == 1)
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^^^ source.bh
#                            ^^ source.bh keyword.operator.infix.bh
#                              ^^^ source.bh
#                                 ^^ source.bh keyword.operator.infix.bh
#                                   ^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh punctuation.paren.bh
>              then labelActions st ls
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^^^^^^^^^^^^^^^^^^^^ source.bh
>              else if (is_static && x == 0)
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^^ source.bh keyword.operator.infix.bh
#                                   ^^^ source.bh
#                                      ^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh constant.numeric.integral.decimal.bh
#                                          ^ source.bh punctuation.paren.bh
>                   then return ((SFSkip p), ls)
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^^^ source.bh keyword.control.then.bh
#                       ^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^ source.bh constant.other.bh
#                                       ^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh punctuation.separator.comma.bh
#                                           ^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>                   else do repeat_count <- mkNCount is_static size
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^^^ source.bh keyword.control.else.bh
#                       ^ source.bh
#                        ^^ source.bh keyword.control.do.bh
#                          ^^^^^^^^^^^^^^ source.bh
#                                        ^^ source.bh keyword.operator.arrow.left.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                           let p_init   = setStringPosition ("_r_init" +++ p) pos
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^^^ source.bh keyword.other.let.bh
#                              ^^^^^^^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^^^^^^^ source.bh string.quoted.double.bh
#                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                      ^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^^ source.bh
>                               p_update = setStringPosition ("_r_update" +++ p) pos
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                        ^ source.bh
#                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                            ^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^ source.bh
>                               action_init  = action { repeat_count.reset }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^ source.bh
#                                              ^^^^^^ source.bh keyword.other.action.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.brace.bh
#                                                      ^^^^^^^^^^^^^ source.bh
#                                                                   ^ source.bh keyword.operator.infix.bh
#                                                                    ^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.brace.bh
>                               s_init = (SIf1 p (not (repeat_count.is 0)) (SAction p_init action_init Nothing))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^^^^^ source.bh
#                                                                  ^ source.bh keyword.operator.infix.bh
#                                                                   ^^^ source.bh
#                                                                      ^ source.bh constant.numeric.integral.decimal.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^^^^^^^ source.bh constant.other.bh
#                                                                                  ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                      ^^^^^^^ source.bh constant.other.bh
#                                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                                              ^ source.bh punctuation.paren.bh
>                               update_action = action {if (repeat_count.is (x - 1)) then action {repeat_count.reset} else action { repeat_count.incr }}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^ source.bh
#                                               ^^^^^^ source.bh keyword.other.action.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.brace.bh
#                                                       ^^ source.bh keyword.control.if.bh
#                                                         ^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^^^^^^^^^^^^ source.bh
#                                                                       ^ source.bh keyword.operator.infix.bh
#                                                                        ^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^^ source.bh
#                                                                              ^ source.bh keyword.operator.infix.bh
#                                                                               ^ source.bh
#                                                                                ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh
#                                                                                    ^^^^ source.bh keyword.control.then.bh
#                                                                                        ^ source.bh
#                                                                                         ^^^^^^ source.bh keyword.other.action.bh
#                                                                                               ^ source.bh
#                                                                                                ^ source.bh punctuation.brace.bh
#                                                                                                 ^^^^^^^^^^^^ source.bh
#                                                                                                             ^ source.bh keyword.operator.infix.bh
#                                                                                                              ^^^^^ source.bh
#                                                                                                                   ^ source.bh punctuation.brace.bh
#                                                                                                                    ^ source.bh
#                                                                                                                     ^^^^ source.bh keyword.control.else.bh
#                                                                                                                         ^ source.bh
#                                                                                                                          ^^^^^^ source.bh keyword.other.action.bh
#                                                                                                                                ^ source.bh
#                                                                                                                                 ^ source.bh punctuation.brace.bh
#                                                                                                                                  ^^^^^^^^^^^^^ source.bh
#                                                                                                                                               ^ source.bh keyword.operator.infix.bh
#                                                                                                                                                ^^^^^ source.bh
#                                                                                                                                                     ^ source.bh punctuation.brace.bh
#                                                                                                                                                      ^ source.bh punctuation.brace.bh
>
>                               s_pre = (SIf1 p (not (x == 0)) (SAction p_update update_action (Just (Update Overlap))))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^ source.bh
#                                                       ^^ source.bh keyword.operator.infix.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^^^^^ source.bh constant.other.bh
#                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                              ^ source.bh punctuation.paren.bh
#                                                                                               ^^^^ source.bh constant.other.bh
#                                                                                                   ^ source.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                     ^^^^^^ source.bh constant.other.bh
#                                                                                                           ^ source.bh
#                                                                                                            ^^^^^^^ source.bh constant.other.bh
#                                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                                      ^ source.bh punctuation.paren.bh
>                               s_post = (SIf1 p (repeat_count.is 0) (SBreak p))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh keyword.operator.infix.bh
#                                                              ^^^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^^^^^^ source.bh constant.other.bh
#                                                                           ^^ source.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^ source.bh punctuation.paren.bh
>                           labelActions (SWhile p (not (x == 0)) st (Just s_init) (Just s_pre) (Just s_post)) ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh constant.other.bh
#                                               ^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^ source.bh
#                                                          ^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh
#                                                             ^ source.bh constant.numeric.integral.decimal.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^^^^ source.bh constant.other.bh
#                                                                         ^^^^^^^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^^^^ source.bh constant.other.bh
#                                                                                       ^^^^^^ source.bh
#                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                              ^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                ^^^^ source.bh constant.other.bh
#                                                                                                    ^^^^^^^ source.bh
#                                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                             ^^^^ source.bh
>        return jj
#^^^^^^^^^^^^^^^^^^ source.bh
>
>-- labelActions (SFor p (SAction p_init a_init _)  c (SAction p_update a_update _) s_body) ls =
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--      do let pos_init       = getPIPosition p_init
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--             pos_update     = getPIPosition p_update
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--             p_init'        = setStringPosition ("_f_init" +++ p) pos_init
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--             p_update'      = setStringPosition ("_f_update" +++ p) pos_update
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--             comment_init   = (setStringPosition "For loop initialization action" pos_init)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--             comment_update = (setStringPosition "For loop update action" pos_update)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--         labelActions (SWhile p c s_body (Just (SAction p_init' a_init   (Just (Update (Early comment_init))))) Nothing
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--                                         (Just (SAction p_update' a_update (Just (Update (Early comment_update)))))) ls
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>labelActions (SFor p (SAction p_init a_init _)  c (SAction p_update a_update _) s_body) ls =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^ source.bh constant.other.bh
#                                                          ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^^^ source.bh
#                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                       ^^^^ source.bh
#                                                                                           ^ source.bh keyword.operator.eq.bh
>     do let pos_init       = getPIPosition p_init
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>            pos_update     = getPIPosition p_update
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>            p_init'        = setStringPosition ("_f_init" +++ p) pos_init
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                 ^^^^^^^ source.bh string.quoted.double.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                         ^ source.bh
#                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^^ source.bh
>            p_update'      = setStringPosition ("_f_update" +++ p) pos_update
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                 ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                           ^ source.bh
#                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                               ^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^^^^^^^^^^ source.bh
>        labelActions (SWhile p c s_body (Just (SAction p_init' a_init   Nothing   )) Nothing
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh constant.other.bh
#                                                      ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                        ^^^^^^^ source.bh constant.other.bh
#                                                                               ^^^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                    ^ source.bh
#                                                                                     ^^^^^^^ source.bh constant.other.bh
>                                        (Just (SAction p_update' a_update Nothing   ))) ls
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^ source.bh constant.other.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                          ^^^^^^^ source.bh constant.other.bh
#                                                                                 ^^^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                       ^^^^ source.bh
>
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>labelActions st _ =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
>    do x <- stmtTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>isStatic :: (Bit n) -> Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isStatic  = isStaticIndex
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
>
>isStaticAndFalse :: Bool -> Bool
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isStaticAndFalse cond = (isStatic (pack cond)) && (not cond)
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
>
>isStaticAndTrue :: Bool -> Bool
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>isStaticAndTrue cond = (isStatic (pack cond)) && cond
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^^ source.bh keyword.operator.infix.bh
#                                                ^^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>addNextStateDescriptors :: (Monad m) => (StmtFT a) -> NextStateDescriptors
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>                       -> m ((StmtFT a), NextStateDescriptors)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
>addNextStateDescriptors (SFAction p id _ a_abort a at rs) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^ source.bh constant.other.bh
#                                 ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^ source.bh
#                                                              ^ source.bh keyword.operator.eq.bh
>    do
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
>       let r = (SFAction p id nsd a_abort a at rs)
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>       -- messageM("adding " +++ (nextStateDescriptorsToString nsd) +++ " to action" +++ p +++ " (" +++ (integerToString id) +++ ") nsd_rtrn = " +++ (nextStateDescriptorsToString nsd_rtrn))
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       return (r, (Cons (True, id) Nil))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^ source.bh punctuation.separator.comma.bh
#                              ^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^^^ source.bh constant.other.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh punctuation.paren.bh
>
>-- TTTT
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^ source.bh comment.line.double-dash.bh
>addNextStateDescriptors st@(SFPar _ _ _) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.tight.at.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^ source.bh constant.other.bh
#                                 ^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
>    return (st, nsd)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^ source.bh
#              ^ source.bh punctuation.separator.comma.bh
#               ^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFSeq p (Cons st Nil)) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^ source.bh constant.other.bh
#                              ^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^^^^ source.bh
#                                          ^^^ source.bh constant.other.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^ source.bh
#                                                    ^ source.bh keyword.operator.eq.bh
>    do (r, x) <- addNextStateDescriptors st nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((SFSeq p (Cons r Nil)), x)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^ source.bh
#                                ^^^ source.bh constant.other.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFSeq p (Cons st ss)) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^ source.bh constant.other.bh
#                              ^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
>    do (r0, nsd0) <- addNextStateDescriptors (SFSeq p ss) nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^ source.bh constant.other.bh
#                                                   ^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^ source.bh
>       (r, nsd1) <- addNextStateDescriptors st nsd0
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       let rr = (getStmtFTList r0)
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>       return ((SFSeq p (Cons r rr)), nsd1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.separator.comma.bh
#                                     ^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFIf1 p c st) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^ source.bh constant.other.bh
#                              ^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
>    addNextStateDescriptors (SFIf2 p c st (SFSkip p)) nsd
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^ source.bh constant.other.bh
#                                  ^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^ source.bh constant.other.bh
#                                                 ^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^ source.bh
>
>addNextStateDescriptors (SFIf2 p c s0 s1) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^ source.bh constant.other.bh
#                              ^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>    do (r0, nsd0) <- addNextStateDescriptors s0 nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       (r1, nsd1) <- addNextStateDescriptors s1 nsd
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       let nsd0a = applyConditionToAll c nsd0
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       let nsd1a = applyConditionToAll (not c) nsd1
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^ source.bh
>       return ((SFIf2 p c r0 r1), (appendDescriptors nsd0a nsd1a))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh punctuation.separator.comma.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors st@(SFSkip _) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.tight.at.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^ source.bh constant.other.bh
#                                  ^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>    return (st, nsd)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^ source.bh
#              ^ source.bh punctuation.separator.comma.bh
#               ^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFNamed p name (Cons st Nil)) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^ source.bh constant.other.bh
#                                ^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^ source.bh
#                                                           ^ source.bh keyword.operator.eq.bh
>    do (s0, nsd0) <- addNextStateDescriptors st nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((SFNamed p name (Cons s0 Nil)), nsd0)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh constant.other.bh
#                                    ^^^^ source.bh
#                                        ^^^ source.bh constant.other.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.separator.comma.bh
#                                              ^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFLabel p name _ Nothing) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^ source.bh constant.other.bh
#                                ^^^^^^^^^^ source.bh
#                                          ^^^^^^^ source.bh constant.other.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^ source.bh
#                                                       ^ source.bh keyword.operator.eq.bh
>    return ((SFLabel p name nsd Nothing), nsd)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^^^ source.bh
#                                ^^^^^^^ source.bh constant.other.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.separator.comma.bh
#                                         ^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors st@(SFReturn _) _ =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.tight.at.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^ source.bh constant.other.bh
#                                    ^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>    return (st, (Cons (True, idle_state) Nil))
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^ source.bh
#              ^ source.bh punctuation.separator.comma.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^ source.bh constant.other.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^^^ source.bh constant.other.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors st@(SFNamed _ _ Nil) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.tight.at.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^ source.bh constant.other.bh
#                                   ^^^^^ source.bh
#                                        ^^^ source.bh constant.other.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
>     return (st, nsd)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^ source.bh
#               ^ source.bh punctuation.separator.comma.bh
#                ^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFNamed p name (Cons st Nil)) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^ source.bh constant.other.bh
#                                ^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^ source.bh
#                                                           ^ source.bh keyword.operator.eq.bh
>    do (r, x) <- addNextStateDescriptors st nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((SFNamed p name (Cons r Nil)), x)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh constant.other.bh
#                                    ^^^ source.bh
#                                       ^^^ source.bh constant.other.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh punctuation.separator.comma.bh
#                                             ^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors st@(SFUntil _ c) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.infix.tight.at.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^ source.bh constant.other.bh
#                                   ^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
>    do let nsd_mod = applyConditionToAll c nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (st, nsd_mod)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.separator.comma.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors (SFWhile p c st) nsd =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^ source.bh constant.other.bh
#                                ^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
>    do let nsd_done = applyConditionToAll (not c) nsd
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh
>       (_r0, nsd0) <- addNextStateDescriptors st Nil
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.left.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
>       let nsd_continue = applyConditionToAll c nsd0
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       (r1, nsd1) <- addNextStateDescriptors st (appendDescriptors nsd_done nsd_continue)
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                        ^ source.bh punctuation.paren.bh
>       return ((SFWhile p c r1), (appendDescriptors nsd_done (applyConditionToAll c nsd1)))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh punctuation.separator.comma.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                          ^ source.bh punctuation.paren.bh
>
>addNextStateDescriptors st _ =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    do x <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>applyCondition :: Bool -> NextStateDescriptor -> NextStateDescriptor
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>applyCondition b (c,num) = ((b && c), num)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.separator.comma.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^ source.bh
#                               ^^ source.bh keyword.operator.infix.bh
#                                 ^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.separator.comma.bh
#                                     ^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>
>applyConditionToAll :: Bool -> NextStateDescriptors -> NextStateDescriptors
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>applyConditionToAll b descriptor = (map (applyCondition b) descriptor)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
>
>appendDescriptors :: NextStateDescriptors -> NextStateDescriptors -> NextStateDescriptors
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>appendDescriptors Nil descriptor = descriptor
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^^^^^ source.bh
>appendDescriptors (Cons first rest) descriptor = appendDescriptors rest (addDescriptor first descriptor)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                       ^ source.bh punctuation.paren.bh
>
>addDescriptor :: NextStateDescriptor -> NextStateDescriptors -> NextStateDescriptors
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>-- addDescriptor (c,i) (Cons (c', i') rest) = (Cons (c', i') (addDescriptor (c, i) rest))
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>addDescriptor (c,i) (Cons (c', i') rest) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^ source.bh punctuation.separator.comma.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh constant.other.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh
#                             ^ source.bh punctuation.separator.comma.bh
#                              ^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
>    if (i == i') then (Cons ((c || c'), i) rest)
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^^ source.bh keyword.operator.infix.bh
#            ^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^^^ source.bh keyword.control.then.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^ source.bh constant.other.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh punctuation.separator.comma.bh
#                                       ^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>                 else (Cons (c', i') (addDescriptor (c, i) rest))
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^^^ source.bh keyword.control.else.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^ source.bh constant.other.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.separator.comma.bh
#                                ^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.separator.comma.bh
#                                                       ^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh punctuation.paren.bh
>addDescriptor x Nil = (Cons x Nil)
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^ source.bh constant.other.bh
#                   ^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^ source.bh constant.other.bh
#                           ^^^ source.bh
#                              ^^^ source.bh constant.other.bh
#                                 ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>nextStateDescriptorToString :: NextStateDescriptor -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nextStateDescriptorToString (c,i) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.separator.comma.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    let static = isStatic (pack c)
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>        out = if (static && c)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>              then "(True, " +++ (integerToString i) +++ ")"
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                            ^ source.bh
#                             ^^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^^ source.bh keyword.operator.infix.bh
#                                                        ^ source.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                          ^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>              else if (static && (not c))
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^ source.bh
#                              ^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
>              then "(False, " +++ (integerToString i) +++ ")"
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                             ^ source.bh
#                              ^^^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                         ^ source.bh
#                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                           ^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>              else  "(X, " +++ (integerToString i) +++ ")"
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^^ source.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                     ^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                          ^ source.bh
#                           ^^^ source.bh keyword.operator.infix.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                      ^ source.bh
#                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                        ^ source.bh string.quoted.double.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    in out
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^^^ source.bh
>
>nextStateDescriptorsToString :: NextStateDescriptors -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nextStateDescriptorsToString x = "(" +++ (nextStateDescriptorsToStringInternal x) +++ ")"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^ source.bh string.quoted.double.bh
#                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                    ^ source.bh
#                                     ^^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^ source.bh
#                                                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                                                     ^ source.bh
#                                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                       ^ source.bh string.quoted.double.bh
#                                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>nextStateDescriptorsToStringInternal :: NextStateDescriptors -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>nextStateDescriptorsToStringInternal Nil = ""
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^ source.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>nextStateDescriptorsToStringInternal (Cons x Nil) = nextStateDescriptorToString x
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^^^ source.bh
#                                             ^^^ source.bh constant.other.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^ source.bh keyword.operator.eq.bh
#                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>nextStateDescriptorsToStringInternal (Cons x rest) = (nextStateDescriptorToString x) +++ " " +++ (nextStateDescriptorsToStringInternal rest)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                    ^ source.bh
#                                                                                     ^^^ source.bh keyword.operator.infix.bh
#                                                                                        ^ source.bh
#                                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                          ^ source.bh string.quoted.double.bh
#                                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                            ^ source.bh
#                                                                                             ^^^ source.bh keyword.operator.infix.bh
#                                                                                                ^ source.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                                           ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>twoStateDescriptorToString :: TwoStateDescriptor -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>twoStateDescriptorToString (TSD c from to Default) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^^^^^^^ source.bh constant.other.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
>    "(" +++ (boolToString c) +++ ", " +++ (integerToString from) +++ ", " +++ (integerToString to) +++ ")"
#^^^^ source.bh
#    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#     ^ source.bh string.quoted.double.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#       ^ source.bh
#        ^^^ source.bh keyword.operator.infix.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^ source.bh string.quoted.double.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                     ^ source.bh
#                                      ^^^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                      ^^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh
#                                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                  ^ source.bh
#                                                                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                                                                      ^ source.bh
#                                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                        ^ source.bh string.quoted.double.bh
#                                                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>twoStateDescriptorToString (TSD c from to Start) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^^^^^ source.bh constant.other.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
>    "(" +++ (boolToString c) +++ ", " +++ (integerToString from) +++ ", " +++ (integerToString to) +++ " (S))"
#^^^^ source.bh
#    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#     ^ source.bh string.quoted.double.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#       ^ source.bh
#        ^^^ source.bh keyword.operator.infix.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^ source.bh string.quoted.double.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                     ^ source.bh
#                                      ^^^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                      ^^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh
#                                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                  ^ source.bh
#                                                                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                                                                      ^ source.bh
#                                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                        ^^^^^ source.bh string.quoted.double.bh
#                                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>twoStateDescriptorToString (TSD c from to End) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^^^ source.bh constant.other.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
>    "(" +++ (boolToString c) +++ ", " +++ (integerToString from) +++ ", " +++ (integerToString to) +++ " (E))"
#^^^^ source.bh
#    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#     ^ source.bh string.quoted.double.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#       ^ source.bh
#        ^^^ source.bh keyword.operator.infix.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                  ^^ source.bh string.quoted.double.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                     ^ source.bh
#                                      ^^^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh
#                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                      ^^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh
#                                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                  ^ source.bh
#                                                                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                                                                      ^ source.bh
#                                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                        ^^^^^ source.bh string.quoted.double.bh
#                                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>twoStateDescriptorsToString :: TwoStateDescriptors -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>twoStateDescriptorsToString x = "(" +++ (twoStateDescriptorsToStringInternal x) +++ ")"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^ source.bh
#                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                 ^ source.bh string.quoted.double.bh
#                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                   ^ source.bh
#                                    ^^^ source.bh keyword.operator.infix.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh
#                                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                     ^ source.bh string.quoted.double.bh
#                                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>twoStateDescriptorsToStringInternal :: TwoStateDescriptors -> String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>twoStateDescriptorsToStringInternal Nil = ""
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^^^ source.bh constant.other.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>twoStateDescriptorsToStringInternal (Cons x Nil) = twoStateDescriptorToString x
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^^^ source.bh
#                                            ^^^ source.bh constant.other.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
#                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>twoStateDescriptorsToStringInternal (Cons x rest) = (twoStateDescriptorToString x) +++ " " +++ (twoStateDescriptorsToStringInternal rest)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^ source.bh keyword.operator.eq.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh
#                                                                                   ^^^ source.bh keyword.operator.infix.bh
#                                                                                      ^ source.bh
#                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                        ^ source.bh string.quoted.double.bh
#                                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                          ^ source.bh
#                                                                                           ^^^ source.bh keyword.operator.infix.bh
#                                                                                              ^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                                        ^ source.bh punctuation.paren.bh
>
>
>boolToString :: Bool -> String
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>boolToString c =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
>    let static = isStatic (pack c)
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>        out = if (static && c)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>              then "True"
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>              else if (static && (not c))
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^ source.bh
#                              ^^ source.bh keyword.operator.infix.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
>              then "False"
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>              else "X"
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                    ^ source.bh string.quoted.double.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    in out
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getStmtFTList :: (StmtFT a) -> (List (StmtFT a))
#^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh
>getStmtFTList (SFSeq _ rr) = rr
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^ source.bh
>getStmtFTList _ = error "unhandled case"
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getNoActionConditionOrig :: (Monad m) => Integer -> (StmtFT a) -> m Bool
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getNoActionConditionOrig num seq =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>            do let -- temp = (createUniqueLabelWithSuffix "_temp" 0 ls)
#^^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.control.do.bh
#              ^ source.bh
#               ^^^ source.bh keyword.other.let.bh
#                  ^ source.bh
#                   ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                   -- ls'  = (addLabel temp ls)
#^^^^^^^^^^^^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#                   ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                   m    = num
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^ source.bh
>                   st   = (SFSeq noPosInfo (Cons (SFAction noPosInfo m Nil noAction noAction nAT nR)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^ source.bh constant.other.bh
#                                ^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^^ source.bh constant.other.bh
#                                                          ^^^^^^^^^^^^^ source.bh
#                                                                       ^^^ source.bh constant.other.bh
#                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                   ^ source.bh punctuation.paren.bh
>                                 (Cons seq (Cons (SFAction noPosInfo (m + 1) Nil noAction noAction nAT nR) Nil))))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^^ source.bh constant.other.bh
#                                                          ^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^^ source.bh
#                                                                        ^ source.bh keyword.operator.infix.bh
#                                                                         ^ source.bh
#                                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^^^ source.bh constant.other.bh
#                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                          ^ source.bh
#                                                                                                           ^^^ source.bh constant.other.bh
#                                                                                                              ^ source.bh punctuation.paren.bh
#                                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                                ^ source.bh punctuation.paren.bh
#                                                                                                                 ^ source.bh punctuation.paren.bh
>                   no_action (TSD _ f t _) = (f == m) && (t == (m + 1))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^ source.bh constant.other.bh
#                                 ^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^ source.bh
#                                                ^^ source.bh keyword.operator.infix.bh
#                                                  ^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^ source.bh
#                                                            ^^ source.bh keyword.operator.infix.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^ source.bh
#                                                                  ^ source.bh keyword.operator.infix.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh punctuation.paren.bh
>               (_, tsds) <- getRefinedTSDs True False True st
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^ source.bh punctuation.separator.comma.bh
#                  ^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.left.bh
#                           ^^^^^^^^^^^^^^^^ source.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^^^^^ source.bh constant.other.bh
#                                                     ^ source.bh
#                                                      ^^^^ source.bh constant.other.bh
#                                                          ^^^^ source.bh
>               let no_action_list = filter no_action tsds
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh keyword.other.let.bh
#                  ^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>                   getCond (TSD c _ _ _) = c
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^^^ source.bh
>                   combined_cond Nil = False
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^^^ source.bh constant.other.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^ source.bh
#                                       ^^^^^ source.bh constant.other.bh
>                   combined_cond x   = foldr1 (||) (map getCond x)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^ source.bh entity.name.function.infix.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>               return (combined_cond no_action_list)
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>
>getNoActionCondition :: (IsModule m c) => (StmtT a) -> m Bool
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>getNoActionCondition (SAction _ _ Nothing) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^^^^^^^^ source.bh
#                                                    ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SAction _ _ (Just (Jump _))) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh constant.other.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
#                                                    ^^^^^^^^ source.bh
#                                                            ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SAction _ _ (Just (Update Overlap))) = return True
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh constant.other.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^^^^^^^ source.bh constant.other.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh keyword.operator.eq.bh
#                                                            ^^^^^^^^ source.bh
#                                                                    ^^^^ source.bh constant.other.bh
>getNoActionCondition (SAction _ _ _)       = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^^^^^^^^ source.bh
#                                                    ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SJump _ _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^ source.bh constant.other.bh
#                           ^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^ source.bh
#                                          ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SContinue _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^^ source.bh constant.other.bh
#                               ^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^^^^^^^^ source.bh
#                                            ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SBreak _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^^^^ source.bh
#                                         ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SReturn _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^ source.bh
#                                          ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SIf1 _ c s1)  =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do c1 <- getNoActionCondition s1
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((c && c1) || (not c))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
>getNoActionCondition (SIf2 _ c s1 s2) =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
>    do c1 <- getNoActionCondition s1
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       c2 <- getNoActionCondition s2
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ((c && c1) || ((not c) && c2))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^^ source.bh keyword.operator.infix.bh
#                                       ^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh punctuation.paren.bh
>getNoActionCondition (SSeq _ (Cons st Nil)) = getNoActionCondition st
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^^^^ source.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>getNoActionCondition (SSeq p (Cons st ss)) =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
>    do c0 <- getNoActionCondition st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       c1 <- getNoActionCondition (SSeq p ss)
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh constant.other.bh
#                                       ^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>       return (c0 && c1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
>getNoActionCondition (SExprS p e) =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    do (_, ss) <- liftModule (unS e)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>       getNoActionCondition (SSeq p ss)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
>getNoActionCondition (SWhile _ c _ (Just ss_init) _ _) =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh keyword.operator.eq.bh
>    do c_init <- getNoActionCondition ss_init
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (c_init  && (not c))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh punctuation.paren.bh
>getNoActionCondition (SWhile _ c _ _ _ _) = return (not c)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
>getNoActionCondition (SRepeat _ n _) = return (n == 0)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^ source.bh
#                                                 ^^ source.bh keyword.operator.infix.bh
#                                                   ^ source.bh
#                                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                                     ^ source.bh punctuation.paren.bh
>getNoActionCondition (SDelay _ n) = return (n == 0)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^ source.bh
#                                              ^^ source.bh keyword.operator.infix.bh
#                                                ^ source.bh
#                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                  ^ source.bh punctuation.paren.bh
>getNoActionCondition (SSkip _) = return True
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^ source.bh constant.other.bh
#                           ^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^ source.bh
#                                        ^^^^ source.bh constant.other.bh
>getNoActionCondition (SLabel _ _ _ Nothing) = return True
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^ source.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^^^^^^^^ source.bh
#                                                     ^^^^ source.bh constant.other.bh
>getNoActionCondition (SCall _ _ _ _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^ source.bh constant.other.bh
#                           ^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^^^^^^^^ source.bh
#                                              ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SPar _ Nil) = return True
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^^^ source.bh constant.other.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^^ source.bh
#                                           ^^^^ source.bh constant.other.bh
>getNoActionCondition (SPar _ (Cons st Nil)) = getNoActionCondition st
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^^^^ source.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>getNoActionCondition (SPar _ _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^^^^ source.bh
#                                         ^^^^^ source.bh constant.other.bh
>getNoActionCondition (SFor _ (SAction _p_init _a_init _) _ _ _) = return False
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^ source.bh constant.other.bh
#                                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh keyword.operator.eq.bh
#                                                                 ^^^^^^^^ source.bh
#                                                                         ^^^^^ source.bh constant.other.bh
>getNoActionCondition st =
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
>    do x <- stmtTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>stmtFTToString :: (Monad m) => (StmtFT a) -> m String
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stmtFTToString (SFAction p num _ _ _ (Just Default) _) = return ("[Default Action " +++ (integerToString num) +++ " " +++ (getPIString p) +++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^^^^^^^ source.bh constant.other.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh keyword.operator.eq.bh
#                                                        ^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                  ^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                   ^ source.bh
#                                                                                    ^^^ source.bh keyword.operator.infix.bh
#                                                                                       ^ source.bh
#                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                         ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                             ^ source.bh
#                                                                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                 ^ source.bh
#                                                                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                   ^ source.bh string.quoted.double.bh
#                                                                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                     ^ source.bh
#                                                                                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                         ^ source.bh
#                                                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                                                           ^^^^^^^^^^^^^ source.bh
#                                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                                         ^ source.bh
#                                                                                                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                                             ^ source.bh
#                                                                                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                                               ^ source.bh string.quoted.double.bh
#                                                                                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                                                 ^ source.bh punctuation.paren.bh
>stmtFTToString (SFAction p num _ _ _ (Just Wait) _) = return ("[Wait Action " +++ (integerToString num) +++ " " +++ (getPIString p) +++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh
#                                                    ^ source.bh keyword.operator.eq.bh
#                                                     ^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                               ^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                             ^ source.bh
#                                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                                 ^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                                       ^ source.bh
#                                                                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                                                                           ^ source.bh
#                                                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                             ^ source.bh string.quoted.double.bh
#                                                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                               ^ source.bh
#                                                                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                   ^ source.bh
#                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                     ^^^^^^^^^^^^^ source.bh
#                                                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                                                   ^ source.bh
#                                                                                                                                    ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                                       ^ source.bh
#                                                                                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                                         ^ source.bh string.quoted.double.bh
#                                                                                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                                           ^ source.bh punctuation.paren.bh
>stmtFTToString (SFAction p num _ _ _ (Just (Jump label)) _) = return ("[Jump Action " +++ (integerToString num) +++ " " +++ (getPIString p) +++ " " +++ label +++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh
#                                                            ^ source.bh keyword.operator.eq.bh
#                                                             ^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                     ^ source.bh
#                                                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                                                         ^ source.bh
#                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                           ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                              ^ source.bh punctuation.paren.bh
#                                                                                                               ^ source.bh
#                                                                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                   ^ source.bh
#                                                                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                     ^ source.bh string.quoted.double.bh
#                                                                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                       ^ source.bh
#                                                                                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                           ^ source.bh
#                                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                                             ^^^^^^^^^^^^^ source.bh
#                                                                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                                                                           ^ source.bh
#                                                                                                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                                               ^ source.bh
#                                                                                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                                                 ^ source.bh string.quoted.double.bh
#                                                                                                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                                                   ^ source.bh
#                                                                                                                                                    ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                                                       ^^^^^^^ source.bh
#                                                                                                                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                                                                 ^ source.bh
#                                                                                                                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                                                                   ^ source.bh string.quoted.double.bh
#                                                                                                                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                                                                     ^ source.bh punctuation.paren.bh
>stmtFTToString (SFAction p num _ _ _ _ _) = return ("[Action " +++ (integerToString num) +++ " " +++ (getPIString p) +++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                     ^^^^^^^^ source.bh string.quoted.double.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                              ^ source.bh
#                                                               ^^^ source.bh keyword.operator.infix.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                        ^ source.bh
#                                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                                            ^ source.bh
#                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                              ^ source.bh string.quoted.double.bh
#                                                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                ^ source.bh
#                                                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                                                    ^ source.bh
#                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                      ^^^^^^^^^^^^^ source.bh
#                                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                                    ^ source.bh
#                                                                                                                     ^^^ source.bh keyword.operator.infix.bh
#                                                                                                                        ^ source.bh
#                                                                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                          ^ source.bh string.quoted.double.bh
#                                                                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                            ^ source.bh punctuation.paren.bh
>stmtFTToString (SFIf1 p _ st)  =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[If1" +++(getPIString p)+++ " " +++ sub +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                               ^ source.bh punctuation.paren.bh
>stmtFTToString (SFIf2 p _ s0 s1)  =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    do sub0 <- stmtFTToString s0
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^^ source.bh
>       sub1 <- stmtFTToString s1
#^^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[If2" +++(getPIString p)+++ " " +++ sub0 +++ " " +++ sub1 +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                ^ source.bh
#                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                    ^^^^^^ source.bh
#                                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                               ^ source.bh string.quoted.double.bh
#                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>stmtFTToString (SFSeq p ss) =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
>    do subs <- stmtFTListToString ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[Seq" +++(getPIString p)+++ " " +++ subs +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                             ^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                            ^ source.bh
#                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                              ^ source.bh string.quoted.double.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                ^ source.bh punctuation.paren.bh
>stmtFTToString (SFPar p _ ss) =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>    do subs <- stmtTListToString ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^ source.bh
#            ^^ source.bh keyword.operator.arrow.left.bh
#              ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[Par" +++ (getPIString p) +++ " " +++ subs +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^ source.bh string.quoted.double.bh
#                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                     ^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^^^ source.bh keyword.operator.infix.bh
#                                             ^ source.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                               ^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^^^^^^ source.bh
#                                                           ^^^ source.bh keyword.operator.infix.bh
#                                                              ^ source.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                ^ source.bh string.quoted.double.bh
#                                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                  ^ source.bh punctuation.paren.bh
>stmtFTToString (SFSkip p) = return ("[Skip" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                     ^^^^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh
#                                            ^^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                   ^ source.bh string.quoted.double.bh
#                                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                     ^ source.bh punctuation.paren.bh
>stmtFTToString (SFLabel p name _ Nothing) = return ("[Label " +++ name +++ " " +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^^^^^^^ source.bh constant.other.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                     ^^^^^^^ source.bh string.quoted.double.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                             ^ source.bh
#                                                              ^^^ source.bh keyword.operator.infix.bh
#                                                                 ^^^^^^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                            ^ source.bh string.quoted.double.bh
#                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                              ^ source.bh
#                                                                               ^^^ source.bh keyword.operator.infix.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^^^^^^^^^^^^^ source.bh
#                                                                                                ^ source.bh punctuation.paren.bh
#                                                                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                                                                    ^ source.bh
#                                                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                      ^ source.bh string.quoted.double.bh
#                                                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                        ^ source.bh punctuation.paren.bh
>stmtFTToString (SFReturn p) = return ("[Return" +++(getPIString p)+++ "]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                       ^ source.bh string.quoted.double.bh
#                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                         ^ source.bh punctuation.paren.bh
>-- stmtFTToString (SFBreak p) = return ("[Break" +++(getPIString p)+++ "]")
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- stmtFTToString (SFContinue p) = return ("[Continue" +++(getPIString p)+++ "]")
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>stmtFTToString (SFWhile p _ st) =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[While" +++(getPIString p)+++ " " +++ sub +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^ source.bh string.quoted.double.bh
#                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                       ^ source.bh
#                        ^^^ source.bh keyword.operator.infix.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^ source.bh keyword.operator.infix.bh
#                                             ^ source.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                               ^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^^^^^ source.bh
#                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                             ^ source.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                               ^ source.bh string.quoted.double.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh punctuation.paren.bh
>stmtFTToString (SFFor p s1 _ s2 s3) =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do x1 <- stmtFTToString s1
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^ source.bh
>       x2 <- stmtFTToString s2
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^ source.bh
>       x3 <- stmtFTToString s3
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[SFor" +++(getPIString p)+++ " " +++ x1 +++ " " +++ x2 +++ " " +++ x3 +++ "]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^ source.bh string.quoted.double.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                      ^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                              ^ source.bh string.quoted.double.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh keyword.operator.infix.bh
#                                                    ^^^^ source.bh
#                                                        ^^^ source.bh keyword.operator.infix.bh
#                                                           ^ source.bh
#                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                             ^ source.bh string.quoted.double.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                               ^ source.bh
#                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                   ^^^^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                            ^ source.bh string.quoted.double.bh
#                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                              ^ source.bh
#                                                                               ^^^ source.bh keyword.operator.infix.bh
#                                                                                  ^^^^ source.bh
#                                                                                      ^^^ source.bh keyword.operator.infix.bh
#                                                                                         ^ source.bh
#                                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                           ^ source.bh string.quoted.double.bh
#                                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                             ^ source.bh punctuation.paren.bh
>stmtFTToString (SFNamed p nm Nil)  =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^ source.bh
#                             ^^^ source.bh constant.other.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>    return ("[SFNamed " +++ nm +++ (getPIString p)+++ "]")
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^ source.bh string.quoted.double.bh
#                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                       ^ source.bh
#                        ^^^ source.bh keyword.operator.infix.bh
#                           ^^^^ source.bh
#                               ^^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^ source.bh
#                                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                       ^ source.bh string.quoted.double.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                         ^ source.bh punctuation.paren.bh
>stmtFTToString (SFNamed p nm (Cons st Nil)) =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^^^^ source.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
>    do sub <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("[SNamed " +++ nm +++ (getPIString p)+++ " [" +++ sub +++ "]]")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^^^ source.bh
#                                 ^^^ source.bh keyword.operator.infix.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^^ source.bh keyword.operator.infix.bh
#                                                       ^ source.bh
#                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                         ^^ source.bh string.quoted.double.bh
#                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                            ^ source.bh
#                                                             ^^^ source.bh keyword.operator.infix.bh
#                                                                ^^^^^ source.bh
#                                                                     ^^^ source.bh keyword.operator.infix.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                          ^^ source.bh string.quoted.double.bh
#                                                                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                             ^ source.bh punctuation.paren.bh
>stmtFTToString (SFUntil _ _) = return ("[SFUntil]")
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                  ^ source.bh punctuation.paren.bh
>stmtFTToString _ = return "XXXX"
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                           ^^^^ source.bh string.quoted.double.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>stmtFTToString _ = error "unhandled case"
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                          ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>stmtFTListToString :: (Monad m) => (List (StmtFT a)) -> m String
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stmtFTListToString x =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
>    do y <- stmtFTListToStringInternal x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("(" +++ y +++ ")")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^ source.bh string.quoted.double.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                  ^ source.bh
#                   ^^^ source.bh keyword.operator.infix.bh
#                      ^^^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^ source.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                              ^ source.bh string.quoted.double.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^ source.bh punctuation.paren.bh
>
>stmtFTListToStringInternal :: (Monad m) => (List (StmtFT a)) -> m String
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>stmtFTListToStringInternal Nil = return ""
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^ source.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>stmtFTListToStringInternal (Cons x Nil) = stmtFTToString x
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^ source.bh
#                                   ^^^ source.bh constant.other.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^^^^^^^^ source.bh
>stmtFTListToStringInternal (Cons x rest) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
>    do y <- stmtFTToString x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
>       z <- stmtFTListToStringInternal rest
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (y +++ " " +++ z)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^^ source.bh keyword.operator.infix.bh
#                    ^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>
>
>integerListToString :: (Monad m) => (List Integer) -> m String
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>integerListToString x =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>    do y <- integerListToStringInternal x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return ("(" +++ y +++ ")")
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^ source.bh string.quoted.double.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                  ^ source.bh
#                   ^^^ source.bh keyword.operator.infix.bh
#                      ^^^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^ source.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                              ^ source.bh string.quoted.double.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                ^ source.bh punctuation.paren.bh
>
>integerListToStringInternal :: (Monad m) => (List Integer) -> m String
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>integerListToStringInternal Nil = return ""
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^^^^ source.bh
#                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>integerListToStringInternal (Cons x Nil) = return (integerToString x)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^ source.bh
#                                    ^^^ source.bh constant.other.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh keyword.operator.eq.bh
#                                          ^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>integerListToStringInternal (Cons x rest) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>    do let y = integerToString x
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^^^^^ source.bh
>       z <- integerListToStringInternal rest
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (y +++ " " +++ z)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^^ source.bh keyword.operator.infix.bh
#                    ^ source.bh
#                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                      ^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- # Pipe abort signal to sub_fsms
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>mkModFromStmtFT :: (IsModule m c) => Bool -> Bool -> (StmtFT a) -> m FSMAbort
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>mkModFromStmtFT _in_par _in_loop (SFAction _ _ _ a_abort _ _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh constant.other.bh
#                                          ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh keyword.operator.eq.bh
>      module
#^^^^^^ source.bh
#      ^^^^^^ source.bh keyword.control.module.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = a_abort
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkModFromStmtFT in_par in_loop (SFSeq _ (Cons st Nil)) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^ source.bh constant.other.bh
#                                     ^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh
#                                                       ^ source.bh keyword.operator.eq.bh
>      mkModFromStmtFT in_par in_loop st
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>mkModFromStmtFT in_par in_loop (SFSeq p (Cons st ss)) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^ source.bh constant.other.bh
#                                     ^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        _mod0 <- mkModFromStmtFT in_par in_loop st
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        _mod1 <- mkModFromStmtFT in_par in_loop (SFSeq p ss)
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^ source.bh constant.other.bh
#                                                      ^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = action {_mod0.abort; _mod1.abort}
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                            ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                  ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                       ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                         ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                               ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>
>mkModFromStmtFT in_par in_loop (SFIf1 _ _ s0) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^ source.bh constant.other.bh
#                                     ^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>      mkModFromStmtFT in_par in_loop s0
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>mkModFromStmtFT in_par in_loop (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^ source.bh constant.other.bh
#                                     ^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        _mod0 <- mkModFromStmtFT in_par in_loop s0
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        _mod1 <- mkModFromStmtFT in_par in_loop s1
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = action {_mod0.abort; _mod1.abort}
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                            ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                  ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                       ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                         ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                               ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>
>mkModFromStmtFT _in_par _in_loop (SFSkip _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^ source.bh constant.other.bh
#                                        ^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = noAction
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkModFromStmtFT _in_par _in_loop (SFLabel _ _ _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = noAction
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkModFromStmtFT _in_par _in_loop (SFReturn _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^ source.bh constant.other.bh
#                                          ^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = noAction
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkModFromStmtFT _in_par _in_loop (SFNamed _ _ Nil) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^^^^^ source.bh
#                                              ^^^ source.bh constant.other.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = noAction
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkModFromStmtFT in_par in_loop (SFNamed _ _ (Cons st Nil)) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^ source.bh constant.other.bh
#                                       ^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh constant.other.bh
#                                                 ^^^^ source.bh
#                                                     ^^^ source.bh constant.other.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh keyword.operator.eq.bh
>      mkModFromStmtFT in_par in_loop st
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>mkModFromStmtFT _in_par _in_loop (SFUntil _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        interface FSMAbort
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMAbort.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
>            abort = noAction
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkModFromStmtFT _in_par _in_loop (SFWhile _ _ st) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^ source.bh keyword.operator.eq.bh
>    mkModFromStmtFT False True st
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^^^^ source.bh constant.other.bh
#                         ^ source.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^ source.bh
>
>mkModFromStmtFT _ _ st =
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
>    do x <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>mkFSM :: (IsModule m c) => Stmt -> m FSM
#^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#     ^ source.bh meta.function.type-declaration.bh
#      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#          ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mkFSM (S st) = mkFSMWithPred (S st) True
#^^^^^^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^ source.bh constant.other.bh
#        ^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh constant.other.bh
#                               ^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh constant.other.bh
>
>mkAlwaysFSM :: (IsModule m c) => Stmt -> m Empty
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mkAlwaysFSM (S st) = mkAlwaysFSMWithPred (S st) True
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^ source.bh constant.other.bh
#              ^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh constant.other.bh
#                                           ^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^^^^ source.bh constant.other.bh
>
>
>mkFSMWithPred1 :: (IsModule m c) => Stmt -> Bool -> m FSM
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mkFSMWithPred1 (S st) pred =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh constant.other.bh
#                 ^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        _rfsm :: RFSM (Bit 0)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh meta.function.type-declaration.bh
>        _rfsm <- mkRFSM (S st) pred False (createDummyPut)
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^ source.bh
#                                    ^^^^^ source.bh constant.other.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
>
>        let cond = _rfsm.ready
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^^^^ source.bh
>        return $
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.infix.bh
>            interface FSM
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSM.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
>                start =  _rfsm.start
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                       ^^ source.bh meta.declaration.interface.algebraic.bh
#                         ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                               ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                done = cond
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                waitTillDone = noAction when cond
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.interface.algebraic.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh
#                               ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.interface.algebraic.bh
#                                        ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh
#                                             ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                abort = _rfsm.abort
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                              ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkFSMWithPred :: (IsModule m c) => Stmt -> Bool -> m FSM
#^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.interface.algebraic.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh
#                               ^ source.bh meta.declaration.interface.algebraic.bh
#                                ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh
#                                   ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                       ^ source.bh meta.declaration.interface.algebraic.bh
#                                        ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh
#                                           ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                               ^ source.bh meta.declaration.interface.algebraic.bh
#                                                ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh
#                                                     ^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>mkFSMWithPred (S st) pred =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh constant.other.bh
#                ^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        start_reg :: Reg(Bool)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
>        start_reg <- mkReg False
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^ source.bh
#                           ^^^^^ source.bh constant.other.bh
>
>        _rfsm :: RFSM (Bit 0)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh meta.function.type-declaration.bh
>        _rfsm <- mkRFSM (S st) pred False (createDummyPut)
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^ source.bh
#                                    ^^^^^ source.bh constant.other.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
>
>        let cond = _rfsm.ready && (not start_reg)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^^^^^^ source.bh
#                               ^^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
>--        let cond = _rfsm.ready
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>        rules {"fsm_start": when start_reg
#^^^^^^^^ source.bh
#        ^^^^^ source.bh keyword.other.rules.bh
#             ^ source.bh
#              ^ source.bh punctuation.brace.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                          ^ source.bh keyword.operator.colon.bh
#                           ^ source.bh
#                            ^^^^ source.bh keyword.other.when.bh
#                                ^^^^^^^^^^^ source.bh
>                          ==> action { _rfsm.start;
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^ source.bh
#                              ^^^^^^ source.bh keyword.other.action.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.brace.bh
#                                      ^^^^^^ source.bh
#                                            ^ source.bh keyword.operator.infix.bh
#                                             ^^^^^ source.bh
#                                                  ^ source.bh punctuation.semicolon.bh
>                                       start_reg := False }}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh constant.other.operator.infix.bh
#                                                   ^ source.bh
#                                                    ^^^^^ source.bh constant.other.bh
#                                                         ^ source.bh
#                                                          ^ source.bh punctuation.brace.bh
#                                                           ^ source.bh punctuation.brace.bh
>        return $
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.infix.bh
>            interface FSM
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSM.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
>                start = action { start_reg := True } when cond
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh
#                               ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                                ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                 ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                           ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                              ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh
#                                                     ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.declaration.interface.algebraic.bh
#                                                          ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>--                start =  _rfsm.start
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>                done = cond
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                waitTillDone = noAction when cond
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                            ^ source.bh meta.declaration.interface.algebraic.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh
#                               ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.declaration.interface.algebraic.bh
#                                        ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh
#                                             ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                abort = _rfsm.abort
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                              ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>
>mkAlwaysFSMWithPred :: (IsModule m c) => Stmt -> Bool -> m Empty
#^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                        ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                ^ source.bh meta.declaration.interface.algebraic.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh
#                                   ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.declaration.interface.algebraic.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh
#                                      ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.big-arrow.bh
#                                        ^ source.bh meta.declaration.interface.algebraic.bh
#                                         ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh
#                                              ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.declaration.interface.algebraic.bh
#                                                 ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                                     ^ source.bh meta.declaration.interface.algebraic.bh
#                                                      ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.declaration.interface.algebraic.bh
#                                                         ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.declaration.interface.algebraic.bh
#                                                           ^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>mkAlwaysFSMWithPred (S st) pred =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh constant.other.bh
#                      ^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>
>        _rfsm :: RFSM (Bit 0)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh constant.numeric.integral.decimal.bh
#                            ^ source.bh meta.function.type-declaration.bh
>        _rfsm <- mkRFSM (S st) pred True (createDummyPut)
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh constant.other.bh
#                          ^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^ source.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
>
>mkAutoFSM :: (IsModule m c) => Stmt -> m Empty
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mkAutoFSM stmts =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        _test_fsm <- mkFSM stmts
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^ source.bh
>        running <- mkReg False
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^^ source.bh
#                         ^^^^^ source.bh constant.other.bh
>        rules {"auto_start" : when (not running)
#^^^^^^^^ source.bh
#        ^^^^^ source.bh keyword.other.rules.bh
#             ^ source.bh
#              ^ source.bh punctuation.brace.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^^ source.bh string.quoted.double.bh
#                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.colon.bh
#                             ^ source.bh
#                              ^^^^ source.bh keyword.other.when.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
>                              ==> action { _test_fsm.start; running := True }}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^^^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^^^^^^ source.bh keyword.other.action.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.brace.bh
#                                          ^^^^^^^^^^ source.bh
#                                                    ^ source.bh keyword.operator.infix.bh
#                                                     ^^^^^ source.bh
#                                                          ^ source.bh punctuation.semicolon.bh
#                                                           ^^^^^^^^^ source.bh
#                                                                    ^^ source.bh constant.other.operator.infix.bh
#                                                                      ^ source.bh
#                                                                       ^^^^ source.bh constant.other.bh
#                                                                           ^ source.bh
#                                                                            ^ source.bh punctuation.brace.bh
#                                                                             ^ source.bh punctuation.brace.bh
>        rules {"auto_finish" : when (running && _test_fsm.done)
#^^^^^^^^ source.bh
#        ^^^^^ source.bh keyword.other.rules.bh
#             ^ source.bh
#              ^ source.bh punctuation.brace.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.colon.bh
#                              ^ source.bh
#                               ^^^^ source.bh keyword.other.when.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^^^^^ source.bh
#                                                         ^ source.bh keyword.operator.infix.bh
#                                                          ^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
>                               ==> $finish 0}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.prefix.dollar.bh
#                                    ^^^^^^^ source.bh
#                                           ^ source.bh constant.numeric.integral.decimal.bh
#                                            ^ source.bh punctuation.brace.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>mkFSMServer :: (IsModule m c, Bits a sa, Bits b sb, Eq a) => (a -> (RStmt b)) -> m (FSMServer a b)
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                    ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                 ^ source.bh meta.function.type-declaration.bh
>mkFSMServer stmt_func =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>
>        enabled :: Reg Bool
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>        enabled <- mkReg(True)
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^ source.bh punctuation.paren.bh
>
>        fifo_in :: FIFO a
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>        fifo_in <- mkTurboFIFO
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^^^^^^^^ source.bh
>
>        fifo_out :: FIFO b
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>        fifo_out <- mkTurboFIFO
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^^^^^^ source.bh
>
>        let ifc_put = interface Put
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^ source.bh
#                                ^^^ source.bh constant.other.bh
>                           put x = action { fifo_out.enq(x); enabled := False }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^^^^^^ source.bh keyword.other.action.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.brace.bh
#                                           ^^^^^^^^^ source.bh
#                                                    ^ source.bh keyword.operator.infix.bh
#                                                     ^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh punctuation.semicolon.bh
#                                                            ^^^^^^^^^ source.bh
#                                                                     ^^ source.bh constant.other.operator.infix.bh
#                                                                       ^ source.bh
#                                                                        ^^^^^ source.bh constant.other.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh punctuation.brace.bh
>
>        _rfsm :: RFSM b
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>        _rfsm <- mkRFSM (stmt_func fifo_in.first) (fifo_in.first == fifo_in.first) False ifc_put
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh keyword.operator.infix.bh
#                                           ^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^ source.bh
#                                                          ^ source.bh keyword.operator.infix.bh
#                                                           ^^^^^^ source.bh
#                                                                 ^^ source.bh keyword.operator.infix.bh
#                                                                   ^^^^^^^^ source.bh
#                                                                           ^ source.bh keyword.operator.infix.bh
#                                                                            ^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh
#                                                                                   ^^^^^ source.bh constant.other.bh
#                                                                                        ^^^^^^^^^ source.bh
>
>        rules {"fsm_start": when enabled
#^^^^^^^^ source.bh
#        ^^^^^ source.bh keyword.other.rules.bh
#             ^ source.bh
#              ^ source.bh punctuation.brace.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                          ^ source.bh keyword.operator.colon.bh
#                           ^ source.bh
#                            ^^^^ source.bh keyword.other.when.bh
#                                ^^^^^^^^^ source.bh
>               ==> action { _rfsm.start }}
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^^^^^^ source.bh keyword.other.action.bh
#                         ^ source.bh
#                          ^ source.bh punctuation.brace.bh
#                           ^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.bh
#                                  ^^^^^^ source.bh
#                                        ^ source.bh punctuation.brace.bh
#                                         ^ source.bh punctuation.brace.bh
>
>        let ifc_server = interface Server
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^^^^^^ source.bh constant.other.bh
>                             request  = toPut fifo_in
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^^^^^^^^^^^^^^^ source.bh
>                             response =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
>                                 interface Get
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                                 ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh
#                                           ^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.Get.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh
>                                     get = do
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                                     ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.interface.algebraic.bh
#                                         ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh
#                                           ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                                            fifo_in.deq
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                                    ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                                            fifo_out.deq
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                                     ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                                            enabled := True
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh
#                                                    ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                                                      ^ source.bh meta.declaration.interface.algebraic.bh
#                                                       ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>                                            return fifo_out.first
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                                            ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh
#                                                   ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                           ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                                            ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        return $
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.infix.bh
>            interface FSMServer
#^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.FSMServer.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh
>                server   = ifc_server
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                      ^^^ source.bh meta.declaration.interface.algebraic.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>                abort    = action {fifo_in.clear;
#^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                     ^^^^ source.bh meta.declaration.interface.algebraic.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                                   ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                           ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
>                                   fifo_out.clear;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                   ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                            ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                 ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
>                                   enabled := True;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                   ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                           ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                              ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.bh
#                                                  ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
>                                   _rfsm.abort }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                   ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                         ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                               ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>
>
>-- #############################################################################
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>
>mkRFSM :: (IsModule m c, Bits a sa) => (RStmt a) -> Bool -> Bool -> (Put a) -> m (RFSM a)
#^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                        ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                     ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh
#                                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                        ^ source.bh meta.function.type-declaration.bh
>mkRFSM st pred always ifc =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>       (r, ifc') <- mkRFSMNR pred False always ifc st
#^^^^^^^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^ source.bh
#         ^ source.bh punctuation.separator.comma.bh
#          ^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^^^^^^^^ source.bh
#                                  ^^^^^ source.bh constant.other.bh
#                                       ^^^^^^^^^^^^^^^ source.bh
>       addRules r
#^^^^^^^^^^^^^^^^^^ source.bh
>       return ifc'
#^^^^^^^^^^^^^^^^^^^ source.bh
>
>mkRFSMNR  :: (IsModule m c, Bits a sa) => Bool -> Bool -> Bool -> (Put a) -> RStmt a -> m (Rules, (RFSM a))
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                                                          ^ source.bh meta.function.type-declaration.bh
>mkRFSMNR pred in_par always ifc ss =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        (rs, ifc') <- mkRFSMNRS pred in_par always ifc ss
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^ source.bh
#           ^ source.bh punctuation.separator.comma.bh
#            ^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.left.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        return ((rJoin rs.me_local (rJoin rs.me_parents rs.no_me)), ifc')
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.infix.bh
#                          ^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^ source.bh
#                                            ^ source.bh keyword.operator.infix.bh
#                                             ^^^^^^^^^^^^^ source.bh
#                                                          ^ source.bh keyword.operator.infix.bh
#                                                           ^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.separator.comma.bh
#                                                                   ^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
>
>mkRFSMNRS  :: (IsModule m c, Bits a sa) => Bool -> Bool -> Bool -> (Put a) -> RStmt a -> m (RuleSet, (RFSM a))
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                                                             ^ source.bh meta.function.type-declaration.bh
>mkRFSMNRS pred in_par always ifc (S st) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh constant.other.bh
#                                   ^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>        (_, ss) <- liftModule st
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^^^^^^^^^^ source.bh
>
>        mkRFSMNR0 pred in_par always ifc ss
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>mkRFSMNR0  :: (IsModule m c, Bits a sa) => Bool -> Bool -> Bool -> (Put a) -> RStmts a -> m (RuleSet, (RFSM a))
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                    ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                    ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                                                              ^ source.bh meta.function.type-declaration.bh
>-- mkRFSMNR0 pred in_par always ifc (Cons (SSeq ps Nil))
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>
>
>mkRFSMNR0 _pred _in_par _always _ifc (Cons (SSeq _ Nil) Nil) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^ source.bh
#                                                   ^^^ source.bh constant.other.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^^^ source.bh constant.other.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>       start_wire :: Wire(Bool)
#^^^^^^^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
>       start_wire <- mkDWire False
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^ source.bh
#                             ^^^^^ source.bh constant.other.bh
>       let ifc = interface RFSM
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^ source.bh
#                           ^^^^ source.bh constant.other.bh
>                    start = action { start_wire := True }
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^^^ source.bh keyword.other.action.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.brace.bh
#                                    ^^^^^^^^^^^^ source.bh
#                                                ^^ source.bh constant.other.operator.infix.bh
#                                                  ^ source.bh
#                                                   ^^^^ source.bh constant.other.bh
#                                                       ^ source.bh
#                                                        ^ source.bh punctuation.brace.bh
>                    abort = dummyAction
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^^^^^^ source.bh
>                    ready = True
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^ source.bh constant.other.bh
>       return (emptyRuleSet, ifc)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>
>mkRFSMNR0 pred in_par always ifc (Cons (SSeq _ (Cons x Nil)) Nil) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^^^ source.bh
#                                                       ^^^ source.bh constant.other.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^^^ source.bh constant.other.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh keyword.operator.eq.bh
>    mkRFSMNR0 pred in_par always ifc (Cons x Nil)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^ source.bh constant.other.bh
#                                          ^^^ source.bh
#                                             ^^^ source.bh constant.other.bh
#                                                ^ source.bh punctuation.paren.bh
>
>
>mkRFSMNR0 pred _in_par _always _ifc (Cons (SAction p a Nothing) Nil) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^ source.bh constant.other.bh
#                                                  ^^^^^ source.bh
#                                                       ^^^^^^^ source.bh constant.other.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^^^ source.bh constant.other.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
>     module
#^^^^^ source.bh
#     ^^^^^^ source.bh keyword.control.module.bh
>
>       let l = getPIString p
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^^^^^^^^ source.bh
>       start_wire :: Wire(Bool)
#^^^^^^^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
>       start_wire <- mkDWire False
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^ source.bh
#                             ^^^^^ source.bh constant.other.bh
>
>       start_reg :: Wire(Bool)
#^^^^^^^ source.bh meta.function.type-declaration.bh
#       ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
>       start_reg <- mkDReg False
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^ source.bh
#                           ^^^^^ source.bh constant.other.bh
>
>       abort :: Wire(Bool)
#^^^^^^^ source.bh meta.function.type-declaration.bh
#       ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
>       abort <- mkDWire False
#^^^^^^^^^^^^^ source.bh
#             ^^ source.bh keyword.operator.arrow.left.bh
#               ^^^^^^^^^ source.bh
#                        ^^^^^ source.bh constant.other.bh
>
>       fired :: Wire(Bool)
#^^^^^^^ source.bh meta.function.type-declaration.bh
#       ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
>       fired <- mkDReg False
#^^^^^^^^^^^^^ source.bh
#             ^^ source.bh keyword.operator.arrow.left.bh
#               ^^^^^^^^ source.bh
#                       ^^^^^ source.bh constant.other.bh
>
>       let r = rules {{-# aggressive_implicit_conditions #-} (ruleName "action" 1 l): when (start_wire && pred)
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^^^^ source.bh keyword.other.rules.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.brace.bh
#                      ^^^ source.bh meta.preprocessor.bh
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                         ^^^ source.bh meta.preprocessor.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^ source.bh
#                                                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                        ^^^^^^ source.bh string.quoted.double.bh
#                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                               ^ source.bh
#                                                                                ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                 ^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                    ^ source.bh keyword.operator.colon.bh
#                                                                                     ^ source.bh
#                                                                                      ^^^^ source.bh keyword.other.when.bh
#                                                                                          ^ source.bh
#                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                            ^^^^^^^^^^^ source.bh
#                                                                                                       ^^ source.bh keyword.operator.infix.bh
#                                                                                                         ^^^^^ source.bh
#                                                                                                              ^ source.bh punctuation.paren.bh
>                   ==> action {fired := True; a}}
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^^ source.bh keyword.operator.infix.bh
#                      ^ source.bh
#                       ^^^^^^ source.bh keyword.other.action.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.brace.bh
#                               ^^^^^^ source.bh
#                                     ^^ source.bh constant.other.operator.infix.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^ source.bh punctuation.semicolon.bh
#                                             ^^ source.bh
#                                               ^ source.bh punctuation.brace.bh
#                                                ^ source.bh punctuation.brace.bh
>
>       let do_start = action { start_wire := True; start_reg := True}
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^ source.bh
#                      ^^^^^^ source.bh keyword.other.action.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.brace.bh
#                              ^^^^^^^^^^^^ source.bh
#                                          ^^ source.bh constant.other.operator.infix.bh
#                                            ^ source.bh
#                                             ^^^^ source.bh constant.other.bh
#                                                 ^ source.bh punctuation.semicolon.bh
#                                                  ^^^^^^^^^^^ source.bh
#                                                             ^^ source.bh constant.other.operator.infix.bh
#                                                               ^ source.bh
#                                                                ^^^^ source.bh constant.other.bh
#                                                                    ^ source.bh punctuation.brace.bh
>       let stalled = start_reg && (not fired);
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^ source.bh
#                               ^^ source.bh keyword.operator.infix.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^ source.bh
>       let cond_ready = (not stalled)
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
>
>       rules { "restart": when (stalled && (not abort))
#^^^^^^^ source.bh
#       ^^^^^ source.bh keyword.other.rules.bh
#            ^ source.bh
#             ^ source.bh punctuation.brace.bh
#              ^ source.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh keyword.operator.colon.bh
#                         ^ source.bh
#                          ^^^^ source.bh keyword.other.when.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^ source.bh
#                                        ^^ source.bh keyword.operator.infix.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^ source.bh punctuation.paren.bh
>                 ==> do_start }
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^^ source.bh keyword.operator.infix.bh
#                    ^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.brace.bh
>
>       let ifc = interface RFSM
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^ source.bh
#                           ^^^^ source.bh constant.other.bh
>                    start = do_start when cond_ready
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^^^ source.bh
#                                     ^^^^ source.bh keyword.other.when.bh
#                                         ^^^^^^^^^^^^ source.bh
>                    abort = action { abort := True }
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^^^ source.bh keyword.other.action.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.brace.bh
#                                    ^^^^^^^ source.bh
#                                           ^^ source.bh constant.other.operator.infix.bh
#                                             ^ source.bh
#                                              ^^^^ source.bh constant.other.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.brace.bh
>                    ready = cond_ready
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^^^^^ source.bh
>       let rs = RuleSet {me_local = eR;
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^ source.bh
#                        ^ source.bh meta.record.bh punctuation.brace.bh
#                         ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                 ^ source.bh meta.record.bh
#                                  ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                   ^^^^^ source.bh meta.record.bh
>                         me_parents = r;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                    ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                     ^^^^ source.bh meta.record.bh
>                         no_me = eR}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                               ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                ^^^ source.bh meta.record.bh
#                                   ^ source.bh meta.record.bh punctuation.brace.bh
>       return (rs, ifc)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^ source.bh punctuation.separator.comma.bh
#                  ^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>
>mkRFSMNR0 pred in_par always ifc ss =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    module
#^^^^ source.bh
#    ^^^^^^ source.bh keyword.control.module.bh
>
>        let ps = getStmtTPosInfo (head ss)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>
>        start_wire :: Wire(Bool)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
>        start_wire <- mkDWire False
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.arrow.left.bh
#                     ^^^^^^^^^ source.bh
#                              ^^^^^ source.bh constant.other.bh
>
>        start_reg :: Wire(Bool)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
>        start_reg <- mkDReg False
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^ source.bh
#                            ^^^^^ source.bh constant.other.bh
>
>        abort :: Wire(Bool)
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
>        abort <- mkDWire False
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^ source.bh
#                         ^^^^^ source.bh constant.other.bh
>
>
>
>
>
>        let init_state = idle_state;
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^ source.bh
>        let return_label = "__return__"
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                            ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>        let no_action = (SAction ps noAction Nothing)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^ source.bh constant.other.bh
#                                ^^^^^^^^^^^^^ source.bh
#                                             ^^^^^^^ source.bh constant.other.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>        (seq_labelled , ls) <- labelActions (SSeq ps (append (Cons (SLabel ps return_label False Nothing) (Cons (SUntil ps True) ss)) (Cons (SJump ps return_label) (Cons no_action Nil))))
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.separator.comma.bh
#                       ^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^^ source.bh keyword.operator.arrow.left.bh
#                              ^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh constant.other.bh
#                                                 ^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^ source.bh constant.other.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^ source.bh constant.other.bh
#                                                                          ^^^^^^^^^^^^^^^^^ source.bh
#                                                                                           ^^^^^ source.bh constant.other.bh
#                                                                                                ^ source.bh
#                                                                                                 ^^^^^^^ source.bh constant.other.bh
#                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                         ^ source.bh
#                                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                                           ^^^^ source.bh constant.other.bh
#                                                                                                               ^ source.bh
#                                                                                                                ^ source.bh punctuation.paren.bh
#                                                                                                                 ^^^^^^ source.bh constant.other.bh
#                                                                                                                       ^^^^ source.bh
#                                                                                                                           ^^^^ source.bh constant.other.bh
#                                                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                                                ^^^ source.bh
#                                                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                                     ^ source.bh
#                                                                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                                                                       ^^^^ source.bh constant.other.bh
#                                                                                                                                           ^ source.bh
#                                                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                                                             ^^^^^ source.bh constant.other.bh
#                                                                                                                                                  ^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                                                                                   ^ source.bh
#                                                                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                                                                     ^^^^ source.bh constant.other.bh
#                                                                                                                                                                         ^^^^^^^^^^^ source.bh
#                                                                                                                                                                                    ^^^ source.bh constant.other.bh
#                                                                                                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                                                                                                          ^ source.bh punctuation.paren.bh
>                                                    (initLabelState init_state return_label ifc)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
>
>        let start = if (always) then True else start_wire
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^^ source.bh keyword.control.if.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^^^^ source.bh keyword.control.then.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^ source.bh
#                                          ^^^^ source.bh keyword.control.else.bh
#                                              ^^^^^^^^^^^^ source.bh
>
>        state <- mkState (ls.state_num - 1) start abort
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^ source.bh
#                            ^ source.bh keyword.operator.infix.bh
#                             ^^^^^^^^^^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh constant.numeric.integral.decimal.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^ source.bh
>
>        let do_start = action { start_wire := True; start_reg := True }
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^^^^^^ source.bh keyword.other.action.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.brace.bh
#                               ^^^^^^^^^^^^ source.bh
#                                           ^^ source.bh constant.other.operator.infix.bh
#                                             ^ source.bh
#                                              ^^^^ source.bh constant.other.bh
#                                                  ^ source.bh punctuation.semicolon.bh
#                                                   ^^^^^^^^^^^ source.bh
#                                                              ^^ source.bh constant.other.operator.infix.bh
#                                                                ^ source.bh
#                                                                 ^^^^ source.bh constant.other.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh punctuation.brace.bh
>
>        _seq_final' <- attachNames seq_labelled
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.arrow.left.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        _seq_final  <- removePars pred _seq_final'
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.arrow.left.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>        let seq_0 = _seq_final
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^ source.bh
>
>        -- #############################################################################
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        -- #
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^ source.bh comment.line.double-dash.bh
>        -- #############################################################################
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>        (seq, tsds_runx) <- getRefinedTSDs False True  start seq_0
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^ source.bh
#            ^ source.bh punctuation.separator.comma.bh
#             ^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.left.bh
#                           ^^^^^^^^^^^^^^^^ source.bh
#                                           ^^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^^^^^^^^^^^^^^ source.bh
>        (_,   tsds_cndx) <- getRefinedTSDs False False True  seq_0
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^ source.bh keyword.operator.arrow.left.bh
#                           ^^^^^^^^^^^^^^^^ source.bh
#                                           ^^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^^^^^ source.bh constant.other.bh
#                                                      ^ source.bh
#                                                       ^^^^ source.bh constant.other.bh
#                                                           ^^^^^^^^ source.bh
>
>        let tsds_run  = combineTSDs (sortBy compareTSDs tsds_runx)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>        let tsds_cndy = combineTSDs (sortBy compareTSDs tsds_cndx)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>
>        y <- stmtFTToString seq
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
>--        messageM("G: " +++ y)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>        tsds_cnd <- addNoActionState tsds_cndy ls
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.arrow.left.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>        let per_action_tsds = groupBy matchingTSDs tsds_run
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>        pairs  <- mapM (createRulesForTSDs seq state pred) per_action_tsds
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^^^^^^^^^^^^ source.bh
>        let rr =  foldr1 combineRuleSets pairs
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>--        let rr = rJoinME pairs
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>        -- this means the first action in the fsm blocked
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        let stalled = start_reg && (not state.fired_last)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^ source.bh
#                                ^^ source.bh keyword.operator.infix.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^ source.bh
#                                             ^ source.bh keyword.operator.infix.bh
#                                              ^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
>
>        cond_ready0 <- createReadyCond tsds_cnd state
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.arrow.left.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        let cond_ready = cond_ready0 && (not stalled)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^^ source.bh keyword.operator.infix.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>        rules { "restart": when (stalled && (not abort))
#^^^^^^^^ source.bh
#        ^^^^^ source.bh keyword.other.rules.bh
#             ^ source.bh
#              ^ source.bh punctuation.brace.bh
#               ^ source.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh keyword.operator.colon.bh
#                          ^ source.bh
#                           ^^^^ source.bh keyword.other.when.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh punctuation.paren.bh
>                 ==> do_start }
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^^^ source.bh keyword.operator.infix.bh
#                    ^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.brace.bh
>
>        _mod  <- mkModFromStmtFT in_par False seq
#^^^^^^^^^^^^^^ source.bh
#              ^^ source.bh keyword.operator.arrow.left.bh
#                ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^^^^^ source.bh constant.other.bh
#                                             ^^^^^ source.bh
>
>        let ifc' = interface RFSM
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^^^^ source.bh
#                             ^^^^ source.bh constant.other.bh
>                    start = do_start when cond_ready
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^^^^^^^^^^ source.bh
#                                     ^^^^ source.bh keyword.other.when.bh
#                                         ^^^^^^^^^^^^ source.bh
>                    abort = action { abort := True }
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^^^^^^ source.bh keyword.other.action.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.brace.bh
#                                    ^^^^^^^ source.bh
#                                           ^^ source.bh constant.other.operator.infix.bh
#                                             ^ source.bh
#                                              ^^^^ source.bh constant.other.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.brace.bh
>                    ready  = cond_ready
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^ source.bh
>        return (rr, ifc')
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^ source.bh punctuation.separator.comma.bh
#                   ^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>createDummyPut :: Put a
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
>createDummyPut = interface Put
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^ source.bh
#                           ^^^ source.bh constant.other.bh
>                     put _ = noAction
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getRefinedTSDs :: (Monad m) => Bool -> Bool -> Bool -> (StmtFT a) -> m ((StmtFT a), TwoStateDescriptors)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                    ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                       ^ source.bh meta.function.type-declaration.bh
>getRefinedTSDs allow_open do_warn start seq =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
>     do let not_false  (TSD cond _ _ _) = not (isStaticAndFalse cond)
#^^^^^ source.bh
#     ^^ source.bh keyword.control.do.bh
#       ^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>        (seq', _) <- addNextStateDescriptors seq Nil
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^ source.bh
#             ^ source.bh punctuation.separator.comma.bh
#              ^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
>        l         <- collectLabelNSDs seq'
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        lseq      <- addLabelNSDs allow_open l seq'
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        ws        <- getWaitActions lseq
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^ source.bh
>        js        <- getJumpActions lseq
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^ source.bh
>        os        <- getUpdateOverlapActions lseq
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        es        <- getUpdateEarlyActions lseq
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        -- messageM("WS: " +++ toString (length ws) +++ " JS: " +++ toString js +++ " OS: " +++ toString (length os) +++ " ES: " +++ toString (length es))
#^^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#        ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>
>        zzz0      <- collectTSDs allTSDs start lseq
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        let zzz0_r = (filter not_false zzz0)
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
>        zzz0a     <- addAllOvlpUpdateBypassTSDs os zzz0_r
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        let zzz0a_r = combineTSDs (sortBy compareTSDs (filter not_false zzz0a))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^ source.bh punctuation.paren.bh
>        zzz1      <- addAllJumpBypassTSDs js zzz0a_r
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        let zzz1_r = combineTSDs (sortBy compareTSDs (filter not_false zzz1))
#^^^^^^^^ source.bh
#        ^^^ source.bh keyword.other.let.bh
#           ^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh punctuation.paren.bh
>        zzz3      <- addAllWaitBypassTSDs ws zzz1_r
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        (lseq', zzz4) <- addAllEarlyUpdateBypassTSDs es (lseq, zzz3) do_warn
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^ source.bh
#              ^ source.bh punctuation.separator.comma.bh
#               ^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.arrow.left.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^ source.bh
#                                                             ^ source.bh punctuation.separator.comma.bh
#                                                              ^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^^^^ source.bh
>
>        return (lseq', zzz4)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>createReadyCond :: (Monad m) => TwoStateDescriptors -> State -> m Bool
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>createReadyCond all_tsds state =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>          do let is_start (TSD _ _ _ Start) = True
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.control.do.bh
#            ^ source.bh
#             ^^^ source.bh keyword.other.let.bh
#                ^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^ source.bh constant.other.bh
#                              ^^^^^^^ source.bh
#                                     ^^^^^ source.bh constant.other.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^ source.bh
#                                              ^^^^ source.bh constant.other.bh
>                 is_start _                 = False
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^ source.bh
#                                              ^^^^^ source.bh constant.other.bh
>                 tsds = filter is_start all_tsds
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>             let getCond (TSD cond f _ _) = cond && state.is f
#^^^^^^^^^^^^^ source.bh
#             ^^^ source.bh keyword.other.let.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^ source.bh
#                                                         ^ source.bh keyword.operator.infix.bh
#                                                          ^^^^^ source.bh
>             let cond = (fold (||) (map getCond tsds))
#^^^^^^^^^^^^^ source.bh
#             ^^^ source.bh keyword.other.let.bh
#                ^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^ source.bh entity.name.function.infix.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>             return (cond);
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>createLabeledStmtFT :: (IsModule m c) => (StmtT a) -> (LabelState a) -> m ((StmtFT a), (LabelState a))
#^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                       ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                                                     ^ source.bh meta.function.type-declaration.bh
>createLabeledStmtFT = labelActions
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
#                     ^^^^^^^^^^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>removePars :: (IsModule m c, Bits a sa) => Bool -> (StmtFT a) -> m (StmtFT a)
#^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#               ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                    ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh
>removePars _pred st@(SFAction _ _ _ _ _ _ _) = return st
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.infix.tight.at.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^^^^^^^^^^^ source.bh
>
>removePars pred (SFIf1 p c s1) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>    do _r <- removePars pred s1
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFIf1 p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>
>removePars pred (SFIf2 p c s0 s1) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    do _r0 <- removePars pred s0
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>       _r1 <- removePars pred s1
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFIf2 p c _r0 _r1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>
>removePars pred (SFSeq p (Cons st Nil)) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>    do _r <- removePars pred st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFSeq p (Cons _r Nil))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^ source.bh
#                                ^^^ source.bh constant.other.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh punctuation.paren.bh
>
>removePars pred (SFSeq p (Cons st ss)) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
>    do _r  <- removePars pred st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>       _rr <- removePars pred (SFSeq p ss)
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^ source.bh constant.other.bh
#                                    ^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>       return (SFSeq p (Cons _r (getStmtFTList _rr)))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh punctuation.paren.bh
>
>removePars pred (SFPar p (SFAction _ num _ _ a _ _) ss) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^^^^ source.bh constant.other.bh
#                                  ^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh keyword.operator.eq.bh
>    do par_running :: Wire(Bool)
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.double-colon.bh
#                     ^ source.bh
#                      ^^^^ source.bh storage.type.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh storage.type.bh
#                               ^ source.bh
>       par_running <- mkDWire False
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^ source.bh keyword.operator.arrow.left.bh
#                     ^^^^^^^^^ source.bh
#                              ^^^^^ source.bh constant.other.bh
>       let zzz = pred && par_running
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^^^ source.bh
>       par_blocks <- mapM (mkRFSMNRS zzz True False (createDummyPut)) (map _s__ ss)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^^ source.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^ source.bh
#                                              ^^^^^ source.bh constant.other.bh
#                                                   ^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^^^^^^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^^^^^^^^^^^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
>       -- reverse par_blocks for consistency with prev versions
#^^^^^^^ source.bh punctuation.whitespace.comment.leading.bh
#       ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       let (r_list, fsm_list) = unzip (reverse par_blocks)
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^ source.bh
#                  ^ source.bh punctuation.separator.comma.bh
#                   ^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
>--           rs = fold rJoin r_list
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>           rs = (foldr1 mergeRuleSets r_list)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
>           modAbort :: RFSM a -> Action
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>           modAbort ifc = ifc.abort
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^ source.bh
>           modStart :: RFSM a -> Action
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>           modStart ifc = ifc.start
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^ source.bh
>           modReady :: RFSM a -> Bool
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>           modReady ifc = ifc.ready
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^ source.bh
#                             ^ source.bh keyword.operator.infix.bh
#                              ^^^^^^ source.bh
>           a_abort = (joinActions (map modAbort fsm_list))
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>           label   = ("__par_start__" +++ (integerToString num))
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                       ^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                    ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                     ^ source.bh
#                                      ^^^ source.bh keyword.operator.infix.bh
#                                         ^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh punctuation.paren.bh
>           seq = (SFSeq p (Cons
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^ source.bh constant.other.bh
#                       ^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^ source.bh constant.other.bh
>                           (SFAction ("par_start" +++ p) num Nil a_abort action {joinActions (map modStart fsm_list);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^ source.bh constant.other.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                       ^^^^^^^^^ source.bh string.quoted.double.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh
#                                                  ^^^ source.bh keyword.operator.infix.bh
#                                                     ^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^ source.bh
#                                                             ^^^ source.bh constant.other.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^^^^^^ source.bh keyword.other.action.bh
#                                                                               ^ source.bh
#                                                                                ^ source.bh punctuation.brace.bh
#                                                                                 ^^^^^^^^^^^^ source.bh
#                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                              ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                                    ^ source.bh punctuation.semicolon.bh
>                                                                      a;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                       ^ source.bh punctuation.semicolon.bh
>                                                                      par_running := True;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                  ^^ source.bh constant.other.operator.infix.bh
#                                                                                    ^ source.bh
#                                                                                     ^^^^ source.bh constant.other.bh
#                                                                                         ^ source.bh punctuation.semicolon.bh
>                                                                      -- $display "(%0d) starting pars" $time;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.documentation.bh
#                                                                      ^^^^ source.bh comment.block.documentation.bh punctuation.whitespace.comment.leading.bh
#                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.block.documentation.bh
>                                                                       } nAT (Just rs))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                       ^ source.bh punctuation.brace.bh
#                                                                        ^^^^^ source.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^^^^ source.bh constant.other.bh
#                                                                                  ^^^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh punctuation.paren.bh
>                              (Cons (SFLabel p label Nil Nothing)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^ source.bh constant.other.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^ source.bh constant.other.bh
#                                            ^^^^^^^^^ source.bh
#                                                     ^^^ source.bh constant.other.bh
#                                                        ^ source.bh
#                                                         ^^^^^^^ source.bh constant.other.bh
#                                                                ^ source.bh punctuation.paren.bh
>                                (Cons (SFIf1 p (not (and (map modReady fsm_list)))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^ source.bh constant.other.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^ source.bh constant.other.bh
#                                            ^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>                                               (SFSeq p
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^ source.bh constant.other.bh
#                                                     ^^^ source.bh
>                                                (Cons  (SFAction ("par_run" +++ p) (num+1) Nil noAction action { par_running := True;} (Just NoME)         nR)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^ source.bh constant.other.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                   ^^^^^^^ source.bh string.quoted.double.bh
#                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                           ^ source.bh
#                                                                            ^^^ source.bh keyword.operator.infix.bh
#                                                                               ^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                    ^^^ source.bh
#                                                                                       ^ source.bh keyword.operator.infix.bh
#                                                                                        ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                          ^ source.bh
#                                                                                           ^^^ source.bh constant.other.bh
#                                                                                              ^^^^^^^^^^ source.bh
#                                                                                                        ^^^^^^ source.bh keyword.other.action.bh
#                                                                                                              ^ source.bh
#                                                                                                               ^ source.bh punctuation.brace.bh
#                                                                                                                ^^^^^^^^^^^^^ source.bh
#                                                                                                                             ^^ source.bh constant.other.operator.infix.bh
#                                                                                                                               ^ source.bh
#                                                                                                                                ^^^^ source.bh constant.other.bh
#                                                                                                                                    ^ source.bh punctuation.semicolon.bh
#                                                                                                                                     ^ source.bh punctuation.brace.bh
#                                                                                                                                      ^ source.bh
#                                                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                                                        ^^^^ source.bh constant.other.bh
#                                                                                                                                            ^ source.bh
#                                                                                                                                             ^^^^ source.bh constant.other.bh
#                                                                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                                                                  ^^^^^^^^^^^ source.bh
#                                                                                                                                                             ^ source.bh punctuation.paren.bh
>                                                 (Cons (SFAction p             (num+2) Nil noAction noAction                   (Just (Jump label)) nR) Nil)))) Nil))))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^ source.bh constant.other.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^ source.bh constant.other.bh
#                                                                ^^^^^^^^^^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
#                                                                                ^^^ source.bh
#                                                                                   ^ source.bh keyword.operator.infix.bh
#                                                                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh
#                                                                                       ^^^ source.bh constant.other.bh
#                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                                                ^^^^ source.bh constant.other.bh
#                                                                                                                                    ^ source.bh
#                                                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                                                      ^^^^ source.bh constant.other.bh
#                                                                                                                                          ^^^^^^ source.bh
#                                                                                                                                                ^ source.bh punctuation.paren.bh
#                                                                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                                                                  ^^^ source.bh
#                                                                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                                                                      ^ source.bh
#                                                                                                                                                       ^^^ source.bh constant.other.bh
#                                                                                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                                                                                              ^ source.bh
#                                                                                                                                                               ^^^ source.bh constant.other.bh
#                                                                                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                                                                                                     ^ source.bh punctuation.paren.bh
>       return seq
#^^^^^^^^^^^^^^^^^^ source.bh
>
>removePars _pred st@(SFSkip _)     = return st
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.infix.tight.at.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^ source.bh constant.other.bh
#                           ^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^^^^^^^^^^^ source.bh
>removePars _pred st@(SFReturn _)   = return st
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.infix.tight.at.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh constant.other.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^^^^^^^^^^^ source.bh
>removePars _pred st@(SFLabel _ _ _ Nothing) = return st
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.infix.tight.at.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^ source.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
#                                             ^^^^^^^^^^^ source.bh
>removePars pred (SFNamed p name ss) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>    do rr <- mapM (removePars pred) ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh
>       return (SFNamed p name rr)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>removePars _ st@(SFUntil _ _)  = return st
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.infix.tight.at.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^^^^^^^^^ source.bh
>
>removePars pred (SFWhile p c st) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    do _r <- removePars pred st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFWhile p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>
>removePars _pred st =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>    do x <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>attachNames :: (IsModule m c) => (StmtFT a) -> m (StmtFT a)
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
>attachNames st@(SFAction _ _ _ _ _ _ _) = return st
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
#                                         ^^^^^^^^^^^ source.bh
>
>attachNames (SFIf1 p c st) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>    do _r <- attachNames st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>       return (SFIf1 p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>
>attachNames (SFIf2 p c s0 s1) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>    do _r0 <- attachNames s0
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^ source.bh
>       _r1 <- attachNames s1
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^ source.bh
>       return (SFIf2 p c _r0 _r1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>
>attachNames (SFSeq p ss) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
>    do _rr <- mapM attachNames ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^^^ source.bh
>       let _ss = listAttachNames _rr
#^^^^^^^ source.bh
#       ^^^ source.bh keyword.other.let.bh
#          ^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFSeq p _ss)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>
>attachNames st@(SFPar _ _ _) =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh constant.other.bh
#                     ^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    return st
#^^^^^^^^^^^^^^ source.bh
>
>attachNames st@(SFSkip _)     = return st
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^ source.bh constant.other.bh
#                      ^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^^^^ source.bh
>attachNames st@(SFReturn _)   = return st
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^^^^ source.bh
>attachNames st@(SFLabel _ _ _ Nothing) = return st
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^^^^ source.bh
#                              ^^^^^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^^^^^^^^^^^ source.bh
>attachNames (SFNamed p name ss) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>  do rr <- mapM attachNames ss
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh
>     return (SFNamed p name rr)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>attachNames st@(SFUntil _ _) = return st
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.infix.tight.at.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^ source.bh constant.other.bh
#                       ^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^^^^ source.bh
>
>attachNames (SFWhile p c st) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    do _r <- attachNames st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>       return (SFWhile p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>
>attachNames st =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
>    do x <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>listAttachNames :: (List (StmtFT a)) -> (List (StmtFT a))
#^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                    ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
>listAttachNames Nil          = Nil
#^^^^^^^^^^^^^^^^ source.bh
#                ^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^ source.bh
#                               ^^^ source.bh constant.other.bh
>listAttachNames st@(Cons _ Nil) = st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^^ source.bh
#                           ^^^ source.bh constant.other.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^ source.bh
>listAttachNames (Cons (SFNamed p name Nil) (Cons st@(SFSeq _ _) rest)) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^ source.bh constant.other.bh
#                              ^^^^^^^^ source.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^ source.bh
#                                                   ^ source.bh keyword.operator.infix.tight.at.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^ source.bh constant.other.bh
#                                                          ^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh keyword.operator.eq.bh
>   (Cons (SFNamed p name (Cons st Nil)) (listAttachNames rest))
#^^^ source.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^ source.bh constant.other.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^ source.bh constant.other.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^ source.bh punctuation.paren.bh
>listAttachNames (Cons (SFNamed p name Nil) (Cons st@(SFPar _ _ _) rest)) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^ source.bh constant.other.bh
#                              ^^^^^^^^ source.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^ source.bh
#                                                   ^ source.bh keyword.operator.infix.tight.at.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^ source.bh constant.other.bh
#                                                          ^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^^^^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
>   (Cons (SFNamed p name (Cons st Nil)) (listAttachNames rest))
#^^^ source.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^ source.bh constant.other.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^ source.bh constant.other.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^^^^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^ source.bh punctuation.paren.bh
>listAttachNames (Cons st rest) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh constant.other.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   (Cons st (listAttachNames rest))
#^^^ source.bh
#   ^ source.bh punctuation.paren.bh
#    ^^^^ source.bh constant.other.bh
#        ^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>addActionAt :: (Monad m) => Action -> Integer -> (StmtFT a) -> m (StmtFT a)
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
>addActionAt a n st@(SFAction p na nsd a_abort a_body at rs) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh
#                                                            ^ source.bh keyword.operator.eq.bh
>         do let a_combined = joinActions (Cons a_body (Cons a Nil))
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.control.do.bh
#           ^ source.bh
#            ^^^ source.bh keyword.other.let.bh
#               ^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^ source.bh constant.other.bh
#                                                           ^^^ source.bh
#                                                              ^^^ source.bh constant.other.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
>            if (n == na) then return (SFAction p n nsd a_abort a_combined at rs)
#^^^^^^^^^^^^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^^^^ source.bh constant.other.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                               ^ source.bh punctuation.paren.bh
>                         else return st
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.else.bh
#                             ^^^^^^^^^^^ source.bh
>
>addActionAt a n (SFIf1 p c s1) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>    do _r <- addActionAt a n s1
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFIf1 p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>
>addActionAt a n (SFIf2 p c s0 s1) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    do _r0 <- addActionAt a n s0
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>       _r1 <- addActionAt a n s1
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFIf2 p c _r0 _r1)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>
>addActionAt a n (SFSeq p ss) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    do _ss <- mapM (addActionAt a n) ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
>       return (SFSeq p _ss)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^ source.bh constant.other.bh
#                    ^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>
>addActionAt _ _ st@(SFSkip _)     = return st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^ source.bh constant.other.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^^^^^ source.bh
>addActionAt _ _ st@(SFReturn _)   = return st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh constant.other.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^^^^^ source.bh
>addActionAt _ _ st@(SFLabel _ _ _ Nothing) = return st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^ source.bh constant.other.bh
#                           ^^^^^^^ source.bh
#                                  ^^^^^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^^^^^^^^^^^ source.bh
>addActionAt _ _ st@(SFUntil _ _) = return st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^ source.bh constant.other.bh
#                           ^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^^^^^^^^^^^ source.bh
>addActionAt a n (SFNamed p name ss) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>  do _ss <- mapM (addActionAt a n) ss
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh
>     return (SFNamed p name _ss)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>
>addActionAt a n (SFWhile p c st) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    do _r <- addActionAt a n st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFWhile p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>
>addActionAt _ _ st =
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
>    do x <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>getAction :: (Monad m) => Integer -> (StmtFT a) -> m Action
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getAction n (SFAction _ na _nsd _a_abort a_body _at _rs) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh keyword.operator.eq.bh
>         do if (n == na) then return a_body else return noAction
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.control.do.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^^^^^^^^^^^ source.bh
#                                            ^^^^ source.bh keyword.control.else.bh
#                                                ^^^^^^^^^^^^^^^^^ source.bh
>
>getAction n (SFIf1 _ _ s1) = getAction n s1
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^ source.bh
>
>getAction n (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>    do a0 <- getAction n s0
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>       a1 <- getAction n s1
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>       return (joinActions (Cons a0 (Cons a1 Nil)))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh constant.other.bh
#                                         ^^^^ source.bh
#                                             ^^^ source.bh constant.other.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
>
>getAction n (SFSeq _ ss) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
>    do as <- mapM (getAction n) ss
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^ source.bh
>       return (joinActions as)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>
>getAction _ (SFSkip _)     = return noAction
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^ source.bh constant.other.bh
#                   ^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^ source.bh
>getAction _ (SFReturn _)   = return noAction
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^^ source.bh
>getAction _ (SFLabel _ _ _ Nothing) = return noAction
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^^^^^^^ source.bh constant.other.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^^^^^^^^^^^^^^^^^ source.bh
>getAction n (SFNamed _ _ ss) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>  do as <- mapM (getAction n) ss
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh
>     return (joinActions as)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
>
>getAction n (SFWhile _ _ st) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh constant.other.bh
#                    ^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>    do a <- getAction n st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^ source.bh
>       return a
#^^^^^^^^^^^^^^^^ source.bh
>
>getAction _ st =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
>    do x <- stmtFTToString st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^ source.bh
>       messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                  ^^^^^^ source.bh string.quoted.double.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                         ^ source.bh
#                          ^^^ source.bh keyword.operator.infix.bh
#                             ^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       error "unhandled case"
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>collectLabelNSDs :: (Monad m) => (StmtFT a) -> m (List (String, NextStateDescriptors))
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh
>collectLabelNSDs (SFAction _ _ _ _ _ _ _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh constant.other.bh
#                          ^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectLabelNSDs (SFIf1 _ _ s1) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^ source.bh constant.other.bh
#                       ^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>   collectLabelNSDs s1
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>collectLabelNSDs (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^ source.bh constant.other.bh
#                       ^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>   do c0 <- (collectLabelNSDs s0)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>      c1 <- (collectLabelNSDs s1)
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>      return (append c0 c1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>-- TTTT
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^ source.bh comment.line.double-dash.bh
>collectLabelNSDs (SFPar _ _ _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^ source.bh constant.other.bh
#                       ^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectLabelNSDs (SFSeq _ ss) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^ source.bh constant.other.bh
#                       ^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>   do x <- mapM collectLabelNSDs ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>collectLabelNSDs (SFSkip _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectLabelNSDs (SFReturn _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh constant.other.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectLabelNSDs (SFLabel _ name nsd Nothing) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^^^^^^^^^ source.bh
#                                     ^^^^^^^ source.bh constant.other.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>   return (Cons (name, nsd) Nil)
#^^^^^^^^^^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^^ source.bh constant.other.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh
#                     ^ source.bh punctuation.separator.comma.bh
#                      ^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh punctuation.paren.bh
>collectLabelNSDs (SFNamed _ _ ss) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>   do x <- mapM collectLabelNSDs ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>collectLabelNSDs (SFUntil _ _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>
>collectLabelNSDs (SFWhile _ _ st) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>    do x <- collectLabelNSDs st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return x
#^^^^^^^^^^^^^^^^ source.bh
>
>collectLabelNSDs st =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>   do x <- stmtFTToString st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh
>      messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>      error "unhandled case"
#^^^^^^^^^^^^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>addLabelNSDs :: (Monad m) => Bool -> (List (String, NextStateDescriptors)) -> (StmtFT a) -> m (StmtFT a)
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                       ^ source.bh meta.function.type-declaration.bh
>addLabelNSDs allow_open lbls (SFAction p n _ a_abort a (Just (Jump label)) rs) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^^ source.bh constant.other.bh
#                                      ^^^^^^^^^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^ source.bh constant.other.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^ source.bh constant.other.bh
#                                                                  ^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^ source.bh punctuation.paren.bh
#                                                                          ^^^ source.bh
#                                                                             ^ source.bh punctuation.paren.bh
#                                                                              ^ source.bh
#                                                                               ^ source.bh keyword.operator.eq.bh
>   do let m_nsd = getLabelNSDs allow_open label lbls
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>          pos = getStringPosition label
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>          msg = setStringPosition ("No Label '" +++ label +++ "' found for goto.") pos
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                    ^^^^^^^^^^ source.bh string.quoted.double.bh
#                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                               ^ source.bh
#                                                ^^^ source.bh keyword.operator.infix.bh
#                                                   ^^^^^^^ source.bh
#                                                          ^^^ source.bh keyword.operator.infix.bh
#                                                             ^ source.bh
#                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                               ^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^^^^^ source.bh
>          xx (Just nsd) = nsd
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^ source.bh constant.other.bh
#                  ^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^ source.bh
>          xx _          = error msg
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^^^^^^^^^ source.bh
>      return (SFAction p n (xx m_nsd) a_abort a (Just (Jump label)) rs)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh constant.other.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^ source.bh constant.other.bh
#                                                           ^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
>addLabelNSDs _allow_open _lbls st@(SFAction _ _ _ _ _ _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.tight.at.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^ source.bh constant.other.bh
#                                           ^^^^^^^^^^^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^ source.bh
#                                                           ^ source.bh keyword.operator.eq.bh
>   return st
#^^^^^^^^^^^^^ source.bh
>addLabelNSDs allow_open lbls (SFIf1 p c s1) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh constant.other.bh
#                                   ^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
>   do s' <- addLabelNSDs allow_open lbls s1
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>      return (SFIf1 p c s')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^ source.bh constant.other.bh
#                   ^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>addLabelNSDs allow_open lbls (SFIf2 p c s0 s1) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh constant.other.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
>   do s0' <- (addLabelNSDs allow_open lbls s0)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>      s1' <- (addLabelNSDs allow_open lbls s1)
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
>      return (SFIf2 p c s0' s1')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^ source.bh constant.other.bh
#                   ^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>addLabelNSDs _allow_open _lbls st@(SFPar _ _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.tight.at.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^ source.bh constant.other.bh
#                                        ^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^ source.bh keyword.operator.eq.bh
>   return st
#^^^^^^^^^^^^^ source.bh
>addLabelNSDs allow_open lbls (SFSeq p ss) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^ source.bh constant.other.bh
#                                   ^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>   do ss' <- mapM (addLabelNSDs allow_open lbls) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh
>      return (SFSeq p ss')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^ source.bh constant.other.bh
#                   ^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
>addLabelNSDs _allow_open _lbls st@(SFSkip _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.tight.at.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^ source.bh constant.other.bh
#                                         ^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
>   return st
#^^^^^^^^^^^^^ source.bh
>addLabelNSDs _allow_open _lbls st@(SFReturn _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.tight.at.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^ source.bh constant.other.bh
#                                           ^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
>   return st
#^^^^^^^^^^^^^ source.bh
>addLabelNSDs _allow_open _lbls st@(SFLabel _ _ _ Nothing) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.tight.at.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^^^^^^^ source.bh
#                                                 ^^^^^^^ source.bh constant.other.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh
#                                                          ^ source.bh keyword.operator.eq.bh
>   return st
#^^^^^^^^^^^^^ source.bh
>addLabelNSDs allow_open lbls (SFNamed p n ss) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^ source.bh constant.other.bh
#                                     ^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>   do ss' <- mapM (addLabelNSDs allow_open lbls) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh
>      return (SFNamed p n ss')
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^ source.bh constant.other.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>addLabelNSDs _allow_open _lbls st@(SFUntil _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh keyword.operator.infix.tight.at.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^ source.bh keyword.operator.eq.bh
>   return st
#^^^^^^^^^^^^^ source.bh
>
>addLabelNSDs allow_open lbls (SFWhile p c st) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^^^^ source.bh constant.other.bh
#                                     ^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>    do _r <- addLabelNSDs allow_open lbls st
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       return (SFWhile p c _r)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
>
>addLabelNSDs _allow_open _lbls st =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>   do x <- stmtFTToString st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh
>      messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>      error "unhandled case"
#^^^^^^^^^^^^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>getLabelNSDs :: Bool -> String -> (List (String, NextStateDescriptors)) -> (Maybe NextStateDescriptors)
#^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                                  ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                      ^ source.bh meta.function.type-declaration.bh
>getLabelNSDs True  _ Nil = Just Nil
#^^^^^^^^^^^^^ source.bh
#             ^^^^ source.bh constant.other.bh
#                 ^^^^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^^^^ source.bh constant.other.bh
#                               ^ source.bh
#                                ^^^ source.bh constant.other.bh
>getLabelNSDs False _ Nil = Nothing
#^^^^^^^^^^^^^ source.bh
#             ^^^^^ source.bh constant.other.bh
#                  ^^^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^^^^^^^ source.bh constant.other.bh
>getLabelNSDs allow_open name (Cons (l, nsd) rest) = if (name == l) then (Just nsd) else getLabelNSDs allow_open name rest
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh constant.other.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^ source.bh keyword.operator.eq.bh
#                                                   ^ source.bh
#                                                    ^^ source.bh keyword.control.if.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^ source.bh
#                                                             ^^ source.bh keyword.operator.infix.bh
#                                                               ^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh
#                                                                   ^^^^ source.bh keyword.control.then.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
#                                                                         ^^^^ source.bh constant.other.bh
#                                                                             ^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh
#                                                                                   ^^^^ source.bh keyword.control.else.bh
#                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getJumpActions :: (Monad m) => (StmtFT a) -> m (List Integer)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
>getJumpActions st = collectActions (Just (Jump "")) st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^ source.bh
#                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^ source.bh
>
>getUpdateEarlyActions :: (Monad m) => (StmtFT a) -> m (List Integer)
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                       ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
>getUpdateEarlyActions st = collectActions (Just (Update (Early ""))) st
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^ source.bh constant.other.bh
#                                                       ^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^ source.bh constant.other.bh
#                                                              ^ source.bh
#                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^ source.bh
>
>getUpdateOverlapActions :: (Monad m) => (StmtFT a) -> m (List Integer)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                         ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
>getUpdateOverlapActions st = collectActions (Just (Update Overlap)) st
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh constant.other.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^ source.bh constant.other.bh
#                                                         ^ source.bh
#                                                          ^^^^^^^ source.bh constant.other.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^^^^ source.bh
>
>getWaitActions :: (Monad m) => (StmtFT a) -> m (List Integer)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
>getWaitActions st = collectActions (Just Wait) st
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^^^^ source.bh constant.other.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>collectActions :: (Monad m) => (Maybe ActionType) -> (StmtFT a) -> m (List Integer)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                      ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
>collectActions at (SFAction _ n _ _ _ x _) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^ source.bh constant.other.bh
#                           ^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
>   return (if (actionTypesMatch at x) then (Cons n Nil) else Nil)
#^^^^^^^^^^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^^^ source.bh keyword.control.then.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^^^ source.bh
#                                                   ^^^ source.bh constant.other.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^^^^ source.bh keyword.control.else.bh
#                                                            ^ source.bh
#                                                             ^^^ source.bh constant.other.bh
#                                                                ^ source.bh punctuation.paren.bh
>collectActions _ (SFAction _ _ _ _ _ _ _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh constant.other.bh
#                          ^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectActions at (SFIf1 _ _ s1) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>   collectActions at s1
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>collectActions at (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
>   do c0 <- (collectActions at s0)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>      c1 <- (collectActions at s1)
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>      return (append c0 c1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>collectActions at (SFPar _ r _) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>   collectActions at r
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>collectActions at (SFSeq _ ss) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   do x <- mapM (collectActions at) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>collectActions _ (SFSkip _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^ source.bh constant.other.bh
#                        ^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectActions _ (SFReturn _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^ source.bh constant.other.bh
#                          ^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectActions _ (SFLabel _ _ _ _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectActions at (SFNamed _ _ ss) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh constant.other.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>   do x <- mapM (collectActions at) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>collectActions _ (SFUntil _ _) =
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^ source.bh constant.other.bh
#                         ^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>
>collectActions at (SFWhile _ _ st) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^ source.bh constant.other.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>   do x <- collectActions at st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>      return x
#^^^^^^^^^^^^^^^ source.bh
>
>collectActions _ st =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh keyword.operator.eq.bh
>   do x <- stmtFTToString st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh
>      messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>      error "unhandled case"
#^^^^^^^^^^^^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>labelsMatch :: Integer -> Integer -> Bool
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>labelsMatch 0 _ = True
#^^^^^^^^^^^^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
#             ^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^^ source.bh constant.other.bh
>labelsMatch _ 0 = True
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^^ source.bh constant.other.bh
>labelsMatch a b = (a == b)
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^ source.bh
#                     ^^ source.bh keyword.operator.infix.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
>
>actionTypesMatch :: (Maybe ActionType) -> (Maybe ActionType) -> Bool
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>actionTypesMatch (Just (Jump _)) (Just (Jump _)) = True
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^ source.bh constant.other.bh
#                                            ^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
#                                                  ^ source.bh
#                                                   ^^^^ source.bh constant.other.bh
>actionTypesMatch (Just (Update (Early _))) (Just (Update (Early _))) = True
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh constant.other.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^ source.bh constant.other.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh constant.other.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^ source.bh constant.other.bh
#                                                        ^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^ source.bh constant.other.bh
#                                                               ^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^ source.bh
#                                                                       ^^^^ source.bh constant.other.bh
>actionTypesMatch a b = (a == b)
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^ source.bh
#                          ^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>collectTSDs :: (Monad m) => (Integer -> Integer -> Bool) -> Bool -> (StmtFT a) -> m TwoStateDescriptors
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh
#                                                                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                    ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>collectTSDs f start (SFAction _ n nsd _ _ _ _) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
>   return (concat (map (createTSD n f start) nsd))
#^^^^^^^^^^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>collectTSDs f start (SFIf1 _ _ s1) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^ source.bh constant.other.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>   collectTSDs f start s1
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>collectTSDs f start (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^ source.bh constant.other.bh
#                          ^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
>   do c0 <- (collectTSDs f start s0)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>      c1 <- (collectTSDs f start s1)
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>      return (append c0 c1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>-- TTTT
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^ source.bh comment.line.double-dash.bh
>collectTSDs f start (SFPar _ r _) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^ source.bh constant.other.bh
#                          ^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>   collectTSDs f start r
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>collectTSDs f start (SFSeq _ ss) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^ source.bh constant.other.bh
#                          ^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>   do x <- mapM (collectTSDs f start) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>collectTSDs _ _ (SFSkip _) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectTSDs _ _ (SFReturn _) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^ source.bh constant.other.bh
#                         ^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectTSDs _ _ (SFLabel _ _ _ Nothing) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^ source.bh
#                               ^^^^^^^ source.bh constant.other.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>collectTSDs f start (SFNamed _ _ ss) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
>   do x <- mapM (collectTSDs f start) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>collectTSDs _ _ (SFUntil _ _) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>
>collectTSDs f start (SFWhile _ _ st) =
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
>   do x <- collectTSDs f start st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>      return x
#^^^^^^^^^^^^^^^ source.bh
>
>collectTSDs _ _ st =
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
>   do x <- stmtFTToString st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh
>      messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>      error "unhandled case"
#^^^^^^^^^^^^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>createTSD :: Integer -> (Integer -> Integer -> Bool) -> Bool -> NextStateDescriptor -> (List TwoStateDescriptor)
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                                             ^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                               ^ source.bh meta.function.type-declaration.bh
>createTSD num f start (cond, i) =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^ source.bh
#                           ^ source.bh punctuation.separator.comma.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
>   let kind = if (num == idle_state)    then Start
#^^^ source.bh
#   ^^^ source.bh keyword.other.let.bh
#      ^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
#                                        ^^^^ source.bh keyword.control.then.bh
#                                            ^ source.bh
#                                             ^^^^^ source.bh constant.other.bh
>              else if (i == idle_state) then End
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^ source.bh
#                         ^^ source.bh keyword.operator.infix.bh
#                           ^^^^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh keyword.control.then.bh
#                                            ^ source.bh
#                                             ^^^ source.bh constant.other.bh
>              else                           Default
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^^^^^^^ source.bh constant.other.bh
>       c    = if (num == idle_state) then cond && start else cond
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh keyword.control.then.bh
#                                         ^^^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^^^^^^^ source.bh
#                                                        ^^^^ source.bh keyword.control.else.bh
#                                                            ^^^^^^ source.bh
>   in if (f num i) then (Cons (TSD c num i kind) Nil) else Nil
#^^^ source.bh
#   ^^ source.bh keyword.other.in.bh
#     ^ source.bh
#      ^^ source.bh keyword.control.if.bh
#        ^ source.bh
#         ^ source.bh punctuation.paren.bh
#          ^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^^^ source.bh keyword.control.then.bh
#                       ^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^ source.bh constant.other.bh
#                                  ^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^^^^ source.bh keyword.control.else.bh
#                                                          ^ source.bh
#                                                           ^^^ source.bh constant.other.bh
>
>
>combineTSDs :: TwoStateDescriptors -> TwoStateDescriptors
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>combineTSDs (Cons a@(TSD conda fa ta ka) (Cons b@(TSD condb fb tb kb) rest)) =
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^ source.bh constant.other.bh
#                 ^^ source.bh
#                   ^ source.bh keyword.operator.infix.tight.at.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^^ source.bh
#                                                ^ source.bh keyword.operator.infix.tight.at.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^ source.bh constant.other.bh
#                                                     ^^^^^^^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^ source.bh
#                                                                             ^ source.bh keyword.operator.eq.bh
>--       if      (isStaticAndFalse conda)   then combineTSDs (Cons b rest)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--       else if (isStaticAndFalse condb)   then combineTSDs (Cons a rest)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--       else if ((fa == fb) && (ta == tb) && (ka == kb))
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>       if ((fa == fb) && (ta == tb) && (ka == kb))
#^^^^^^^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^ source.bh
#               ^^ source.bh keyword.operator.infix.bh
#                 ^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^ source.bh
#                      ^^ source.bh keyword.operator.infix.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^ source.bh
#                                           ^^ source.bh keyword.operator.infix.bh
#                                             ^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh punctuation.paren.bh
>                                          then combineTSDs (Cons (TSD (conda || condb) fa ta ka) rest)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                          ^^^^ source.bh keyword.control.then.bh
#                                              ^^^^^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^^ source.bh constant.other.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^ source.bh constant.other.bh
#                                                                     ^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^^^^^^ source.bh
#                                                                             ^^ source.bh keyword.operator.infix.bh
#                                                                               ^^^^^^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^^^^^^^^^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                ^^^^^ source.bh
#                                                                                                     ^ source.bh punctuation.paren.bh
>       else                                    (Cons a (combineTSDs (Cons b rest)))
#^^^^^^^ source.bh
#       ^^^^ source.bh keyword.control.else.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^^^^ source.bh constant.other.bh
#                                                                         ^^^^^^^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh punctuation.paren.bh
>combineTSDs (Cons a@(TSD _ _ _ _) Nil) = (Cons a Nil)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^ source.bh constant.other.bh
#                 ^^ source.bh
#                   ^ source.bh keyword.operator.infix.tight.at.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh constant.other.bh
#                        ^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^^^ source.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^ source.bh punctuation.paren.bh
>combineTSDs Nil = Nil
#^^^^^^^^^^^^ source.bh
#            ^^^ source.bh constant.other.bh
#               ^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^ source.bh
#                  ^^^ source.bh constant.other.bh
>
>
>allTSDs :: Integer -> Integer -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>allTSDs _ _ = True
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^^^ source.bh constant.other.bh
>
>exactTSDs :: Integer -> Integer -> Integer -> Integer -> Bool
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>exactTSDs m n f t = (m == f) && (n == t)
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^^ source.bh keyword.operator.infix.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^ source.bh
#                                   ^^ source.bh keyword.operator.infix.bh
#                                     ^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
>
>toNTSDs :: Integer -> Integer -> Integer -> Bool
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>toNTSDs n _ m = n == m
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^ source.bh
#                  ^^ source.bh keyword.operator.infix.bh
#                    ^^^ source.bh
>
>fromNTSDs :: Integer -> Integer -> Integer -> Bool
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>fromNTSDs n m _ = n == m
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^^^ source.bh
>
>startTSDs :: Integer -> Integer -> Bool
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>startTSDs f t = (toNTSDs idle_state f t) || (fromNTSDs idle_state f t)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>addAllWaitBypassTSDs :: (Monad m) => (List Integer) -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                                ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addAllWaitBypassTSDs Nil tsds = return tsds
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^^^^^^ source.bh
>addAllWaitBypassTSDs (Cons n rest) tsds =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>    do x <- addAllWaitBypassTSDs rest tsds
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       addWaitBypassTSDs n x
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>addWaitBypassTSDs :: (Monad m) => Integer -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addWaitBypassTSDs n tsds =
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
>  do let self (TSD _cond f t _) = t == n && f == n
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^ source.bh
#     ^^^ source.bh keyword.other.let.bh
#        ^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^ source.bh
#                                              ^^ source.bh keyword.operator.infix.bh
#                                                ^^^ source.bh
>         to   (TSD _cond f t _) = t == n && (not (f == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         from (TSD _cond f t _) = f == n && (not (t == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         rest (TSD _cond f t _) = not (t == n) || (f == t)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^ source.bh
#                                                     ^^ source.bh keyword.operator.infix.bh
#                                                       ^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
>         self_list = filter self tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         to_list   = filter to   tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         from_list = filter from tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         rest_list = filter rest tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         getCond (TSD c _ _ _) = c
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^ source.bh
>         any_out = foldr1 (||) (map getCond from_list)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh entity.name.function.infix.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
>         create_bypass (TSD cond_in f0 t0 k0) (TSD cond_out _f1 t1 k1) =
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^ source.bh constant.other.bh
#                                                  ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^ source.bh keyword.operator.eq.bh
>                     (Cons (TSD (cond_in && cond_out) f0 t1 (combineTSDTypes k0 k1))
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>                           (Cons (TSD (cond_in && (not any_out)) f0 t0 k0) Nil))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
#                                                                          ^ source.bh
#                                                                           ^^^ source.bh constant.other.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh punctuation.paren.bh
>         create_bypasses tsd = concat (map (create_bypass tsd) from_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
>     return (append (append (concat (map create_bypasses to_list)) self_list) rest_list)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^^^^^^^^ source.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^^^^^^^^^^ source.bh
#                                                                                       ^ source.bh punctuation.paren.bh
>
>
>
>addAllJumpBypassTSDs :: (Monad m) => (List Integer) -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                         ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                                ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addAllJumpBypassTSDs Nil tsds = return tsds
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^^^ source.bh constant.other.bh
#                        ^^^^^^ source.bh
#                              ^ source.bh keyword.operator.eq.bh
#                               ^^^^^^^^^^^^^ source.bh
>addAllJumpBypassTSDs (Cons n rest) tsds =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>    do x <- addAllJumpBypassTSDs rest tsds
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       addJumpBypassTSDs n x
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>addJumpBypassTSDs :: (Monad m) => Integer -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addJumpBypassTSDs n tsds =
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
>  do let self (TSD _cond f t _) = t == n && f == n
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^ source.bh
#     ^^^ source.bh keyword.other.let.bh
#        ^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^ source.bh
#                                              ^^ source.bh keyword.operator.infix.bh
#                                                ^^^ source.bh
>         to   (TSD _cond f t _) = t == n && (not (f == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         from (TSD _cond f t _) = f == n && (not (t == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         rest (TSD _cond f t _) = not ((t == n) || (f == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^ source.bh
#                                          ^^ source.bh keyword.operator.infix.bh
#                                            ^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^^ source.bh keyword.operator.infix.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
#                                                        ^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh punctuation.paren.bh
>         not_false  (TSD cond _ _ _) = not (isStaticAndFalse cond)
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>         self_list = filter self tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         to_list   = filter to   tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         from_list = filter from tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         rest_list = filter rest tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         filtered_self = filter not_false self_list
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>         getCond (TSD c _ _ _) = c
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^ source.bh
>         any_out = foldr1 (||) (map getCond from_list)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh entity.name.function.infix.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
>     {-# hide #-}
#^^^^^ source.bh
#     ^^^ source.bh meta.preprocessor.bh
#        ^^^^^^ source.bh meta.preprocessor.bh
#              ^^^ source.bh meta.preprocessor.bh
>     jj <- if ((length self_list) > 0 && (length filtered_self) > 0)
#^^^^^^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.infix.bh
#                                   ^ source.bh
#                                    ^ source.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh
#                                      ^^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh
#                                                                ^ source.bh keyword.operator.infix.bh
#                                                                 ^ source.bh
#                                                                  ^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh punctuation.paren.bh
>           then do let create_bypass (TSD cond_in f0 t0 k0) (TSD cond_out _f1 t1 k1) =
#^^^^^^^^^^^ source.bh
#           ^^^^ source.bh keyword.control.then.bh
#               ^ source.bh
#                ^^ source.bh keyword.control.do.bh
#                  ^ source.bh
#                   ^^^ source.bh keyword.other.let.bh
#                      ^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^^^^^^^^^^^^^^^^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^ source.bh constant.other.bh
#                                                                ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
#                                                                                    ^ source.bh
#                                                                                     ^ source.bh keyword.operator.eq.bh
>                         (Cons (TSD (cond_in && cond_out) f0 t1 (combineTSDTypes k0 k1))
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh constant.other.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^ source.bh constant.other.bh
#                                   ^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.infix.bh
#                                               ^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                       ^ source.bh punctuation.paren.bh
>                           (Cons (TSD (cond_in && (not any_out)) f0 t0 k0) Nil))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
#                                                                          ^ source.bh
#                                                                           ^^^ source.bh constant.other.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^ source.bh punctuation.paren.bh
>                       create_bypasses tsd    = concat (map (create_bypass tsd) from_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
#                                               ^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^^^^^^ source.bh
#                                                                                         ^ source.bh punctuation.paren.bh
>                       zz = (concat (map create_bypasses to_list))
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh punctuation.paren.bh
>--                       yy = (append (filter not_false (append zz from_list)) filtered_self)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                       yy = (append (filter not_false (combineTSDs (sortBy compareTSDs zz))) filtered_self)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                            ^^^^^^^^^^^^^^ source.bh
#                                                                                                          ^ source.bh punctuation.paren.bh
>--                   messageM("HHHHH0: " +++ (toString n) +++ " " +++ (twoStateDescriptorsToString filtered_self))
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--                   messageM("HHHHH1: " +++ (toString n) +++ " " +++ (twoStateDescriptorsToString yy))
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                   return (append yy rest_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>           else do let create_bypass (TSD cond_in f0 _t0 k0) (TSD cond_out _f1 t1 k1) =
#^^^^^^^^^^^ source.bh
#           ^^^^ source.bh keyword.control.else.bh
#               ^ source.bh
#                ^^ source.bh keyword.control.do.bh
#                  ^ source.bh
#                   ^^^ source.bh keyword.other.let.bh
#                      ^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^^^^^^^^^^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^ source.bh constant.other.bh
#                                                                 ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^ source.bh
#                                                                                      ^ source.bh keyword.operator.eq.bh
>                        (Cons (TSD (cond_in && cond_out) f0 t1 (combineTSDTypes k0 k1)) Nil)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^ source.bh constant.other.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^ source.bh
#                                            ^^ source.bh keyword.operator.infix.bh
#                                              ^^^^^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh punctuation.paren.bh
#                                                                                       ^ source.bh
#                                                                                        ^^^ source.bh constant.other.bh
#                                                                                           ^ source.bh punctuation.paren.bh
>                       create_bypasses tsd = concat (map (create_bypass tsd) from_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^ source.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^^^^^^^^^^^^ source.bh
#                                                                           ^ source.bh punctuation.paren.bh
#                                                                            ^^^^^^^^^^ source.bh
#                                                                                      ^ source.bh punctuation.paren.bh
>                       zz = (concat (map create_bypasses to_list))
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^ source.bh punctuation.paren.bh
>                       yy = (filter not_false zz)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
>                   return (append yy rest_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>     return jj
#^^^^^^^^^^^^^^^ source.bh
>
>addJump2BypassTSDs :: (Monad m) => Integer -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.function.type-declaration.bh
#                                              ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addJump2BypassTSDs n tsds =
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                          ^ source.bh keyword.operator.eq.bh
>  do let to   (TSD _cond _ t _) = t == n
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^ source.bh
#     ^^^ source.bh keyword.other.let.bh
#        ^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
>         from (TSD _cond f _ _) = f == n
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
>         rest (TSD _cond f t _) = not ((t == n) || (f == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^ source.bh
#                                          ^^ source.bh keyword.operator.infix.bh
#                                            ^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^^ source.bh keyword.operator.infix.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
#                                                        ^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh punctuation.paren.bh
>         to_list   = filter to   tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         from_list = filter from tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         rest_list = filter rest tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         getCond (TSD c _ _ _) = c
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^ source.bh constant.other.bh
#                     ^^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
#                                ^^^ source.bh
>         any_out = foldr1 (||) (map getCond from_list)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^^ source.bh entity.name.function.infix.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
>         create_bypass (TSD cond_in f0 t0 k0) x@(TSD cond_out _f1 t1 k1) =
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^^^^^^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^ source.bh
#                                               ^ source.bh keyword.operator.infix.tight.at.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^ source.bh constant.other.bh
#                                                    ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                       ^ source.bh punctuation.paren.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh keyword.operator.eq.bh
>                     (Cons (TSD (cond_in && cond_out) f0 t1 (combineTSDTypes k0 k1))
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>                           (Cons (TSD (cond_in && (not any_out)) f0 t0 k0)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^^ source.bh
#                                               ^^ source.bh keyword.operator.infix.bh
#                                                 ^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
>                                 (Cons x Nil)))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^^^ source.bh
#                                         ^^^ source.bh constant.other.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh punctuation.paren.bh
>         create_bypasses tsd = concat (map (create_bypass tsd) from_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
>     return (append (concat (map create_bypasses to_list)) rest_list)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>
>addAllOvlpUpdateBypassTSDs :: (Monad m) => (List Integer) -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                               ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                      ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addAllOvlpUpdateBypassTSDs Nil tsds = return tsds
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^^^ source.bh constant.other.bh
#                              ^^^^^^ source.bh
#                                    ^ source.bh keyword.operator.eq.bh
#                                     ^^^^^^^^^^^^^ source.bh
>addAllOvlpUpdateBypassTSDs (Cons n rest) tsds =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
>    do x <- addAllOvlpUpdateBypassTSDs rest tsds
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       addOvlpUpdateBypassTSDs n x
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>
>addOvlpUpdateBypassTSDs :: (Monad m) => Integer -> TwoStateDescriptors -> m TwoStateDescriptors
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                            ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>addOvlpUpdateBypassTSDs n tsds =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>  do let to   (TSD _cond f t _) = t == n && (not (f == n))
#^^ source.bh
#  ^^ source.bh keyword.control.do.bh
#    ^ source.bh
#     ^^^ source.bh keyword.other.let.bh
#        ^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         from (TSD _cond f t _) = f == n && (not (t == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         to_list   = filter to   tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         from_list = filter from tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         create_bypass (TSD cond_in f0 _t0 k0) (TSD cond_out _f1 t1 k1) = (Cons (TSD (cond_in && cond_out) f0 t1 (combineTSDTypes k0 k1)) Nil)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^ source.bh constant.other.bh
#                                                   ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh keyword.operator.eq.bh
#                                                                         ^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^^^^ source.bh constant.other.bh
#                                                                               ^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^^^ source.bh constant.other.bh
#                                                                                    ^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^^^^^^^^ source.bh
#                                                                                              ^^ source.bh keyword.operator.infix.bh
#                                                                                                ^^^^^^^^^ source.bh
#                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                          ^^^^^^^ source.bh
#                                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                                         ^ source.bh
#                                                                                                                                          ^^^ source.bh constant.other.bh
#                                                                                                                                             ^ source.bh punctuation.paren.bh
>         create_bypasses tsd = concat (map (create_bypass tsd) from_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
#                              ^^^^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.paren.bh
>     return (append (concat (map create_bypasses to_list)) tsds)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
>
>addAllEarlyUpdateBypassTSDs :: (Monad m) => (List Integer) -> (StmtFT a, TwoStateDescriptors) -> Bool -> m (StmtFT a, TwoStateDescriptors)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                 ^ source.bh meta.function.type-declaration.bh
#                                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^ source.bh meta.function.type-declaration.bh
#                                                           ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                            ^ source.bh meta.function.type-declaration.bh
#                                                                                             ^ source.bh meta.function.type-declaration.bh
#                                                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                                                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                                    ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                                                                      ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                                                         ^ source.bh meta.function.type-declaration.bh
>addAllEarlyUpdateBypassTSDs Nil s_t _ = return s_t
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^^^^^^^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^^^^^^^^^^^^ source.bh
>addAllEarlyUpdateBypassTSDs (Cons n rest) s_t do_warn =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^ source.bh constant.other.bh
#                                 ^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^^^^^^^^^ source.bh
#                                                      ^ source.bh keyword.operator.eq.bh
>    do (s', tsds') <- addAllEarlyUpdateBypassTSDs rest s_t do_warn
#^^^^ source.bh
#    ^^ source.bh keyword.control.do.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.operator.arrow.left.bh
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>       addEarlyUpdateBypassTSDs n (s', tsds') do_warn
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^ source.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^^^^^^ source.bh
>
>addEarlyUpdateBypassTSDs :: (Monad m) => Integer -> (StmtFT a, TwoStateDescriptors) -> Bool -> m (StmtFT a, TwoStateDescriptors)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                     ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                              ^ source.bh meta.function.type-declaration.bh
#                                                               ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh
#                                                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                                                  ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                          ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                                            ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                                                               ^ source.bh meta.function.type-declaration.bh
>addEarlyUpdateBypassTSDs n (st, tsds) do_warn =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.separator.comma.bh
#                               ^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^^^^^^^^^ source.bh
#                                              ^ source.bh keyword.operator.eq.bh
> do let  to   (TSD _cond f t _) = t == n && (not (f == n))
#^ source.bh
# ^^ source.bh keyword.control.do.bh
#   ^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         from (TSD _cond f t _) = f == n && (not (t == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^ source.bh
#                                         ^^ source.bh keyword.operator.infix.bh
#                                           ^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^ source.bh
#                                                    ^^ source.bh keyword.operator.infix.bh
#                                                      ^^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^ source.bh punctuation.paren.bh
>         rest (TSD _cond f t _) = not ((t == n) || (f == n))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^ source.bh
#                                          ^^ source.bh keyword.operator.infix.bh
#                                            ^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^^ source.bh keyword.operator.infix.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^^ source.bh
#                                                      ^^ source.bh keyword.operator.infix.bh
#                                                        ^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^ source.bh punctuation.paren.bh
>         not_false  (TSD cond _ _ _) = not (isStaticAndFalse cond)
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>         to_list   = filter to   tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         from_list = filter from tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh keyword.operator.eq.bh
#                    ^^^^^^^^^^^^^^^^^^ source.bh
>         rest_list True  = filter rest tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^^^^^^ source.bh
>         rest_list False = tsds
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^ source.bh
>         create_bypass (TSD cond_in f0 _t0 k0) (TSD cond_out _f1 t1 k1) = (Cons (TSD (cond_in && cond_out) f0 t1 (combineTSDTypes k0 k1)) Nil)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^ source.bh constant.other.bh
#                           ^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^ source.bh constant.other.bh
#                                                   ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh keyword.operator.eq.bh
#                                                                         ^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^^^^ source.bh constant.other.bh
#                                                                               ^ source.bh
#                                                                                ^ source.bh punctuation.paren.bh
#                                                                                 ^^^ source.bh constant.other.bh
#                                                                                    ^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^^^^^^^^ source.bh
#                                                                                              ^^ source.bh keyword.operator.infix.bh
#                                                                                                ^^^^^^^^^ source.bh
#                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                          ^^^^^^^ source.bh
#                                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                                                        ^ source.bh punctuation.paren.bh
#                                                                                                                                         ^ source.bh
#                                                                                                                                          ^^^ source.bh constant.other.bh
#                                                                                                                                             ^ source.bh punctuation.paren.bh
>         create_bypasses True  tsd = concat (map (create_bypass tsd) from_list)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^^^ source.bh constant.other.bh
#                             ^^^^^^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
#                                    ^^^^^^^^ source.bh
#                                            ^ source.bh punctuation.paren.bh
#                                             ^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^^^^^^^^^^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^^^^^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
>         create_bypasses False _ = Nil
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^^^^^ source.bh constant.other.bh
#                              ^^^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^^^ source.bh constant.other.bh
>         update_list = map getFrom to_list
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
#                      ^^^^^^^^^^^^^^^^^^^^^ source.bh
>         get_action (SFAction _ _ _ _ a _ _) = a
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^^^ source.bh
>         get_comment (SFAction _ _ _ _ _ (Just (Update (Early txt))) _) = txt
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^^^^ source.bh constant.other.bh
#                              ^^^^^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh constant.other.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^^^ source.bh constant.other.bh
#                                                      ^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^^^^^ source.bh constant.other.bh
#                                                             ^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^ source.bh punctuation.paren.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^ source.bh
#                                                                      ^ source.bh punctuation.paren.bh
#                                                                       ^ source.bh
#                                                                        ^ source.bh keyword.operator.eq.bh
#                                                                         ^^^^^ source.bh
>    can_update    <- canUpdateEarly tsds n do_warn
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^^ source.bh keyword.operator.arrow.left.bh
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>    let l  = getSFAction n st
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^^^ source.bh
>        sa = head l
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^ source.bh
>        update_action = get_action sa
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
#                       ^^^^^^^^^^^^^^^ source.bh
>        comment = get_comment sa
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^^^^^^^^^^ source.bh
>        tsds' = filter not_false (append (concat (map (create_bypasses can_update) to_list)) (rest_list can_update))
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^^^^^^^^ source.bh
#                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                            ^ source.bh
#                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                              ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                                   ^ source.bh punctuation.paren.bh
>    s' <- if (can_update) then (foldrM (addActionAt update_action) st update_list) else return st
#^^^^^^^ source.bh
#       ^^ source.bh keyword.operator.arrow.left.bh
#         ^ source.bh
#          ^^ source.bh keyword.control.if.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^^^ source.bh keyword.control.then.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
#                                                                  ^^^^^^^^^^^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^ source.bh
#                                                                                   ^^^^ source.bh keyword.control.else.bh
#                                                                                       ^^^^^^^^^^^ source.bh
>    let msg = setStringPosition (comment +++ " will require an added cycle.") (getStringPosition comment)
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^^^^^^^^ source.bh
#                                         ^^^ source.bh keyword.operator.infix.bh
#                                            ^ source.bh
#                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                            ^ source.bh punctuation.paren.bh
#                                                                             ^ source.bh
#                                                                              ^ source.bh punctuation.paren.bh
#                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                        ^ source.bh punctuation.paren.bh
>    if (do_warn && (not can_update)) then warningM msg else return ()
#^^^^ source.bh
#    ^^ source.bh keyword.control.if.bh
#      ^ source.bh
#       ^ source.bh punctuation.paren.bh
#        ^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.infix.bh
#                  ^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^^^^ source.bh keyword.control.then.bh
#                                         ^^^^^^^^^^^^^^ source.bh
#                                                       ^^^^ source.bh keyword.control.else.bh
#                                                           ^^^^^^^^ source.bh
#                                                                   ^ source.bh constant.language.unit.bh punctuation.paren.bh
#                                                                    ^ source.bh constant.language.unit.bh punctuation.paren.bh
>    return (s', tsds')
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^ source.bh
#              ^ source.bh punctuation.separator.comma.bh
#               ^^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
>
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>canUpdateEarly :: (Monad m) => TwoStateDescriptors -> Integer -> Bool -> m Bool
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                     ^ source.bh meta.function.type-declaration.bh
#                                                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                             ^ source.bh meta.function.type-declaration.bh
#                                                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh
#                                                                           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>canUpdateEarly tsds n _do_warn =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   do let is_ok (TSD cond _ t _) = (not (t == n)) || (isStaticAndTrue cond)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^ source.bh
#      ^^^ source.bh keyword.other.let.bh
#         ^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^ source.bh constant.other.bh
#                    ^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^ source.bh
#                                           ^^ source.bh keyword.operator.infix.bh
#                                             ^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
>          ok = foldr1 (&&) (map is_ok tsds)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^ source.bh entity.name.function.infix.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
>      return ok
#^^^^^^^^^^^^^^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getTransitionConditions :: (Monad m) => Integer -> State -> (StmtFT a) -> m (List Bool)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                        ^ source.bh meta.function.type-declaration.bh
#                                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                           ^ source.bh meta.function.type-declaration.bh
#                                                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.function.type-declaration.bh
#                                                                      ^ source.bh meta.function.type-declaration.bh
#                                                                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                             ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                                  ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                      ^ source.bh meta.function.type-declaration.bh
>getTransitionConditions num state (SFAction _ n nsd _ _ _ _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^ source.bh constant.other.bh
#                                           ^^^^^^^^^^^^^^^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^ source.bh
#                                                             ^ source.bh keyword.operator.eq.bh
>   return (map ((&&) (state.is n)) (getTransitionConditionsForNSDs num nsd))
#^^^^^^^^^^ source.bh
#          ^ source.bh punctuation.paren.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^ source.bh entity.name.function.infix.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^^^ source.bh
#                           ^ source.bh keyword.operator.infix.bh
#                            ^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^ source.bh punctuation.paren.bh
>getTransitionConditions num state (SFIf1 _ _ s1) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^ source.bh constant.other.bh
#                                        ^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^ source.bh keyword.operator.eq.bh
>   getTransitionConditions num state s1
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>getTransitionConditions num state (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^ source.bh constant.other.bh
#                                        ^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh
#                                                    ^ source.bh keyword.operator.eq.bh
>   do c0 <- (getTransitionConditions num state s0)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>      c1 <- (getTransitionConditions num state s1)
#^^^^^^^^^ source.bh
#         ^^ source.bh keyword.operator.arrow.left.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
>      return (append c0 c1)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
>getTransitionConditions num state (SFSeq _ ss) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^ source.bh constant.other.bh
#                                        ^^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^ source.bh
#                                               ^ source.bh keyword.operator.eq.bh
>   do x <- mapM (getTransitionConditions num state) ss
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^^^^ source.bh
>      return (concat x)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
>getTransitionConditions _ _ (SFSkip _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^ source.bh constant.other.bh
#                                   ^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh
#                                       ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>getTransitionConditions _ _(SFReturn _) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^^^^^ source.bh constant.other.bh
#                                    ^^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^ source.bh keyword.operator.eq.bh
>   return Nil
#^^^^^^^^^^ source.bh
#          ^^^ source.bh constant.other.bh
>
>getTransitionConditions num state (SFWhile _ _ st) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^^^^^^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
>   do c <- (getTransitionConditions num state st)
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
>      return c
#^^^^^^^^^^^^^^^ source.bh
>
>getTransitionConditions _ _ st =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   do x <- stmtFTToString st
#^^^ source.bh
#   ^^ source.bh keyword.control.do.bh
#     ^^^ source.bh
#        ^^ source.bh keyword.operator.arrow.left.bh
#          ^^^^^^^^^^^^^^^^^^^ source.bh
>      messageM ("Case: " +++ x)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                 ^^^^^^ source.bh string.quoted.double.bh
#                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                        ^ source.bh
#                         ^^^ source.bh keyword.operator.infix.bh
#                            ^^ source.bh
#                              ^ source.bh punctuation.paren.bh
>      error "unhandled case"
#^^^^^^^^^^^^ source.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#             ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>getTransitionConditionsForNSDs :: Integer -> NextStateDescriptors -> List Bool
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                 ^ source.bh meta.function.type-declaration.bh
#                                                                  ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>getTransitionConditionsForNSDs _ Nil = Nil
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                 ^^^ source.bh constant.other.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
#                                      ^ source.bh
#                                       ^^^ source.bh constant.other.bh
>getTransitionConditionsForNSDs num (Cons (cond, i) rest) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh punctuation.separator.comma.bh
#                                               ^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh
#                                                         ^ source.bh keyword.operator.eq.bh
>   if (i == num)
#^^^ source.bh
#   ^^ source.bh keyword.control.if.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^^ source.bh keyword.operator.infix.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
>      then (Cons cond (getTransitionConditionsForNSDs num rest))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.then.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^ source.bh constant.other.bh
#                ^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^ source.bh punctuation.paren.bh
>      else (getTransitionConditionsForNSDs num rest)
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
>
>rJoinME :: List (Rules, Bool) -> Rules
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                       ^ source.bh meta.function.type-declaration.bh
#                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>rJoinME pairs =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
>    let getSimpleRules :: List (Rules, Bool) -> Rules
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^^^^^^^^^^ source.bh
#                       ^^ source.bh keyword.operator.double-colon.bh
#                         ^ source.bh
#                          ^^^^ source.bh storage.type.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^^ source.bh storage.type.bh
#                                     ^ source.bh punctuation.separator.comma.bh
#                                      ^ source.bh
#                                       ^^^^ source.bh storage.type.bh
#                                           ^ source.bh
#                                            ^ source.bh
#                                             ^^ source.bh keyword.operator.arrow.bh
#                                               ^ source.bh
#                                                ^^^^^ source.bh storage.type.bh
>        getSimpleRules Nil                   = eR
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^ source.bh constant.other.bh
#                          ^^^^^^^^^^^^^^^^^^^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^^^^ source.bh
>        getSimpleRules (Cons (rule, True) rest) = rJoin rule (getSimpleRules rest)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^^^^ source.bh
#                                  ^ source.bh punctuation.separator.comma.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh constant.other.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^ source.bh keyword.operator.eq.bh
#                                                 ^^^^^^^^^^^^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
#                                                              ^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
>        getSimpleRules (Cons _         rest) = getSimpleRules rest
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^ source.bh constant.other.bh
#                            ^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^ source.bh
>        getMERules :: List (Rules, Bool) -> List Rules
#^^^^^^^^ source.bh meta.function.type-declaration.bh
#        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.separator.comma.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                           ^ source.bh meta.function.type-declaration.bh
#                                            ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>        getMERules Nil                    = Nil
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^^^ source.bh constant.other.bh
#                      ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^ source.bh
#                                            ^^^ source.bh constant.other.bh
>        getMERules (Cons (rule, False) rest) = (Cons rule (getMERules rest))
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^ source.bh
#                              ^ source.bh punctuation.separator.comma.bh
#                               ^ source.bh
#                                ^^^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^^^^^ source.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^ source.bh
#                                             ^ source.bh keyword.operator.eq.bh
#                                              ^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^^^ source.bh constant.other.bh
#                                                    ^^^^^^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^^^^^^^^^^^^^^^ source.bh
#                                                                          ^ source.bh punctuation.paren.bh
#                                                                           ^ source.bh punctuation.paren.bh
>        getMERules (Cons _          rest) = getMERules rest
#^^^^^^^^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^ source.bh constant.other.bh
#                        ^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^ source.bh
#                                          ^ source.bh keyword.operator.eq.bh
#                                           ^^^^^^^^^^^^^^^^^ source.bh
>        r      = getSimpleRules pairs
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        r_list = getMERules pairs
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh
>--    in  (fold rJoinMutuallyExclusive (Cons r r_list))
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>    in  (rJoin r (fold rJoinMutuallyExclusive r_list))
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^^^^^^^^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>createRulesForTSDs ::  (IsModule m c) => (StmtFT a) -> State -> Bool -> TwoStateDescriptors -> m RuleSet
#^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                     ^^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                        ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
#                                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.function.type-declaration.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
#                                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
#                                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                           ^ source.bh meta.function.type-declaration.bh
#                                                                                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh
#                                                                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                                                ^ source.bh meta.function.type-declaration.bh
#                                                                                                 ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>createRulesForTSDs _ _state _pred Nil = return emptyRuleSet
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^ source.bh
#                                      ^ source.bh keyword.operator.eq.bh
#                                       ^^^^^^^^^^^^^^^^^^^^^ source.bh
>createRulesForTSDs st state pred tsd =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
> do let toNSD (TSD cond' f t _) = ((cond' && state.is f), t)
#^ source.bh
# ^^ source.bh keyword.control.do.bh
#   ^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^^^^^^ source.bh
#                                          ^^ source.bh keyword.operator.infix.bh
#                                            ^^^^^^ source.bh
#                                                  ^ source.bh keyword.operator.infix.bh
#                                                   ^^^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.separator.comma.bh
#                                                         ^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
>        nsd = map toNSD tsd
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^ source.bh
>        (_,n) = (head nsd)
#^^^^^^^^ source.bh
#        ^ source.bh punctuation.paren.bh
#         ^ source.bh
#          ^ source.bh punctuation.separator.comma.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^ source.bh
#                         ^ source.bh punctuation.paren.bh
>        l = getSFAction n st
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^^^^ source.bh
>        sa = (head l)
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
>        getSubRules (SFAction _ _ _ _ _ _ Nothing) = emptyRuleSet
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^^ source.bh
#                                          ^^^^^^^ source.bh constant.other.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh
#                                                   ^ source.bh keyword.operator.eq.bh
#                                                    ^^^^^^^^^^^^^^ source.bh
>        getSubRules (SFAction _ _ _ _ _ _ (Just r)) = r
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^^^^^^ source.bh constant.other.bh
#                             ^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^^ source.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^ source.bh punctuation.paren.bh
#                                                   ^ source.bh
#                                                    ^ source.bh keyword.operator.eq.bh
#                                                     ^^^ source.bh
>        overlapAction (SFAction _ _ _ _ _ (Just (Update Overlap)) _) = True
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^ source.bh constant.other.bh
#                                                       ^ source.bh
#                                                        ^^^^^^^ source.bh constant.other.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^ source.bh
#                                                                       ^^^^ source.bh constant.other.bh
>        overlapAction _                                              = False
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh keyword.operator.eq.bh
#                                                                      ^ source.bh
#                                                                       ^^^^^ source.bh constant.other.bh
>        noME (SFAction _ _ _ _ _ (Just NoME) _) = True
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^ source.bh constant.other.bh
#                                      ^ source.bh
#                                       ^^^^ source.bh constant.other.bh
#                                           ^ source.bh punctuation.paren.bh
#                                            ^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^ source.bh
#                                                ^ source.bh keyword.operator.eq.bh
#                                                 ^ source.bh
#                                                  ^^^^ source.bh constant.other.bh
>        noME _                                  = False
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh keyword.operator.eq.bh
#                                                 ^ source.bh
#                                                  ^^^^^ source.bh constant.other.bh
>        rs = getSubRules sa
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^^^^^^^^^^^^^^^^ source.bh
>--        getFromState (TSD _ f t k) = f
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        from = getFromState (head tsd)
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--        many = from == idle_state || n == idle_state
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>        many = n == idle_state
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^^^^^^^^^^^^ source.bh
>        cond_list = getTransitionConditionsForNSDs n nsd
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        cond = (fold (||) cond_list)
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh entity.name.function.infix.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^^^^^^^^^^ source.bh
#                                   ^ source.bh punctuation.paren.bh
>        no_me = (overlapAction sa) || (noME sa)
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^^ source.bh keyword.operator.infix.bh
#                                     ^ source.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
>        rx = if (many) then (fold rJoin (map (createRuleForSFAction sa state pred) cond_list))
#^^^^^^^^^^^ source.bh
#           ^ source.bh keyword.operator.eq.bh
#            ^ source.bh
#             ^^ source.bh keyword.control.if.bh
#               ^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^ source.bh
#                       ^^^^ source.bh keyword.control.then.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^ source.bh
#                                        ^ source.bh punctuation.paren.bh
#                                         ^^^^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                  ^^^^^^^^^^ source.bh
#                                                                                            ^ source.bh punctuation.paren.bh
#                                                                                             ^ source.bh punctuation.paren.bh
>                       else (createRuleForSFAction sa state pred cond)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^^ source.bh keyword.control.else.bh
#                           ^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
>        rss = if (n == idle_state)
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^ source.bh keyword.control.if.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^^ source.bh
#                    ^^ source.bh keyword.operator.infix.bh
#                      ^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
>              then RuleSet { me_local = eR; me_parents = eR; no_me = rx }
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.then.bh
#                  ^ source.bh
#                   ^^^^^^^ source.bh constant.other.bh
#                          ^ source.bh
#                           ^ source.bh meta.record.bh punctuation.brace.bh
#                            ^ source.bh meta.record.bh
#                             ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                     ^ source.bh meta.record.bh
#                                      ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                       ^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                        ^^^^^^^^^^^ source.bh meta.record.bh
#                                                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                    ^^^^ source.bh meta.record.bh
#                                                                        ^ source.bh meta.record.bh punctuation.brace.bh
>              else if (no_me) then RuleSet { me_local = eR; me_parents = rx; no_me = eR }
#^^^^^^^^^^^^^^ source.bh
#              ^^^^ source.bh keyword.control.else.bh
#                  ^ source.bh
#                   ^^ source.bh keyword.control.if.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^ source.bh
#                            ^ source.bh punctuation.paren.bh
#                             ^ source.bh
#                              ^^^^ source.bh keyword.control.then.bh
#                                  ^ source.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh meta.record.bh punctuation.brace.bh
#                                            ^ source.bh meta.record.bh
#                                             ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                                     ^ source.bh meta.record.bh
#                                                      ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                       ^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                        ^^^^^^^^^^^ source.bh meta.record.bh
#                                                                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                                    ^^^^ source.bh meta.record.bh
#                                                                                        ^ source.bh meta.record.bh punctuation.brace.bh
>                              else RuleSet { me_local = rx; me_parents = eR; no_me = eR }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                              ^^^^ source.bh keyword.control.else.bh
#                                  ^ source.bh
#                                   ^^^^^^^ source.bh constant.other.bh
#                                          ^ source.bh
#                                           ^ source.bh meta.record.bh punctuation.brace.bh
#                                            ^ source.bh meta.record.bh
#                                             ^^^^^^^^ source.bh meta.record.bh variable.other.member.bh
#                                                     ^ source.bh meta.record.bh
#                                                      ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                       ^^^^^^^^^^^^^^^^ source.bh meta.record.bh
#                                                                       ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                        ^^^^^^^^^^^ source.bh meta.record.bh
#                                                                                   ^ source.bh meta.record.bh keyword.operator.eq.bh
#                                                                                    ^^^^ source.bh meta.record.bh
#                                                                                        ^ source.bh meta.record.bh punctuation.brace.bh
>    return (mergeRuleSets rs rss)
#^^^^^^^^^^^ source.bh
#           ^ source.bh punctuation.paren.bh
#            ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
>
>createRuleForSFAction :: (StmtFT a) -> State -> Bool -> Bool -> Rules
#^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                          ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                            ^ source.bh meta.function.type-declaration.bh
#                                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                               ^ source.bh meta.function.type-declaration.bh
#                                                                ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>
>createRuleForSFAction (SFAction p n _ _ a (Just (Jump _)) _) _state pred c' =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^ source.bh constant.other.bh
#                                                     ^^ source.bh
#                                                       ^ source.bh punctuation.paren.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^ source.bh
#                                                           ^ source.bh punctuation.paren.bh
#                                                            ^^^^^^^^^^^^^^^^ source.bh
#                                                                            ^ source.bh keyword.operator.eq.bh
>    let l = getPIString p
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
>        c = pred && c'
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^^^^ source.bh
>        r = if (isStaticAndFalse c)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
>            then eR
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.then.bh
#                ^^^^ source.bh
>            else rules {{-# aggressive_implicit_conditions #-} (ruleName "action_jump" n l): when (c)
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^^^^ source.bh keyword.other.rules.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.brace.bh
#                        ^^^ source.bh meta.preprocessor.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                           ^^^ source.bh meta.preprocessor.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                          ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                      ^^^^ source.bh
#                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                           ^ source.bh keyword.operator.colon.bh
#                                                                                            ^ source.bh
#                                                                                             ^^^^ source.bh keyword.other.when.bh
#                                                                                                 ^ source.bh
#                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                   ^ source.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
>                       ==> action { -- $display "(%0d) executing%s (state %d)" $time l n;
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^^^^^ source.bh keyword.other.action.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.brace.bh
#                                   ^ source.bh
#                                    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>--                                   state.set (0 - 1);
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                                   a}}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.brace.bh
#                                     ^ source.bh punctuation.brace.bh
>    in r
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^ source.bh
>
>createRuleForSFAction (SFAction p n _ _ a (Just (Update Overlap)) _) state pred c' =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^^^^ source.bh constant.other.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^ source.bh constant.other.bh
#                                                       ^ source.bh
#                                                        ^^^^^^^ source.bh constant.other.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^ source.bh punctuation.paren.bh
#                                                                 ^^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
#                                                                    ^^^^^^^^^^^^^^^ source.bh
#                                                                                   ^ source.bh keyword.operator.eq.bh
>    let l = getPIString p
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
>        c = pred && c'
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^^^^ source.bh
>        r = if (isStaticAndFalse c)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
>            then eR
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.then.bh
#                ^^^^ source.bh
>            else rules {{-# aggressive_implicit_conditions #-} (ruleName "action_ovlp" n l): when (c)
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^^^^ source.bh keyword.other.rules.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.brace.bh
#                        ^^^ source.bh meta.preprocessor.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                           ^^^ source.bh meta.preprocessor.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                          ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                      ^^^^ source.bh
#                                                                                          ^ source.bh punctuation.paren.bh
#                                                                                           ^ source.bh keyword.operator.colon.bh
#                                                                                            ^ source.bh
#                                                                                             ^^^^ source.bh keyword.other.when.bh
#                                                                                                 ^ source.bh
#                                                                                                  ^ source.bh punctuation.paren.bh
#                                                                                                   ^ source.bh
#                                                                                                    ^ source.bh punctuation.paren.bh
>                       ==> action { -- $display "(%0d) executing%s (state %d)" $time l n;
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^^^^^ source.bh keyword.other.action.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.brace.bh
#                                   ^ source.bh
#                                    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                                   state.overlap;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                        ^ source.bh keyword.operator.infix.bh
#                                         ^^^^^^^ source.bh
#                                                ^ source.bh punctuation.semicolon.bh
>                                   a}}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.brace.bh
#                                     ^ source.bh punctuation.brace.bh
>    in r
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^ source.bh
>
>createRuleForSFAction (SFAction p n _ _ a at _) state pred c' =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^^^^^ source.bh constant.other.bh
#                               ^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^^^ source.bh
#                                                              ^ source.bh keyword.operator.eq.bh
>    let l = getPIString p
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^^^^^^^^^^ source.bh
>        c = pred && c'
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^^^^^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^^^^ source.bh
>        r = if (isStaticAndFalse c)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^^ source.bh keyword.control.if.bh
#              ^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
>            then eR
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.then.bh
#                ^^^^ source.bh
>            else if (n == idle_state) then rules {{-# no_warn #-} {-# aggressive_implicit_conditions #-} (ruleName "idle" n l): when (c')
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.if.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^ source.bh
#                       ^^ source.bh keyword.operator.infix.bh
#                         ^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^^^ source.bh keyword.control.then.bh
#                                          ^ source.bh
#                                           ^^^^^ source.bh keyword.other.rules.bh
#                                                ^ source.bh
#                                                 ^ source.bh punctuation.brace.bh
#                                                  ^^^ source.bh meta.preprocessor.bh
#                                                     ^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                              ^^^ source.bh meta.preprocessor.bh
#                                                                 ^ source.bh
#                                                                  ^^^ source.bh meta.preprocessor.bh
#                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                                                                     ^^^ source.bh meta.preprocessor.bh
#                                                                                                        ^ source.bh
#                                                                                                         ^ source.bh punctuation.paren.bh
#                                                                                                          ^^^^^^^^^ source.bh
#                                                                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                    ^^^^ source.bh string.quoted.double.bh
#                                                                                                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                         ^^^^ source.bh
#                                                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                                                              ^ source.bh keyword.operator.colon.bh
#                                                                                                                               ^ source.bh
#                                                                                                                                ^^^^ source.bh keyword.other.when.bh
#                                                                                                                                    ^ source.bh
#                                                                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                                                                      ^^ source.bh
#                                                                                                                                        ^ source.bh punctuation.paren.bh
>                       ==> action { -- $display "(%0d) executing%s (state %d)" $time l n;
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^^^^^ source.bh keyword.other.action.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.brace.bh
#                                   ^ source.bh
#                                    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                                    state.set (fromInteger n);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh punctuation.semicolon.bh
>                                    a}}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.brace.bh
#                                      ^ source.bh punctuation.brace.bh
>            else if (at == (Just Wait)) then rules {{-# no_warn #-} {-# aggressive_implicit_conditions #-} (ruleName "wait" n l): when (c)
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^ source.bh keyword.control.if.bh
#                   ^ source.bh
#                    ^ source.bh punctuation.paren.bh
#                     ^^^ source.bh
#                        ^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^^^^ source.bh constant.other.bh
#                                     ^ source.bh punctuation.paren.bh
#                                      ^ source.bh punctuation.paren.bh
#                                       ^ source.bh
#                                        ^^^^ source.bh keyword.control.then.bh
#                                            ^ source.bh
#                                             ^^^^^ source.bh keyword.other.rules.bh
#                                                  ^ source.bh
#                                                   ^ source.bh punctuation.brace.bh
#                                                    ^^^ source.bh meta.preprocessor.bh
#                                                       ^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                                ^^^ source.bh meta.preprocessor.bh
#                                                                   ^ source.bh
#                                                                    ^^^ source.bh meta.preprocessor.bh
#                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                                                                       ^^^ source.bh meta.preprocessor.bh
#                                                                                                          ^ source.bh
#                                                                                                           ^ source.bh punctuation.paren.bh
#                                                                                                            ^^^^^^^^^ source.bh
#                                                                                                                     ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                                      ^^^^ source.bh string.quoted.double.bh
#                                                                                                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                                                           ^^^^ source.bh
#                                                                                                                               ^ source.bh punctuation.paren.bh
#                                                                                                                                ^ source.bh keyword.operator.colon.bh
#                                                                                                                                 ^ source.bh
#                                                                                                                                  ^^^^ source.bh keyword.other.when.bh
#                                                                                                                                      ^ source.bh
#                                                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                                                        ^ source.bh
#                                                                                                                                         ^ source.bh punctuation.paren.bh
>                       ==> action { -- $display "(%0d) executing%s (state %d)" $time l n;
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^^^^^ source.bh keyword.other.action.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.brace.bh
#                                   ^ source.bh
#                                    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                                    state.set (fromInteger n);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh punctuation.semicolon.bh
>                                    a}}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.brace.bh
#                                      ^ source.bh punctuation.brace.bh
>            else rules {{-# aggressive_implicit_conditions #-} (ruleName "action" n l): when (c)
#^^^^^^^^^^^^ source.bh
#            ^^^^ source.bh keyword.control.else.bh
#                ^ source.bh
#                 ^^^^^ source.bh keyword.other.rules.bh
#                      ^ source.bh
#                       ^ source.bh punctuation.brace.bh
#                        ^^^ source.bh meta.preprocessor.bh
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.preprocessor.bh
#                                                           ^^^ source.bh meta.preprocessor.bh
#                                                              ^ source.bh
#                                                               ^ source.bh punctuation.paren.bh
#                                                                ^^^^^^^^^ source.bh
#                                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                          ^^^^^^ source.bh string.quoted.double.bh
#                                                                                ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                                 ^^^^ source.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^ source.bh keyword.operator.colon.bh
#                                                                                       ^ source.bh
#                                                                                        ^^^^ source.bh keyword.other.when.bh
#                                                                                            ^ source.bh
#                                                                                             ^ source.bh punctuation.paren.bh
#                                                                                              ^ source.bh
#                                                                                               ^ source.bh punctuation.paren.bh
>                       ==> action { -- $display "(%0d) executing%s (state %d)" $time l n;
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^^^ source.bh keyword.operator.infix.bh
#                          ^ source.bh
#                           ^^^^^^ source.bh keyword.other.action.bh
#                                 ^ source.bh
#                                  ^ source.bh punctuation.brace.bh
#                                   ^ source.bh
#                                    ^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>                                    state.set (fromInteger n);
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                         ^ source.bh keyword.operator.infix.bh
#                                          ^^^^ source.bh
#                                              ^ source.bh punctuation.paren.bh
#                                               ^^^^^^^^^^^^^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
#                                                             ^ source.bh punctuation.semicolon.bh
>                                    a}}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.brace.bh
#                                      ^ source.bh punctuation.brace.bh
>    in r
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^ source.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>getSFAction :: Integer -> (StmtFT a) -> List (StmtFT a)
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                 ^ source.bh meta.function.type-declaration.bh
#                                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                              ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                      ^ source.bh meta.function.type-declaration.bh
>getSFAction num st@(SFAction _ n _ _ _ _ _) =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.infix.tight.at.bh
#                   ^ source.bh punctuation.paren.bh
#                    ^^^^^^^^ source.bh constant.other.bh
#                            ^^^^^^^^^^^^^^ source.bh
#                                          ^ source.bh punctuation.paren.bh
#                                           ^ source.bh
#                                            ^ source.bh keyword.operator.eq.bh
>   if (n == num) then (Cons st Nil) else Nil
#^^^ source.bh
#   ^^ source.bh keyword.control.if.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^ source.bh
#         ^^ source.bh keyword.operator.infix.bh
#           ^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^ source.bh
#                 ^^^^ source.bh keyword.control.then.bh
#                     ^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^^^^ source.bh constant.other.bh
#                           ^^^^ source.bh
#                               ^^^ source.bh constant.other.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^ source.bh
#                                    ^^^^ source.bh keyword.control.else.bh
#                                        ^ source.bh
#                                         ^^^ source.bh constant.other.bh
>getSFAction num (SFIf1 _ _ s1) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh
#                               ^ source.bh keyword.operator.eq.bh
>   getSFAction num s1
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
>getSFAction num (SFIf2 _ _ s0 s1) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^^^ source.bh
#                                ^ source.bh punctuation.paren.bh
#                                 ^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
>   let l0 = (getSFAction num s0)
#^^^ source.bh
#   ^^^ source.bh keyword.other.let.bh
#      ^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>       l1 = (getSFAction num s1)
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
#           ^ source.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
>   in (append l0 l1)
#^^^ source.bh
#   ^^ source.bh keyword.other.in.bh
#     ^ source.bh
#      ^ source.bh punctuation.paren.bh
#       ^^^^^^^^^^^^ source.bh
#                   ^ source.bh punctuation.paren.bh
>getSFAction num (SFSeq _ ss) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^ source.bh constant.other.bh
#                      ^^^^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^ source.bh
#                             ^ source.bh keyword.operator.eq.bh
>   let x = map (getSFAction num) ss
#^^^ source.bh
#   ^^^ source.bh keyword.other.let.bh
#      ^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh
>   in concat x
#^^^ source.bh
#   ^^ source.bh keyword.other.in.bh
#     ^^^^^^^^^^ source.bh
>getSFAction _ (SFSkip _) = Nil
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^ source.bh constant.other.bh
#                     ^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^ source.bh
#                           ^^^ source.bh constant.other.bh
>getSFAction _ (SFReturn _) = Nil
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^^ source.bh constant.other.bh
#                       ^^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^ source.bh
#                           ^ source.bh keyword.operator.eq.bh
#                            ^ source.bh
#                             ^^^ source.bh constant.other.bh
>getSFAction _ (SFLabel _ _ _ _) = Nil
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^ source.bh
#                                  ^^^ source.bh constant.other.bh
>getSFAction num (SFNamed _ _ ss) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>   let x = map (getSFAction num) ss
#^^^ source.bh
#   ^^^ source.bh keyword.other.let.bh
#      ^^^ source.bh
#         ^ source.bh keyword.operator.eq.bh
#          ^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^^^^^^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^^^ source.bh
>   in concat x
#^^^ source.bh
#   ^^ source.bh keyword.other.in.bh
#     ^^^^^^^^^^ source.bh
>getSFAction _ (SFUntil _ _) = Nil
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^^^^^^ source.bh constant.other.bh
#                      ^^^^ source.bh
#                          ^ source.bh punctuation.paren.bh
#                           ^ source.bh
#                            ^ source.bh keyword.operator.eq.bh
#                             ^ source.bh
#                              ^^^ source.bh constant.other.bh
>getSFAction num (SFWhile _ _ st) =
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh punctuation.paren.bh
#                 ^^^^^^^ source.bh constant.other.bh
#                        ^^^^^^^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>    getSFAction num st
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>getSFAction _ _ = error "unhandled case"
#^^^^^^^^^^^^^^^^ source.bh
#                ^ source.bh keyword.operator.eq.bh
#                 ^^^^^^^ source.bh
#                        ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                         ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>interface State =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.State .bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>        is  :: Integer -> Bool
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^^ source.bh meta.declaration.interface.algebraic.bh
#            ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        set :: Integer -> Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh
#                       ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        overlap :: Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        fired_last :: Bool
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>interface (State' :: # -> *) n =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.(State' :: # -> *) n .bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh
#                               ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>        is'  :: Integer -> Bool
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^^ source.bh meta.declaration.interface.algebraic.bh
#             ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        set' :: Integer -> Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>mkState :: (IsModule m c) => Integer -> Bool -> Bool -> m State
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                            ^ source.bh meta.function.type-declaration.bh
#                                             ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                               ^ source.bh meta.function.type-declaration.bh
#                                                ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.function.type-declaration.bh
#                                                          ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>mkState n start abort =
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^ source.bh keyword.operator.eq.bh
>  if      n < 2     then ffM ((mkState' start abort) :: m(State' 1))
#^^ source.bh
#  ^^ source.bh keyword.control.if.bh
#    ^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
#               ^^^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 4     then ffM ((mkState' start abort) :: m(State' 2))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
#               ^^^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 8     then ffM ((mkState' start abort) :: m(State' 3))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^ source.bh constant.numeric.integral.decimal.bh
#               ^^^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 16    then ffM ((mkState' start abort) :: m(State' 4))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^ source.bh constant.numeric.integral.decimal.bh
#                ^^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 32    then ffM ((mkState' start abort) :: m(State' 5))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^ source.bh constant.numeric.integral.decimal.bh
#                ^^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 64    then ffM ((mkState' start abort) :: m(State' 6))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^ source.bh constant.numeric.integral.decimal.bh
#                ^^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 128   then ffM ((mkState' start abort) :: m(State' 7))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^ source.bh constant.numeric.integral.decimal.bh
#                 ^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 256   then ffM ((mkState' start abort) :: m(State' 8))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^ source.bh constant.numeric.integral.decimal.bh
#                 ^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 512   then ffM ((mkState' start abort) :: m(State' 9))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^ source.bh constant.numeric.integral.decimal.bh
#                 ^^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh constant.numeric.integral.decimal.bh
#                                                                  ^ source.bh
#                                                                   ^ source.bh punctuation.paren.bh
>  else if n < 1024  then ffM ((mkState' start abort) :: m(State' 10))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else if n < 2048  then ffM ((mkState' start abort) :: m(State' 11))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else if n < 4096  then ffM ((mkState' start abort) :: m(State' 12))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else if n < 8192  then ffM ((mkState' start abort) :: m(State' 13))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else if n < 16384 then ffM ((mkState' start abort) :: m(State' 14))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                   ^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else if n < 32768 then ffM ((mkState' start abort) :: m(State' 15))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                   ^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else if n < 65536 then ffM ((mkState' start abort) :: m(State' 16))
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^ source.bh
#       ^^ source.bh keyword.control.if.bh
#         ^^^ source.bh
#            ^ source.bh keyword.operator.infix.bh
#             ^ source.bh
#              ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                   ^ source.bh
#                    ^^^^ source.bh keyword.control.then.bh
#                        ^^^^^ source.bh
#                             ^ source.bh punctuation.paren.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                   ^ source.bh punctuation.paren.bh
#                                                    ^ source.bh
#                                                     ^^ source.bh keyword.operator.double-colon.bh
#                                                       ^ source.bh
#                                                        ^ source.bh variable.other.generic-type.bh
#                                                         ^ source.bh punctuation.paren.bh
#                                                          ^^^^^^ source.bh storage.type.bh
#                                                                ^ source.bh
#                                                                 ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                   ^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
>  else error "FSM too big"
#^^ source.bh
#  ^^^^ source.bh keyword.control.else.bh
#      ^^^^^^^ source.bh
#             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#              ^^^^^^^^^^^ source.bh string.quoted.double.bh
#                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>ffM :: (IsModule m c) => m (State' n) -> m(State)
#^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#   ^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#        ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                    ^ source.bh meta.function.type-declaration.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                        ^ source.bh meta.function.type-declaration.bh
#                                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                           ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
>ffM mm =
#^^^^^^^ source.bh
#       ^ source.bh keyword.operator.eq.bh
>  module
#^^ source.bh
#  ^^^^^^ source.bh keyword.control.module.bh
>    {-# hide #-}
#^^^^ source.bh
#    ^^^ source.bh meta.preprocessor.bh
#       ^^^^^^ source.bh meta.preprocessor.bh
#             ^^^ source.bh meta.preprocessor.bh
>    _i <- mm
#^^^^^^^ source.bh
#       ^^ source.bh keyword.operator.arrow.left.bh
#         ^^^^ source.bh
>
>    set_pw :: PulseWire
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#             ^ source.bh meta.function.type-declaration.bh
#              ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    set_pw <- mkPulseWire
#^^^^^^^^^^^ source.bh
#           ^^ source.bh keyword.operator.arrow.left.bh
#             ^^^^^^^^^^^^^ source.bh
>
>    overlap_pw :: PulseWire
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    overlap_pw <- mkPulseWireOR
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^^^^^^^^^^ source.bh
>
>    fired :: Reg Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    fired <- mkDReg False
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.operator.arrow.left.bh
#            ^^^^^^^^ source.bh
#                    ^^^^^ source.bh constant.other.bh
>
>    can_overlap :: Reg Bool
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>    can_overlap <- mkReg True
#^^^^^^^^^^^^^^^^ source.bh
#                ^^ source.bh keyword.operator.arrow.left.bh
#                  ^^^^^^^ source.bh
#                         ^^^^ source.bh constant.other.bh
>
>    rules {"every": when True
#^^^^ source.bh
#    ^^^^^ source.bh keyword.other.rules.bh
#         ^ source.bh
#          ^ source.bh punctuation.brace.bh
#           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#            ^^^^^ source.bh string.quoted.double.bh
#                 ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                  ^ source.bh keyword.operator.colon.bh
#                   ^ source.bh
#                    ^^^^ source.bh keyword.other.when.bh
#                        ^ source.bh
#                         ^^^^ source.bh constant.other.bh
>              ==> action { can_overlap := if (set_pw) then True else (if (overlap_pw) then False else can_overlap) }}
#^^^^^^^^^^^^^^ source.bh
#              ^^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^^^^^^ source.bh keyword.other.action.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.brace.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^^ source.bh constant.other.operator.infix.bh
#                                         ^ source.bh
#                                          ^^ source.bh keyword.control.if.bh
#                                            ^ source.bh
#                                             ^ source.bh punctuation.paren.bh
#                                              ^^^^^^ source.bh
#                                                    ^ source.bh punctuation.paren.bh
#                                                     ^ source.bh
#                                                      ^^^^ source.bh keyword.control.then.bh
#                                                          ^ source.bh
#                                                           ^^^^ source.bh constant.other.bh
#                                                               ^ source.bh
#                                                                ^^^^ source.bh keyword.control.else.bh
#                                                                    ^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^^ source.bh keyword.control.if.bh
#                                                                        ^ source.bh
#                                                                         ^ source.bh punctuation.paren.bh
#                                                                          ^^^^^^^^^^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^ source.bh
#                                                                                      ^^^^ source.bh keyword.control.then.bh
#                                                                                          ^ source.bh
#                                                                                           ^^^^^ source.bh constant.other.bh
#                                                                                                ^ source.bh
#                                                                                                 ^^^^ source.bh keyword.control.else.bh
#                                                                                                     ^^^^^^^^^^^^ source.bh
#                                                                                                                 ^ source.bh punctuation.paren.bh
#                                                                                                                  ^ source.bh
#                                                                                                                   ^ source.bh punctuation.brace.bh
#                                                                                                                    ^ source.bh punctuation.brace.bh
>
>    interface
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        is      = _i.is'
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                     ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        set v   = action { if (v >= 0) then _i.set' v else noAction; fired := True; set_pw.send }
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^^^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                           ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.paren.bh
#                               ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                 ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                   ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                    ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh constant.numeric.integral.decimal.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                      ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                       ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                            ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                               ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                     ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                      ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                           ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                                   ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                                     ^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                                           ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                                                             ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                                              ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.bh
#                                                                                  ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                                                    ^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                                                                           ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                                                               ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                                                                ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
>        overlap = action { overlap_pw.send } when (can_overlap)
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                           ^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                      ^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                           ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh
#                                             ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                 ^ source.bh meta.declaration.interface.algebraic.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                                   ^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.interface.algebraic.bh
>        fired_last = fired
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkState' :: (IsModule m c) => Bool -> Bool -> m (State' n)
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#        ^ source.bh meta.declaration.interface.algebraic.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh
#                              ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh
#                                   ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh
#                                      ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                          ^ source.bh meta.declaration.interface.algebraic.bh
#                                           ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                               ^ source.bh meta.declaration.interface.algebraic.bh
#                                                ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                                 ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                                       ^ source.bh meta.declaration.interface.algebraic.bh
#                                                        ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.declaration.interface.algebraic.bh
>mkState' start abort =
#^^^^^^^^^^^^^^^^^^^^^ source.bh
#                     ^ source.bh keyword.operator.eq.bh
>  module
#^^ source.bh
#  ^^^^^^ source.bh keyword.control.module.bh
>    mkFSMstate :: Reg(Bit n)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                     ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                      ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
>    mkFSMstate <- mkConfigReg (fromInteger idle_state)
#^^^^^^^^^^^^^^^ source.bh
#               ^^ source.bh keyword.operator.arrow.left.bh
#                 ^^^^^^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                     ^ source.bh punctuation.paren.bh
>
>    rules {{-# no_warn #-} "handle_abort": when (abort && (not start))
#^^^^ source.bh
#    ^^^^^ source.bh keyword.other.rules.bh
#         ^ source.bh
#          ^ source.bh punctuation.brace.bh
#           ^^^ source.bh meta.preprocessor.bh
#              ^^^^^^^^^ source.bh meta.preprocessor.bh
#                       ^^^ source.bh meta.preprocessor.bh
#                          ^ source.bh
#                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                            ^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                        ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                         ^ source.bh keyword.operator.colon.bh
#                                          ^ source.bh
#                                           ^^^^ source.bh keyword.other.when.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^ source.bh
#                                                       ^^ source.bh keyword.operator.infix.bh
#                                                         ^ source.bh
#                                                          ^ source.bh punctuation.paren.bh
#                                                           ^^^^^^^^^ source.bh
#                                                                    ^ source.bh punctuation.paren.bh
#                                                                     ^ source.bh punctuation.paren.bh
>                      ==> action { mkFSMstate := fromInteger idle_state }}
#^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                      ^^^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^^^^^^ source.bh keyword.other.action.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.brace.bh
#                                  ^^^^^^^^^^^^ source.bh
#                                              ^^ source.bh constant.other.operator.infix.bh
#                                                ^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                        ^ source.bh punctuation.brace.bh
#                                                                         ^ source.bh punctuation.brace.bh
>    let is x = if (abort) then (x == idle_state) else (fromInteger x ==  mkFSMstate)
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^ source.bh
#             ^ source.bh keyword.operator.eq.bh
#              ^ source.bh
#               ^^ source.bh keyword.control.if.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^ source.bh
#                        ^ source.bh punctuation.paren.bh
#                         ^ source.bh
#                          ^^^^ source.bh keyword.control.then.bh
#                              ^ source.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^^ source.bh
#                                  ^^ source.bh keyword.operator.infix.bh
#                                    ^^^^^^^^^^^ source.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^ source.bh
#                                                 ^^^^ source.bh keyword.control.else.bh
#                                                     ^ source.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^^^^^^^^^^^^^^ source.bh
#                                                                     ^^ source.bh keyword.operator.infix.bh
#                                                                       ^^^^^^^^^^^^ source.bh
#                                                                                   ^ source.bh punctuation.paren.bh
>    interface
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>      is' n = is n
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>      set' n =action { mkFSMstate := fromInteger n } when (not (abort && (not start)))
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^ source.bh meta.declaration.interface.algebraic.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                       ^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.member.definition.bh
#                                 ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                  ^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh storage.type.operator.infix.bh
#                                    ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                     ^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                 ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh variable.other.generic-type.bh
#                                                  ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh
#                                                   ^ source.bh meta.declaration.interface.algebraic.bh meta.record.definition.bh punctuation.brace.bh
#                                                    ^ source.bh meta.declaration.interface.algebraic.bh
#                                                     ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                         ^ source.bh meta.declaration.interface.algebraic.bh
#                                                          ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                                           ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                              ^ source.bh meta.declaration.interface.algebraic.bh
#                                                               ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                                                ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                                     ^ source.bh meta.declaration.interface.algebraic.bh
#                                                                      ^^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                                                                        ^ source.bh meta.declaration.interface.algebraic.bh
#                                                                         ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                                                                          ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                                             ^ source.bh meta.declaration.interface.algebraic.bh
#                                                                              ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                                                                   ^ source.bh meta.declaration.interface.algebraic.bh
#                                                                                    ^ source.bh meta.declaration.interface.algebraic.bh
#                                                                                     ^ source.bh meta.declaration.interface.algebraic.bh
>
>-- #############################################################################
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>-- #
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh comment.line.double-dash.bh
>
>interface NCount =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.NCount .bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>        is    :: Nat -> Bool
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^^^^ source.bh meta.declaration.interface.algebraic.bh
#              ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        reset :: Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        incr  :: Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^^ source.bh meta.declaration.interface.algebraic.bh
#              ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                ^ source.bh meta.declaration.interface.algebraic.bh
#                 ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>interface (NCount' :: # -> *) n =
#^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
#         ^ source.bh meta.declaration.interface.algebraic.bh
#          ^^^^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.(NCount' :: # -> *) n .bh
#                               ^ source.bh meta.declaration.interface.algebraic.bh
#                                ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
>        is'    :: Nat -> Bool
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^^^^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh
#                         ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        reset' :: Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>        incr'  :: Action
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>
>mkNCount' :: (IsModule m c) => m (NCount' n)
#^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#            ^ source.bh meta.function.type-declaration.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                        ^ source.bh meta.function.type-declaration.bh
#                         ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                              ^ source.bh meta.function.type-declaration.bh
#                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                  ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                         ^ source.bh meta.function.type-declaration.bh
#                                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                           ^ source.bh meta.function.type-declaration.bh
>mkNCount' =
#^^^^^^^^^^ source.bh
#          ^ source.bh keyword.operator.eq.bh
>  module
#^^ source.bh
#  ^^^^^^ source.bh keyword.control.module.bh
>    {-# hide #-}
#^^^^ source.bh
#    ^^^ source.bh meta.preprocessor.bh
#       ^^^^^^ source.bh meta.preprocessor.bh
#             ^^^ source.bh meta.preprocessor.bh
>    _x :: Reg(Bit n)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
>    _x <- mkConfigReg 0
#^^^^^^^ source.bh
#       ^^ source.bh keyword.operator.arrow.left.bh
#         ^^^^^^^^^^^^^ source.bh
#                      ^ source.bh constant.numeric.integral.decimal.bh
>    interface
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>      is'  n = (zExtend n) == _x
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                ^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh
#                              ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>      reset' = _x := 0
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>      incr'  = _x := _x + 1
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>
>mkNCountOneHot :: (IsModule m c) => m (NCount' n)
#^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                   ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                   ^ source.bh meta.function.type-declaration.bh
#                                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                     ^ source.bh meta.function.type-declaration.bh
#                                      ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                       ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                              ^ source.bh meta.function.type-declaration.bh
#                                               ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                ^ source.bh meta.function.type-declaration.bh
>mkNCountOneHot =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
>  module
#^^ source.bh
#  ^^^^^^ source.bh keyword.control.module.bh
>    {-# hide #-}
#^^^^ source.bh
#    ^^^ source.bh meta.preprocessor.bh
#       ^^^^^^ source.bh meta.preprocessor.bh
#             ^^^ source.bh meta.preprocessor.bh
>    _x :: Reg(Bit n)
#^^^^ source.bh meta.function.type-declaration.bh
#    ^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#      ^ source.bh meta.function.type-declaration.bh
#       ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#         ^ source.bh meta.function.type-declaration.bh
#          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#             ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#              ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
>    _x <- mkConfigReg 1
#^^^^^^^ source.bh
#       ^^ source.bh keyword.operator.arrow.left.bh
#         ^^^^^^^^^^^^^ source.bh
#                      ^ source.bh constant.numeric.integral.decimal.bh
>    let zow 0  = ((primSelectFn noPosition _x 0)  == 1)
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^ source.bh
#            ^ source.bh constant.numeric.integral.decimal.bh
#             ^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                              ^ source.bh constant.numeric.integral.decimal.bh
#                                               ^ source.bh punctuation.paren.bh
#                                                ^^ source.bh
#                                                  ^^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh punctuation.paren.bh
>        zow nn = ((primSelectFn noPosition _x nn) == 1)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh punctuation.paren.bh
>        zow mm = ((primSelectFn noPosition _x mm) == 1)
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^ source.bh punctuation.paren.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^ source.bh
#                                                  ^^ source.bh keyword.operator.infix.bh
#                                                    ^ source.bh
#                                                     ^ source.bh constant.numeric.integral.decimal.bh
#                                                      ^ source.bh punctuation.paren.bh
>        zow _  = False
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh keyword.operator.eq.bh
#                ^ source.bh
#                 ^^^^^ source.bh constant.other.bh
>    interface
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>      is'  x = (zow x)
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#                ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                   ^ source.bh meta.declaration.interface.algebraic.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
>      reset' = _x := 1
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>      incr'  = _x := _x << 1
#^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#      ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#           ^^ source.bh meta.declaration.interface.algebraic.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh
#               ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                 ^ source.bh meta.declaration.interface.algebraic.bh
#                  ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#                    ^ source.bh meta.declaration.interface.algebraic.bh
#                     ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^ source.bh meta.declaration.interface.algebraic.bh constant.numeric.integral.decimal.bh
>
>zExtend :: (Add n m k) => Bit n -> Bit m;
#^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#          ^ source.bh meta.function.type-declaration.bh
#           ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#            ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#               ^ source.bh meta.function.type-declaration.bh
#                ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                               ^ source.bh meta.function.type-declaration.bh
#                                ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                  ^ source.bh meta.function.type-declaration.bh
#                                   ^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                        ^^ source.bh
>zExtend value =
#^^^^^^^^^^^^^^ source.bh
#              ^ source.bh keyword.operator.eq.bh
>    let out :: Bit k;
#^^^^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^ source.bh
#            ^^ source.bh keyword.operator.double-colon.bh
#              ^ source.bh
#               ^^^ source.bh storage.type.bh
#                  ^ source.bh
#                   ^ source.bh variable.other.generic-type.bh
#                    ^^ source.bh
>        out = zeroExtend value
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^^^^^^^^^^^^^^^^^^ source.bh
>    in  out[(valueOf m) - 1:0]
#^^^^ source.bh
#    ^^ source.bh keyword.other.in.bh
#      ^^^^^ source.bh
#           ^ source.bh punctuation.bracket.bh
#            ^ source.bh punctuation.paren.bh
#             ^^^^^^^^^ source.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^ source.bh keyword.operator.infix.bh
#                         ^ source.bh
#                          ^ source.bh constant.numeric.integral.decimal.bh
#                           ^ source.bh keyword.operator.colon.bh
#                            ^ source.bh constant.numeric.integral.decimal.bh
#                             ^ source.bh punctuation.bracket.bh
>
>
>ffNM :: (IsModule m c) => m (NCount' n) -> m(NCount)
#^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#    ^ source.bh meta.function.type-declaration.bh
#     ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#       ^ source.bh meta.function.type-declaration.bh
#        ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#         ^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                 ^ source.bh meta.function.type-declaration.bh
#                  ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^ source.bh meta.function.type-declaration.bh
#                       ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                         ^ source.bh meta.function.type-declaration.bh
#                          ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                           ^ source.bh meta.function.type-declaration.bh
#                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                             ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                    ^ source.bh meta.function.type-declaration.bh
#                                     ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                      ^ source.bh meta.function.type-declaration.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                            ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                             ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                   ^ source.bh meta.function.type-declaration.bh
>ffNM mm =
#^^^^^^^^ source.bh
#        ^ source.bh keyword.operator.eq.bh
>  module
#^^ source.bh
#  ^^^^^^ source.bh keyword.control.module.bh
>    {-# hide #-}
#^^^^ source.bh
#    ^^^ source.bh meta.preprocessor.bh
#       ^^^^^^ source.bh meta.preprocessor.bh
#             ^^^ source.bh meta.preprocessor.bh
>    _i <- mm
#^^^^^^^ source.bh
#       ^^ source.bh keyword.operator.arrow.left.bh
#         ^^^^ source.bh
>
>    interface
#^^^^ source.bh meta.declaration.interface.algebraic.bh
#    ^^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh keyword.other.interface.bh
>        is    = _i.is'
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#          ^^^^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                   ^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        reset = _i.reset'
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#             ^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                   ^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>        incr  = _i.incr'
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh
#        ^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#            ^^ source.bh meta.declaration.interface.algebraic.bh
#              ^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.eq.bh
#               ^ source.bh meta.declaration.interface.algebraic.bh
#                ^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                  ^ source.bh meta.declaration.interface.algebraic.bh storage.type.operator.infix.bh
#                   ^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
>
>mkNCount :: (IsModule m c) => Bool -> Nat -> m NCount
#^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#        ^ source.bh meta.declaration.interface.algebraic.bh
#         ^^ source.bh meta.declaration.interface.algebraic.bh constant.other.operator.infix.bh
#           ^ source.bh meta.declaration.interface.algebraic.bh
#            ^ source.bh meta.declaration.interface.algebraic.bh punctuation.paren.bh
#             ^^^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                     ^ source.bh meta.declaration.interface.algebraic.bh
#                      ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                       ^ source.bh meta.declaration.interface.algebraic.bh
#                        ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                         ^ source.bh meta.declaration.interface.algebraic.bh
#                          ^ source.bh meta.declaration.interface.algebraic.bh
#                           ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.big-arrow.bh
#                             ^ source.bh meta.declaration.interface.algebraic.bh
#                              ^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                  ^ source.bh meta.declaration.interface.algebraic.bh
#                                   ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                     ^ source.bh meta.declaration.interface.algebraic.bh
#                                      ^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
#                                         ^ source.bh meta.declaration.interface.algebraic.bh
#                                          ^^ source.bh meta.declaration.interface.algebraic.bh keyword.operator.arrow.bh
#                                            ^ source.bh meta.declaration.interface.algebraic.bh
#                                             ^ source.bh meta.declaration.interface.algebraic.bh variable.other.generic-type.bh
#                                              ^ source.bh meta.declaration.interface.algebraic.bh
#                                               ^^^^^^ source.bh meta.declaration.interface.algebraic.bh storage.type.bh
>mkNCount static n =
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
>  if (static)
#^^ source.bh
#  ^^ source.bh keyword.control.if.bh
#    ^ source.bh
#     ^ source.bh punctuation.paren.bh
#      ^^^^^^ source.bh
#            ^ source.bh punctuation.paren.bh
>    then
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.then.bh
>      if      (n == 1)  then ffNM(mkNCountOneHot :: m(NCount'  1))
#^^^^^^ source.bh
#      ^^ source.bh keyword.control.if.bh
#        ^^^^^^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 2)  then ffNM(mkNCountOneHot :: m(NCount'  2))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 3)  then ffNM(mkNCountOneHot :: m(NCount'  3))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 4)  then ffNM(mkNCountOneHot :: m(NCount'  4))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 5)  then ffNM(mkNCountOneHot :: m(NCount'  5))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 6)  then ffNM(mkNCountOneHot :: m(NCount'  6))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 7)  then ffNM(mkNCountOneHot :: m(NCount'  7))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 8)  then ffNM(mkNCountOneHot :: m(NCount'  8))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 9)  then ffNM(mkNCountOneHot :: m(NCount'  9))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^ source.bh constant.numeric.integral.decimal.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^^ source.bh
#                                                               ^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 10) then ffNM(mkNCountOneHot :: m(NCount' 10))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 11) then ffNM(mkNCountOneHot :: m(NCount' 11))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 12) then ffNM(mkNCountOneHot :: m(NCount' 12))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 13) then ffNM(mkNCountOneHot :: m(NCount' 13))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 14) then ffNM(mkNCountOneHot :: m(NCount' 14))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 15) then ffNM(mkNCountOneHot :: m(NCount' 15))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else if (n == 16) then ffNM(mkNCountOneHot :: m(NCount' 16))
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^ source.bh
#           ^^ source.bh keyword.control.if.bh
#             ^ source.bh
#              ^ source.bh punctuation.paren.bh
#               ^^ source.bh
#                 ^^ source.bh keyword.operator.infix.bh
#                   ^ source.bh
#                    ^^ source.bh constant.numeric.integral.decimal.bh
#                      ^ source.bh punctuation.paren.bh
#                       ^ source.bh
#                        ^^^^ source.bh keyword.control.then.bh
#                            ^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^^^^^^^^^^^^^ source.bh
#                                                 ^^ source.bh keyword.operator.double-colon.bh
#                                                   ^ source.bh
#                                                    ^ source.bh variable.other.generic-type.bh
#                                                     ^ source.bh punctuation.paren.bh
#                                                      ^^^^^^^ source.bh storage.type.bh
#                                                             ^ source.bh
#                                                              ^^ source.bh constant.numeric.integral.decimal.bh
#                                                                ^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>      else mkNCount False n
#^^^^^^ source.bh
#      ^^^^ source.bh keyword.control.else.bh
#          ^^^^^^^^^^ source.bh
#                    ^^^^^ source.bh constant.other.bh
#                         ^^^ source.bh
>    else if n < 2        then ffNM(mkNCount' :: m(NCount' 1))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^ source.bh constant.numeric.integral.decimal.bh
#                 ^^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 4        then ffNM(mkNCount' :: m(NCount' 2))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^ source.bh constant.numeric.integral.decimal.bh
#                 ^^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 8        then ffNM(mkNCount' :: m(NCount' 3))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^ source.bh constant.numeric.integral.decimal.bh
#                 ^^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 16       then ffNM(mkNCount' :: m(NCount' 4))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 32       then ffNM(mkNCount' :: m(NCount' 5))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 64       then ffNM(mkNCount' :: m(NCount' 6))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^ source.bh constant.numeric.integral.decimal.bh
#                  ^^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 128      then ffNM(mkNCount' :: m(NCount' 7))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^ source.bh constant.numeric.integral.decimal.bh
#                   ^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 256      then ffNM(mkNCount' :: m(NCount' 8))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^ source.bh constant.numeric.integral.decimal.bh
#                   ^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 512      then ffNM(mkNCount' :: m(NCount' 9))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^ source.bh constant.numeric.integral.decimal.bh
#                   ^^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^ source.bh constant.numeric.integral.decimal.bh
#                                                           ^ source.bh
#                                                            ^ source.bh punctuation.paren.bh
>    else if n < 1024     then ffNM(mkNCount' :: m(NCount' 10))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^ source.bh constant.numeric.integral.decimal.bh
#                    ^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 2048     then ffNM(mkNCount' :: m(NCount' 11))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^ source.bh constant.numeric.integral.decimal.bh
#                    ^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 4096     then ffNM(mkNCount' :: m(NCount' 12))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^ source.bh constant.numeric.integral.decimal.bh
#                    ^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 8192     then ffNM(mkNCount' :: m(NCount' 13))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^ source.bh constant.numeric.integral.decimal.bh
#                    ^^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 16384    then ffNM(mkNCount' :: m(NCount' 14))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                     ^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 32768    then ffNM(mkNCount' :: m(NCount' 15))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                     ^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 65536    then ffNM(mkNCount' :: m(NCount' 16))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^ source.bh constant.numeric.integral.decimal.bh
#                     ^^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 131072   then ffNM(mkNCount' :: m(NCount' 17))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                      ^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 262144   then ffNM(mkNCount' :: m(NCount' 18))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                      ^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 524288   then ffNM(mkNCount' :: m(NCount' 19))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                      ^^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 1048576  then ffNM(mkNCount' :: m(NCount' 20))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                       ^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 2097152  then ffNM(mkNCount' :: m(NCount' 21))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                       ^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 4194304  then ffNM(mkNCount' :: m(NCount' 22))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                       ^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 8388608  then ffNM(mkNCount' :: m(NCount' 23))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                       ^^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 16777216 then ffNM(mkNCount' :: m(NCount' 24))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 33554432 then ffNM(mkNCount' :: m(NCount' 25))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else if n < 67108864 then ffNM(mkNCount' :: m(NCount' 26))
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^ source.bh
#         ^^ source.bh keyword.control.if.bh
#           ^^^ source.bh
#              ^ source.bh keyword.operator.infix.bh
#               ^ source.bh
#                ^^^^^^^^ source.bh constant.numeric.integral.decimal.bh
#                        ^ source.bh
#                         ^^^^ source.bh keyword.control.then.bh
#                             ^^^^^ source.bh
#                                  ^ source.bh punctuation.paren.bh
#                                   ^^^^^^^^^^ source.bh
#                                             ^^ source.bh keyword.operator.double-colon.bh
#                                               ^ source.bh
#                                                ^ source.bh variable.other.generic-type.bh
#                                                 ^ source.bh punctuation.paren.bh
#                                                  ^^^^^^^ source.bh storage.type.bh
#                                                         ^ source.bh
#                                                          ^^ source.bh constant.numeric.integral.decimal.bh
#                                                            ^ source.bh
#                                                             ^ source.bh punctuation.paren.bh
>    else error "Counter too big"
#^^^^ source.bh
#    ^^^^ source.bh keyword.control.else.bh
#        ^^^^^^^ source.bh
#               ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                ^^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>addNoActionState :: (Monad m) => TwoStateDescriptors -> LabelState a -> m (TwoStateDescriptors)
#^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#                ^ source.bh meta.function.type-declaration.bh
#                 ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#                   ^ source.bh meta.function.type-declaration.bh
#                    ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                     ^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                          ^ source.bh meta.function.type-declaration.bh
#                           ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                            ^ source.bh meta.function.type-declaration.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.big-arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                    ^ source.bh meta.function.type-declaration.bh
#                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                       ^ source.bh meta.function.type-declaration.bh
#                                                        ^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                  ^ source.bh meta.function.type-declaration.bh
#                                                                   ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                    ^ source.bh meta.function.type-declaration.bh
#                                                                     ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                                                       ^ source.bh meta.function.type-declaration.bh
#                                                                        ^ source.bh meta.function.type-declaration.bh variable.other.generic-type.bh
#                                                                         ^ source.bh meta.function.type-declaration.bh
#                                                                          ^ source.bh meta.function.type-declaration.bh punctuation.paren.bh
#                                                                           ^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                                                                              ^ source.bh meta.function.type-declaration.bh
>addNoActionState tsds ls =
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
> do let no_action (TSD _ f t _) = t == idle_state && f == idle_state
#^ source.bh
# ^^ source.bh keyword.control.do.bh
#   ^ source.bh
#    ^^^ source.bh keyword.other.let.bh
#       ^^^^^^^^^^^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^ source.bh constant.other.bh
#                      ^^^^^^^^ source.bh
#                              ^ source.bh punctuation.paren.bh
#                               ^ source.bh
#                                ^ source.bh keyword.operator.eq.bh
#                                 ^^^ source.bh
#                                    ^^ source.bh keyword.operator.infix.bh
#                                      ^^^^^^^^^^^^ source.bh
#                                                  ^^ source.bh keyword.operator.infix.bh
#                                                    ^^^ source.bh
#                                                       ^^ source.bh keyword.operator.infix.bh
#                                                         ^^^^^^^^^^^^ source.bh
>        no_action_list = filter no_action tsds
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        rest tsd = not (no_action tsd)
#^^^^^^^^^^^^^^^^^ source.bh
#                 ^ source.bh keyword.operator.eq.bh
#                  ^^^^^ source.bh
#                       ^ source.bh punctuation.paren.bh
#                        ^^^^^^^^^^^^^ source.bh
#                                     ^ source.bh punctuation.paren.bh
>        rest_list = filter rest tsds
#^^^^^^^^^^^^^^^^^^ source.bh
#                  ^ source.bh keyword.operator.eq.bh
#                   ^^^^^^^^^^^^^^^^^^ source.bh
>        handle Nil                         = return tsds
#^^^^^^^^^^^^^^^ source.bh
#               ^^^ source.bh constant.other.bh
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
#                                            ^^^^^^^^^^^^^ source.bh
>        handle (Cons (TSD cond f t _) Nil) =
#^^^^^^^^^^^^^^^ source.bh
#               ^ source.bh punctuation.paren.bh
#                ^^^^ source.bh constant.other.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.paren.bh
#                      ^^^ source.bh constant.other.bh
#                         ^^^^^^^^^^^ source.bh
#                                    ^ source.bh punctuation.paren.bh
#                                     ^ source.bh
#                                      ^^^ source.bh constant.other.bh
#                                         ^ source.bh punctuation.paren.bh
#                                          ^ source.bh
#                                           ^ source.bh keyword.operator.eq.bh
>          do let num    = ls.state_num - 1
#^^^^^^^^^^ source.bh
#          ^^ source.bh keyword.control.do.bh
#            ^ source.bh
#             ^^^ source.bh keyword.other.let.bh
#                ^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^^ source.bh
#                            ^ source.bh keyword.operator.infix.bh
#                             ^^^^^^^^^^ source.bh
#                                       ^ source.bh keyword.operator.infix.bh
#                                        ^ source.bh
#                                         ^ source.bh constant.numeric.integral.decimal.bh
>                 tsds'  =  (Cons (TSD cond f num Start) (Cons (TSD True num t Default) rest_list))
#^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                        ^ source.bh keyword.operator.eq.bh
#                         ^^ source.bh
#                           ^ source.bh punctuation.paren.bh
#                            ^^^^ source.bh constant.other.bh
#                                ^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^^^ source.bh constant.other.bh
#                                     ^^^^^^^^^^^^ source.bh
#                                                 ^^^^^ source.bh constant.other.bh
#                                                      ^ source.bh punctuation.paren.bh
#                                                       ^ source.bh
#                                                        ^ source.bh punctuation.paren.bh
#                                                         ^^^^ source.bh constant.other.bh
#                                                             ^ source.bh
#                                                              ^ source.bh punctuation.paren.bh
#                                                               ^^^ source.bh constant.other.bh
#                                                                  ^ source.bh
#                                                                   ^^^^ source.bh constant.other.bh
#                                                                       ^^^^^^^ source.bh
#                                                                              ^^^^^^^ source.bh constant.other.bh
#                                                                                     ^ source.bh punctuation.paren.bh
#                                                                                      ^^^^^^^^^^ source.bh
#                                                                                                ^ source.bh punctuation.paren.bh
#                                                                                                 ^ source.bh punctuation.paren.bh
>             tsds'' <- addWaitBypassTSDs idle_state tsds'
#^^^^^^^^^^^^^^^^^^^^ source.bh
#                    ^^ source.bh keyword.operator.arrow.left.bh
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>             let tsds''' = combineTSDs (sortBy compareTSDs tsds'')
#^^^^^^^^^^^^^ source.bh
#             ^^^ source.bh keyword.other.let.bh
#                ^^^^^^^^^ source.bh
#                         ^ source.bh keyword.operator.eq.bh
#                          ^^^^^^^^^^^^^ source.bh
#                                       ^ source.bh punctuation.paren.bh
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                 ^ source.bh punctuation.paren.bh
>             return tsds'''
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>        handle _                  = error "unhandled case"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                                  ^ source.bh keyword.operator.eq.bh
#                                   ^^^^^^^ source.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                           ^^^^^^^^^^^^^^ source.bh string.quoted.double.bh
#                                                         ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    handle no_action_list
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh
>
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>dummyAction :: Action
#^^^^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#              ^ source.bh meta.function.type-declaration.bh
#               ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>dummyAction = action {$write ""}
#^^^^^^^^^^^^ source.bh
#            ^ source.bh keyword.operator.eq.bh
#             ^ source.bh
#              ^^^^^^ source.bh keyword.other.action.bh
#                    ^ source.bh
#                     ^ source.bh punctuation.brace.bh
#                      ^ source.bh keyword.operator.prefix.dollar.bh
#                       ^^^^^^ source.bh
#                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                               ^ source.bh punctuation.brace.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>ruleName :: String -> Integer -> String -> String
#^^^^^^^^ source.bh meta.function.type-declaration.bh entity.name.function.bh
#        ^ source.bh meta.function.type-declaration.bh
#         ^^ source.bh meta.function.type-declaration.bh keyword.operator.double-colon.bh
#           ^ source.bh meta.function.type-declaration.bh
#            ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                  ^ source.bh meta.function.type-declaration.bh
#                   ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                     ^ source.bh meta.function.type-declaration.bh
#                      ^^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                             ^ source.bh meta.function.type-declaration.bh
#                              ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                ^ source.bh meta.function.type-declaration.bh
#                                 ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
#                                       ^ source.bh meta.function.type-declaration.bh
#                                        ^^ source.bh meta.function.type-declaration.bh keyword.operator.arrow.bh
#                                          ^ source.bh meta.function.type-declaration.bh
#                                           ^^^^^^ source.bh meta.function.type-declaration.bh storage.type.bh
>-- ruleName text n suffix = (text +++ "_" +++ (integerToString n) +++ suffix)
#^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh meta.function.type-declaration.bh comment.line.double-dash.bh
>ruleName text _ suffix = (text +++ suffix)
#^^^^^^^^^^^^^^^^^^^^^^^ source.bh
#                       ^ source.bh keyword.operator.eq.bh
#                        ^ source.bh
#                         ^ source.bh punctuation.paren.bh
#                          ^^^^^ source.bh
#                               ^^^ source.bh keyword.operator.infix.bh
#                                  ^^^^^^^ source.bh
#                                         ^ source.bh punctuation.paren.bh
>
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>-- #
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^ source.bh comment.line.double-dash.bh
>-- #############################################################################
#^^ source.bh comment.line.double-dash.bh punctuation.definition.comment.bh
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.bh comment.line.double-dash.bh
>
>
>
>instance ToString TwoStateDescriptor where
#^^^^^^^^ source.bh meta.declaration.instance.bh keyword.other.instance.bh
#        ^ source.bh meta.declaration.instance.bh
#         ^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                 ^ source.bh meta.declaration.instance.bh
#                  ^^^^^^^^^^^^^^^^^^ source.bh meta.declaration.instance.bh storage.type.bh
#                                    ^ source.bh meta.declaration.instance.bh
#                                     ^^^^^ source.bh keyword.other.where.bh
>    toString (TSD c from to Default) =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^ source.bh constant.other.bh
#                 ^^^^^^^^^^^ source.bh
#                            ^^^^^^^ source.bh constant.other.bh
#                                   ^ source.bh punctuation.paren.bh
#                                    ^ source.bh
#                                     ^ source.bh keyword.operator.eq.bh
>      "<TSD " +++ (boolToString c) +++ ", " +++ (integerToString from) +++ ", " +++ (integerToString to) +++ ">"
#^^^^^^ source.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#       ^^^^^ source.bh string.quoted.double.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#             ^ source.bh
#              ^^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh
#                                            ^^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                            ^^ source.bh string.quoted.double.bh
#                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                               ^ source.bh
#                                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                        ^ source.bh
#                                                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                                                            ^ source.bh
#                                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                              ^ source.bh string.quoted.double.bh
#                                                                                                               ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    toString (TSD c from to Start) =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^ source.bh constant.other.bh
#                 ^^^^^^^^^^^ source.bh
#                            ^^^^^ source.bh constant.other.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^ source.bh keyword.operator.eq.bh
>      "<TSD " +++ (boolToString c) +++ ", " +++ (integerToString from) +++ ", " +++ (integerToString to) +++ " (S)>"
#^^^^^^ source.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#       ^^^^^ source.bh string.quoted.double.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#             ^ source.bh
#              ^^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh
#                                            ^^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                            ^^ source.bh string.quoted.double.bh
#                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                               ^ source.bh
#                                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                        ^ source.bh
#                                                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                                                            ^ source.bh
#                                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                              ^^^^^ source.bh string.quoted.double.bh
#                                                                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>    toString (TSD c from to End) =
#^^^^^^^^^^^^^ source.bh
#             ^ source.bh punctuation.paren.bh
#              ^^^ source.bh constant.other.bh
#                 ^^^^^^^^^^^ source.bh
#                            ^^^ source.bh constant.other.bh
#                               ^ source.bh punctuation.paren.bh
#                                ^ source.bh
#                                 ^ source.bh keyword.operator.eq.bh
>      "<TSD " +++ (boolToString c) +++ ", " +++ (integerToString from) +++ ", " +++ (integerToString to) +++ " (E)>"
#^^^^^^ source.bh
#      ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#       ^^^^^ source.bh string.quoted.double.bh
#            ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#             ^ source.bh
#              ^^^ source.bh keyword.operator.infix.bh
#                 ^ source.bh
#                  ^ source.bh punctuation.paren.bh
#                   ^^^^^^^^^^^^^^ source.bh
#                                 ^ source.bh punctuation.paren.bh
#                                  ^ source.bh
#                                   ^^^ source.bh keyword.operator.infix.bh
#                                      ^ source.bh
#                                       ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                        ^^ source.bh string.quoted.double.bh
#                                          ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                           ^ source.bh
#                                            ^^^ source.bh keyword.operator.infix.bh
#                                               ^ source.bh
#                                                ^ source.bh punctuation.paren.bh
#                                                 ^^^^^^^^^^^^^^^^^^^^ source.bh
#                                                                     ^ source.bh punctuation.paren.bh
#                                                                      ^ source.bh
#                                                                       ^^^ source.bh keyword.operator.infix.bh
#                                                                          ^ source.bh
#                                                                           ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                            ^^ source.bh string.quoted.double.bh
#                                                                              ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
#                                                                               ^ source.bh
#                                                                                ^^^ source.bh keyword.operator.infix.bh
#                                                                                   ^ source.bh
#                                                                                    ^ source.bh punctuation.paren.bh
#                                                                                     ^^^^^^^^^^^^^^^^^^ source.bh
#                                                                                                       ^ source.bh punctuation.paren.bh
#                                                                                                        ^ source.bh
#                                                                                                         ^^^ source.bh keyword.operator.infix.bh
#                                                                                                            ^ source.bh
#                                                                                                             ^ source.bh string.quoted.double.bh punctuation.definition.string.begin.bh
#                                                                                                              ^^^^^ source.bh string.quoted.double.bh
#                                                                                                                   ^ source.bh string.quoted.double.bh punctuation.definition.string.end.bh
>